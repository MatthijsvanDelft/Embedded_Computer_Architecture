
Assignment_1.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  00000a10  00000aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800286  00800286  00000c2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d94  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000148f  00000000  00000000  00007c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001268  00000000  00000000  000090e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b4  00000000  00000000  0000a350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001df8  00000000  00000000  0000aa04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002546  00000000  00000000  0000c7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000ed42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_18>
  4c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	fd 02       	muls	r31, r29

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 e1       	ldi	r30, 0x10	; 16
  7e:	fa e0       	ldi	r31, 0x0A	; 10
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 38       	cpi	r26, 0x86	; 134
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	23 e0       	ldi	r18, 0x03	; 3
  8e:	a6 e8       	ldi	r26, 0x86	; 134
  90:	b2 e0       	ldi	r27, 0x02	; 2
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ac 32       	cpi	r26, 0x2C	; 44
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 00 05 	call	0xa00	; 0xa00 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 2b 03 	call	0x656	; 0x656 <main>
  b6:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	55 e2       	ldi	r21, 0x25	; 37
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	0c 94 36 02 	jmp	0x46c	; 0x46c <_ZN14HardwareSerial5beginEmh>

000000d0 <loop>:
  d0:	2f 92       	push	r2
  d2:	3f 92       	push	r3
  d4:	5f 92       	push	r5
  d6:	6f 92       	push	r6
  d8:	7f 92       	push	r7
  da:	8f 92       	push	r8
  dc:	9f 92       	push	r9
  de:	af 92       	push	r10
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	ca 5a       	subi	r28, 0xAA	; 170
  f8:	d2 40       	sbci	r29, 0x02	; 2
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	9e 01       	movw	r18, r28
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	cb 55       	subi	r28, 0x5B	; 91
 10c:	dd 4f       	sbci	r29, 0xFD	; 253
 10e:	39 83       	std	Y+1, r19	; 0x01
 110:	28 83       	st	Y, r18
 112:	c5 5a       	subi	r28, 0xA5	; 165
 114:	d2 40       	sbci	r29, 0x02	; 2
 116:	84 ea       	ldi	r24, 0xA4	; 164
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	d9 01       	movw	r26, r18
 11c:	fc 01       	movw	r30, r24
 11e:	1d 92       	st	X+, r1
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	e9 f7       	brne	.-6      	; 0x11e <loop+0x4e>
 124:	0e 94 7e 04 	call	0x8fc	; 0x8fc <micros>
 128:	c9 55       	subi	r28, 0x59	; 89
 12a:	dd 4f       	sbci	r29, 0xFD	; 253
 12c:	68 83       	st	Y, r22
 12e:	79 83       	std	Y+1, r23	; 0x01
 130:	8a 83       	std	Y+2, r24	; 0x02
 132:	9b 83       	std	Y+3, r25	; 0x03
 134:	c7 5a       	subi	r28, 0xA7	; 167
 136:	d2 40       	sbci	r29, 0x02	; 2
 138:	88 ee       	ldi	r24, 0xE8	; 232
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	9e 01       	movw	r18, r28
 13e:	2b 55       	subi	r18, 0x5B	; 91
 140:	3d 4f       	sbci	r19, 0xFD	; 253
 142:	19 01       	movw	r2, r18
 144:	4c 01       	movw	r8, r24
 146:	92 e5       	ldi	r25, 0x52	; 82
 148:	e9 2e       	mov	r14, r25
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	f9 2e       	mov	r15, r25
 14e:	29 ea       	ldi	r18, 0xA9	; 169
 150:	c2 2e       	mov	r12, r18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	d2 2e       	mov	r13, r18
 156:	51 01       	movw	r10, r2
 158:	3d e0       	ldi	r19, 0x0D	; 13
 15a:	73 2e       	mov	r7, r19
 15c:	08 ea       	ldi	r16, 0xA8	; 168
 15e:	11 e0       	ldi	r17, 0x01	; 1
 160:	61 e5       	ldi	r22, 0x51	; 81
 162:	72 e0       	ldi	r23, 0x02	; 2
 164:	57 2c       	mov	r5, r7
 166:	db 01       	movw	r26, r22
 168:	2c 91       	ld	r18, X
 16a:	f8 01       	movw	r30, r16
 16c:	80 81       	ld	r24, Z
 16e:	28 02       	muls	r18, r24
 170:	90 01       	movw	r18, r0
 172:	11 24       	eor	r1, r1
 174:	fb 01       	movw	r30, r22
 176:	32 97       	sbiw	r30, 0x02	; 2
 178:	d8 01       	movw	r26, r16
 17a:	5a 97       	sbiw	r26, 0x1a	; 26
 17c:	3b 01       	movw	r6, r22
 17e:	4e e0       	ldi	r20, 0x0E	; 14
 180:	64 1a       	sub	r6, r20
 182:	71 08       	sbc	r7, r1
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	51 81       	ldd	r21, Z+1	; 0x01
 18a:	1d 96       	adiw	r26, 0x0d	; 13
 18c:	4c 91       	ld	r20, X
 18e:	1d 97       	sbiw	r26, 0x0d	; 13
 190:	54 02       	muls	r21, r20
 192:	20 0d       	add	r18, r0
 194:	31 1d       	adc	r19, r1
 196:	11 24       	eor	r1, r1
 198:	50 81       	ld	r21, Z
 19a:	4c 91       	ld	r20, X
 19c:	54 02       	muls	r21, r20
 19e:	80 0d       	add	r24, r0
 1a0:	91 1d       	adc	r25, r1
 1a2:	11 24       	eor	r1, r1
 1a4:	32 97       	sbiw	r30, 0x02	; 2
 1a6:	5a 97       	sbiw	r26, 0x1a	; 26
 1a8:	6e 16       	cp	r6, r30
 1aa:	7f 06       	cpc	r7, r31
 1ac:	69 f7       	brne	.-38     	; 0x188 <loop+0xb8>
 1ae:	d7 01       	movw	r26, r14
 1b0:	ee 91       	ld	r30, -X
 1b2:	7d 01       	movw	r14, r26
 1b4:	d6 01       	movw	r26, r12
 1b6:	4e 91       	ld	r20, -X
 1b8:	6d 01       	movw	r12, r26
 1ba:	4e 0f       	add	r20, r30
 1bc:	24 0f       	add	r18, r20
 1be:	31 1d       	adc	r19, r1
 1c0:	a0 e0       	ldi	r26, 0x00	; 0
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	82 0f       	add	r24, r18
 1c6:	93 1f       	adc	r25, r19
 1c8:	a1 1d       	adc	r26, r1
 1ca:	b1 1d       	adc	r27, r1
 1cc:	f5 01       	movw	r30, r10
 1ce:	b2 93       	st	-Z, r27
 1d0:	a2 93       	st	-Z, r26
 1d2:	92 93       	st	-Z, r25
 1d4:	82 93       	st	-Z, r24
 1d6:	5f 01       	movw	r10, r30
 1d8:	5a 94       	dec	r5
 1da:	55 20       	and	r5, r5
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <loop+0x110>
 1de:	6a c0       	rjmp	.+212    	; 0x2b4 <loop+0x1e4>
 1e0:	01 50       	subi	r16, 0x01	; 1
 1e2:	11 09       	sbc	r17, r1
 1e4:	f9 ea       	ldi	r31, 0xA9	; 169
 1e6:	ef 16       	cp	r14, r31
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	ff 06       	cpc	r15, r31
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <loop+0x120>
 1ee:	bb cf       	rjmp	.-138    	; 0x166 <loop+0x96>
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	82 1a       	sub	r8, r18
 1f4:	91 08       	sbc	r9, r1
 1f6:	09 f0       	breq	.+2      	; 0x1fa <loop+0x12a>
 1f8:	a6 cf       	rjmp	.-180    	; 0x146 <loop+0x76>
 1fa:	0e 94 7e 04 	call	0x8fc	; 0x8fc <micros>
 1fe:	6b 01       	movw	r12, r22
 200:	7c 01       	movw	r14, r24
 202:	c9 55       	subi	r28, 0x59	; 89
 204:	dd 4f       	sbci	r29, 0xFD	; 253
 206:	28 81       	ld	r18, Y
 208:	39 81       	ldd	r19, Y+1	; 0x01
 20a:	4a 81       	ldd	r20, Y+2	; 0x02
 20c:	5b 81       	ldd	r21, Y+3	; 0x03
 20e:	c7 5a       	subi	r28, 0xA7	; 167
 210:	d2 40       	sbci	r29, 0x02	; 2
 212:	c2 1a       	sub	r12, r18
 214:	d3 0a       	sbc	r13, r19
 216:	e4 0a       	sbc	r14, r20
 218:	f5 0a       	sbc	r15, r21
 21a:	42 e1       	ldi	r20, 0x12	; 18
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	62 e5       	ldi	r22, 0x52	; 82
 220:	72 e0       	ldi	r23, 0x02	; 2
 222:	86 e8       	ldi	r24, 0x86	; 134
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	0e 94 3a 03 	call	0x674	; 0x674 <_ZN5Print5writeEPKhj>
 22a:	2a e0       	ldi	r18, 0x0A	; 10
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b7 01       	movw	r22, r14
 230:	a6 01       	movw	r20, r12
 232:	86 e8       	ldi	r24, 0x86	; 134
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN5Print7printlnEmi>
 23a:	8e 01       	movw	r16, r28
 23c:	0f 5f       	subi	r16, 0xFF	; 255
 23e:	1f 4f       	sbci	r17, 0xFF	; 255
 240:	78 01       	movw	r14, r16
 242:	34 e3       	ldi	r19, 0x34	; 52
 244:	e3 0e       	add	r14, r19
 246:	f1 1c       	adc	r15, r1
 248:	d8 01       	movw	r26, r16
 24a:	4d 91       	ld	r20, X+
 24c:	5d 91       	ld	r21, X+
 24e:	6d 91       	ld	r22, X+
 250:	7d 91       	ld	r23, X+
 252:	8d 01       	movw	r16, r26
 254:	2a e0       	ldi	r18, 0x0A	; 10
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	86 e8       	ldi	r24, 0x86	; 134
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN5Print5printEli>
 260:	69 e0       	ldi	r22, 0x09	; 9
 262:	86 e8       	ldi	r24, 0x86	; 134
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN5Print5printEc>
 26a:	e0 16       	cp	r14, r16
 26c:	f1 06       	cpc	r15, r17
 26e:	61 f7       	brne	.-40     	; 0x248 <loop+0x178>
 270:	6a e0       	ldi	r22, 0x0A	; 10
 272:	86 e8       	ldi	r24, 0x86	; 134
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN5Print5printEc>
 27a:	87 01       	movw	r16, r14
 27c:	e2 14       	cp	r14, r2
 27e:	f3 04       	cpc	r15, r3
 280:	f9 f6       	brne	.-66     	; 0x240 <loop+0x170>
 282:	c6 55       	subi	r28, 0x56	; 86
 284:	dd 4f       	sbci	r29, 0xFD	; 253
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	cf 90       	pop	r12
 2a0:	bf 90       	pop	r11
 2a2:	af 90       	pop	r10
 2a4:	9f 90       	pop	r9
 2a6:	8f 90       	pop	r8
 2a8:	7f 90       	pop	r7
 2aa:	6f 90       	pop	r6
 2ac:	5f 90       	pop	r5
 2ae:	3f 90       	pop	r3
 2b0:	2f 90       	pop	r2
 2b2:	08 95       	ret
 2b4:	6d 50       	subi	r22, 0x0D	; 13
 2b6:	71 09       	sbc	r23, r1
 2b8:	04 5f       	subi	r16, 0xF4	; 244
 2ba:	1f 4f       	sbci	r17, 0xFF	; 255
 2bc:	8d e0       	ldi	r24, 0x0D	; 13
 2be:	58 2e       	mov	r5, r24
 2c0:	91 cf       	rjmp	.-222    	; 0x1e4 <loop+0x114>

000002c2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2c2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2c4:	91 8d       	ldd	r25, Z+25	; 0x19
 2c6:	22 8d       	ldd	r18, Z+26	; 0x1a
 2c8:	89 2f       	mov	r24, r25
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	80 5c       	subi	r24, 0xC0	; 192
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	82 1b       	sub	r24, r18
 2d2:	91 09       	sbc	r25, r1
}
 2d4:	8f 73       	andi	r24, 0x3F	; 63
 2d6:	99 27       	eor	r25, r25
 2d8:	08 95       	ret

000002da <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2da:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2dc:	91 8d       	ldd	r25, Z+25	; 0x19
 2de:	82 8d       	ldd	r24, Z+26	; 0x1a
 2e0:	98 17       	cp	r25, r24
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2e4:	82 8d       	ldd	r24, Z+26	; 0x1a
 2e6:	e8 0f       	add	r30, r24
 2e8:	f1 1d       	adc	r31, r1
 2ea:	85 8d       	ldd	r24, Z+29	; 0x1d
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2f4:	08 95       	ret

000002f6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2f6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2f8:	91 8d       	ldd	r25, Z+25	; 0x19
 2fa:	82 8d       	ldd	r24, Z+26	; 0x1a
 2fc:	98 17       	cp	r25, r24
 2fe:	61 f0       	breq	.+24     	; 0x318 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 300:	82 8d       	ldd	r24, Z+26	; 0x1a
 302:	df 01       	movw	r26, r30
 304:	a8 0f       	add	r26, r24
 306:	b1 1d       	adc	r27, r1
 308:	5d 96       	adiw	r26, 0x1d	; 29
 30a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 30c:	92 8d       	ldd	r25, Z+26	; 0x1a
 30e:	9f 5f       	subi	r25, 0xFF	; 255
 310:	9f 73       	andi	r25, 0x3F	; 63
 312:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 31c:	08 95       	ret

0000031e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 31e:	fc 01       	movw	r30, r24
 320:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 322:	44 8d       	ldd	r20, Z+28	; 0x1c
 324:	25 2f       	mov	r18, r21
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	84 2f       	mov	r24, r20
 32a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 32c:	82 1b       	sub	r24, r18
 32e:	93 0b       	sbc	r25, r19
 330:	54 17       	cp	r21, r20
 332:	10 f0       	brcs	.+4      	; 0x338 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 334:	cf 96       	adiw	r24, 0x3f	; 63
 336:	08 95       	ret
  return tail - head - 1;
 338:	01 97       	sbiw	r24, 0x01	; 1
}
 33a:	08 95       	ret

0000033c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 33c:	83 ef       	ldi	r24, 0xF3	; 243
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	89 2b       	or	r24, r25
 342:	49 f0       	breq	.+18     	; 0x356 <_Z14serialEventRunv+0x1a>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	89 2b       	or	r24, r25
 34a:	29 f0       	breq	.+10     	; 0x356 <_Z14serialEventRunv+0x1a>
 34c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_Z17Serial0_availablev>
 350:	81 11       	cpse	r24, r1
 352:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 356:	08 95       	ret

00000358 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 358:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 35a:	84 8d       	ldd	r24, Z+28	; 0x1c
 35c:	df 01       	movw	r26, r30
 35e:	a8 0f       	add	r26, r24
 360:	b1 1d       	adc	r27, r1
 362:	a3 5a       	subi	r26, 0xA3	; 163
 364:	bf 4f       	sbci	r27, 0xFF	; 255
 366:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 368:	84 8d       	ldd	r24, Z+28	; 0x1c
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	8f 73       	andi	r24, 0x3F	; 63
 370:	99 27       	eor	r25, r25
 372:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 374:	a6 89       	ldd	r26, Z+22	; 0x16
 376:	b7 89       	ldd	r27, Z+23	; 0x17
 378:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 37a:	a0 89       	ldd	r26, Z+16	; 0x10
 37c:	b1 89       	ldd	r27, Z+17	; 0x11
 37e:	8c 91       	ld	r24, X
 380:	80 64       	ori	r24, 0x40	; 64
 382:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 384:	93 8d       	ldd	r25, Z+27	; 0x1b
 386:	84 8d       	ldd	r24, Z+28	; 0x1c
 388:	98 13       	cpse	r25, r24
 38a:	06 c0       	rjmp	.+12     	; 0x398 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 38c:	02 88       	ldd	r0, Z+18	; 0x12
 38e:	f3 89       	ldd	r31, Z+19	; 0x13
 390:	e0 2d       	mov	r30, r0
 392:	80 81       	ld	r24, Z
 394:	8f 7d       	andi	r24, 0xDF	; 223
 396:	80 83       	st	Z, r24
 398:	08 95       	ret

0000039a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
  _written = true;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 3ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3b0:	98 13       	cpse	r25, r24
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <_ZN14HardwareSerial5writeEh+0x24>
 3b4:	e8 89       	ldd	r30, Y+16	; 0x10
 3b6:	f9 89       	ldd	r31, Y+17	; 0x11
 3b8:	80 81       	ld	r24, Z
 3ba:	85 fd       	sbrc	r24, 5
 3bc:	24 c0       	rjmp	.+72     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3be:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 3c0:	0b 8d       	ldd	r16, Y+27	; 0x1b
 3c2:	10 e0       	ldi	r17, 0x00	; 0
 3c4:	0f 5f       	subi	r16, 0xFF	; 255
 3c6:	1f 4f       	sbci	r17, 0xFF	; 255
 3c8:	0f 73       	andi	r16, 0x3F	; 63
 3ca:	11 27       	eor	r17, r17
 3cc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 3ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3d0:	e8 12       	cpse	r14, r24
 3d2:	0c c0       	rjmp	.+24     	; 0x3ec <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	07 fc       	sbrc	r0, 7
 3d8:	fa cf       	rjmp	.-12     	; 0x3ce <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3da:	e8 89       	ldd	r30, Y+16	; 0x10
 3dc:	f9 89       	ldd	r31, Y+17	; 0x11
 3de:	80 81       	ld	r24, Z
 3e0:	85 ff       	sbrs	r24, 5
 3e2:	f5 cf       	rjmp	.-22     	; 0x3ce <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3e4:	ce 01       	movw	r24, r28
 3e6:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3ea:	f1 cf       	rjmp	.-30     	; 0x3ce <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3ee:	fe 01       	movw	r30, r28
 3f0:	e8 0f       	add	r30, r24
 3f2:	f1 1d       	adc	r31, r1
 3f4:	e3 5a       	subi	r30, 0xA3	; 163
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 3fa:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 3fc:	ea 89       	ldd	r30, Y+18	; 0x12
 3fe:	fb 89       	ldd	r31, Y+19	; 0x13
 400:	80 81       	ld	r24, Z
 402:	80 62       	ori	r24, 0x20	; 32
 404:	07 c0       	rjmp	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 406:	ee 89       	ldd	r30, Y+22	; 0x16
 408:	ff 89       	ldd	r31, Y+23	; 0x17
 40a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 40c:	e8 89       	ldd	r30, Y+16	; 0x10
 40e:	f9 89       	ldd	r31, Y+17	; 0x11
 410:	80 81       	ld	r24, Z
 412:	80 64       	ori	r24, 0x40	; 64
 414:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	ff 90       	pop	r15
 424:	ef 90       	pop	r14
 426:	08 95       	ret

00000428 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 42e:	88 8d       	ldd	r24, Y+24	; 0x18
 430:	88 23       	and	r24, r24
 432:	c9 f0       	breq	.+50     	; 0x466 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 434:	ea 89       	ldd	r30, Y+18	; 0x12
 436:	fb 89       	ldd	r31, Y+19	; 0x13
 438:	80 81       	ld	r24, Z
 43a:	85 fd       	sbrc	r24, 5
 43c:	05 c0       	rjmp	.+10     	; 0x448 <_ZN14HardwareSerial5flushEv+0x20>
 43e:	a8 89       	ldd	r26, Y+16	; 0x10
 440:	b9 89       	ldd	r27, Y+17	; 0x11
 442:	8c 91       	ld	r24, X
 444:	86 fd       	sbrc	r24, 6
 446:	0f c0       	rjmp	.+30     	; 0x466 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	07 fc       	sbrc	r0, 7
 44c:	f5 cf       	rjmp	.-22     	; 0x438 <_ZN14HardwareSerial5flushEv+0x10>
 44e:	80 81       	ld	r24, Z
 450:	85 ff       	sbrs	r24, 5
 452:	f2 cf       	rjmp	.-28     	; 0x438 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 454:	a8 89       	ldd	r26, Y+16	; 0x10
 456:	b9 89       	ldd	r27, Y+17	; 0x11
 458:	8c 91       	ld	r24, X
 45a:	85 ff       	sbrs	r24, 5
 45c:	ed cf       	rjmp	.-38     	; 0x438 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 45e:	ce 01       	movw	r24, r28
 460:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 464:	e7 cf       	rjmp	.-50     	; 0x434 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 46c:	cf 92       	push	r12
 46e:	df 92       	push	r13
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	ec 01       	movw	r28, r24
 47c:	6a 01       	movw	r12, r20
 47e:	7b 01       	movw	r14, r22
 480:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 482:	e8 89       	ldd	r30, Y+16	; 0x10
 484:	f9 89       	ldd	r31, Y+17	; 0x11
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 48a:	41 15       	cp	r20, r1
 48c:	51 4e       	sbci	r21, 0xE1	; 225
 48e:	61 05       	cpc	r22, r1
 490:	71 05       	cpc	r23, r1
 492:	b1 f0       	breq	.+44     	; 0x4c0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	79 e0       	ldi	r23, 0x09	; 9
 498:	8d e3       	ldi	r24, 0x3D	; 61
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	a7 01       	movw	r20, r14
 49e:	96 01       	movw	r18, r12
 4a0:	0e 94 de 04 	call	0x9bc	; 0x9bc <__udivmodsi4>
 4a4:	da 01       	movw	r26, r20
 4a6:	c9 01       	movw	r24, r18
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	a1 09       	sbc	r26, r1
 4ac:	b1 09       	sbc	r27, r1
 4ae:	b6 95       	lsr	r27
 4b0:	a7 95       	ror	r26
 4b2:	97 95       	ror	r25
 4b4:	87 95       	ror	r24
 4b6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4b8:	21 15       	cp	r18, r1
 4ba:	80 e1       	ldi	r24, 0x10	; 16
 4bc:	38 07       	cpc	r19, r24
 4be:	a8 f0       	brcs	.+42     	; 0x4ea <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 4c0:	e8 89       	ldd	r30, Y+16	; 0x10
 4c2:	f9 89       	ldd	r31, Y+17	; 0x11
 4c4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 4c6:	60 e8       	ldi	r22, 0x80	; 128
 4c8:	74 e8       	ldi	r23, 0x84	; 132
 4ca:	8e e1       	ldi	r24, 0x1E	; 30
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	a7 01       	movw	r20, r14
 4d0:	96 01       	movw	r18, r12
 4d2:	0e 94 de 04 	call	0x9bc	; 0x9bc <__udivmodsi4>
 4d6:	da 01       	movw	r26, r20
 4d8:	c9 01       	movw	r24, r18
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	a1 09       	sbc	r26, r1
 4de:	b1 09       	sbc	r27, r1
 4e0:	b6 95       	lsr	r27
 4e2:	a7 95       	ror	r26
 4e4:	97 95       	ror	r25
 4e6:	87 95       	ror	r24
 4e8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 4ea:	ec 85       	ldd	r30, Y+12	; 0x0c
 4ec:	fd 85       	ldd	r31, Y+13	; 0x0d
 4ee:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 4f0:	ee 85       	ldd	r30, Y+14	; 0x0e
 4f2:	ff 85       	ldd	r31, Y+15	; 0x0f
 4f4:	20 83       	st	Z, r18

  _written = false;
 4f6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 4f8:	ec 89       	ldd	r30, Y+20	; 0x14
 4fa:	fd 89       	ldd	r31, Y+21	; 0x15
 4fc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 4fe:	ea 89       	ldd	r30, Y+18	; 0x12
 500:	fb 89       	ldd	r31, Y+19	; 0x13
 502:	80 81       	ld	r24, Z
 504:	80 61       	ori	r24, 0x10	; 16
 506:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 508:	ea 89       	ldd	r30, Y+18	; 0x12
 50a:	fb 89       	ldd	r31, Y+19	; 0x13
 50c:	80 81       	ld	r24, Z
 50e:	88 60       	ori	r24, 0x08	; 8
 510:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 512:	ea 89       	ldd	r30, Y+18	; 0x12
 514:	fb 89       	ldd	r31, Y+19	; 0x13
 516:	80 81       	ld	r24, Z
 518:	80 68       	ori	r24, 0x80	; 128
 51a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 51c:	ea 89       	ldd	r30, Y+18	; 0x12
 51e:	fb 89       	ldd	r31, Y+19	; 0x13
 520:	80 81       	ld	r24, Z
 522:	8f 7d       	andi	r24, 0xDF	; 223
 524:	80 83       	st	Z, r24
}
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	08 95       	ret

00000536 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 536:	1f 92       	push	r1
 538:	0f 92       	push	r0
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	0f 92       	push	r0
 53e:	11 24       	eor	r1, r1
 540:	2f 93       	push	r18
 542:	8f 93       	push	r24
 544:	9f 93       	push	r25
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 54a:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <__data_end+0x10>
 54e:	f0 91 97 02 	lds	r31, 0x0297	; 0x800297 <__data_end+0x11>
 552:	80 81       	ld	r24, Z
 554:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end+0x16>
 558:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <__data_end+0x17>
 55c:	82 fd       	sbrc	r24, 2
 55e:	12 c0       	rjmp	.+36     	; 0x584 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 560:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 562:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <__data_end+0x19>
 566:	8f 5f       	subi	r24, 0xFF	; 255
 568:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 56a:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__data_end+0x1a>
 56e:	82 17       	cp	r24, r18
 570:	51 f0       	breq	.+20     	; 0x586 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 572:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__data_end+0x19>
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	ea 57       	subi	r30, 0x7A	; 122
 57a:	fd 4f       	sbci	r31, 0xFD	; 253
 57c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 57e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <__data_end+0x19>
 582:	01 c0       	rjmp	.+2      	; 0x586 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 584:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	9f 91       	pop	r25
 58c:	8f 91       	pop	r24
 58e:	2f 91       	pop	r18
 590:	0f 90       	pop	r0
 592:	0f be       	out	0x3f, r0	; 63
 594:	0f 90       	pop	r0
 596:	1f 90       	pop	r1
 598:	18 95       	reti

0000059a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	11 24       	eor	r1, r1
 5a4:	2f 93       	push	r18
 5a6:	3f 93       	push	r19
 5a8:	4f 93       	push	r20
 5aa:	5f 93       	push	r21
 5ac:	6f 93       	push	r22
 5ae:	7f 93       	push	r23
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
 5b4:	af 93       	push	r26
 5b6:	bf 93       	push	r27
 5b8:	ef 93       	push	r30
 5ba:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 5bc:	86 e8       	ldi	r24, 0x86	; 134
 5be:	92 e0       	ldi	r25, 0x02	; 2
 5c0:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	bf 91       	pop	r27
 5ca:	af 91       	pop	r26
 5cc:	9f 91       	pop	r25
 5ce:	8f 91       	pop	r24
 5d0:	7f 91       	pop	r23
 5d2:	6f 91       	pop	r22
 5d4:	5f 91       	pop	r21
 5d6:	4f 91       	pop	r20
 5d8:	3f 91       	pop	r19
 5da:	2f 91       	pop	r18
 5dc:	0f 90       	pop	r0
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	0f 90       	pop	r0
 5e2:	1f 90       	pop	r1
 5e4:	18 95       	reti

000005e6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 5e6:	86 e8       	ldi	r24, 0x86	; 134
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN14HardwareSerial9availableEv>
 5ee:	21 e0       	ldi	r18, 0x01	; 1
 5f0:	89 2b       	or	r24, r25
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <_Z17Serial0_availablev+0x10>
 5f4:	20 e0       	ldi	r18, 0x00	; 0
}
 5f6:	82 2f       	mov	r24, r18
 5f8:	08 95       	ret

000005fa <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 5fa:	e6 e8       	ldi	r30, 0x86	; 134
 5fc:	f2 e0       	ldi	r31, 0x02	; 2
 5fe:	13 82       	std	Z+3, r1	; 0x03
 600:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 602:	88 ee       	ldi	r24, 0xE8	; 232
 604:	93 e0       	ldi	r25, 0x03	; 3
 606:	a0 e0       	ldi	r26, 0x00	; 0
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	84 83       	std	Z+4, r24	; 0x04
 60c:	95 83       	std	Z+5, r25	; 0x05
 60e:	a6 83       	std	Z+6, r26	; 0x06
 610:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 612:	89 e6       	ldi	r24, 0x69	; 105
 614:	92 e0       	ldi	r25, 0x02	; 2
 616:	91 83       	std	Z+1, r25	; 0x01
 618:	80 83       	st	Z, r24
 61a:	85 ec       	ldi	r24, 0xC5	; 197
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	95 87       	std	Z+13, r25	; 0x0d
 620:	84 87       	std	Z+12, r24	; 0x0c
 622:	84 ec       	ldi	r24, 0xC4	; 196
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	97 87       	std	Z+15, r25	; 0x0f
 628:	86 87       	std	Z+14, r24	; 0x0e
 62a:	80 ec       	ldi	r24, 0xC0	; 192
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	91 8b       	std	Z+17, r25	; 0x11
 630:	80 8b       	std	Z+16, r24	; 0x10
 632:	81 ec       	ldi	r24, 0xC1	; 193
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	93 8b       	std	Z+19, r25	; 0x13
 638:	82 8b       	std	Z+18, r24	; 0x12
 63a:	82 ec       	ldi	r24, 0xC2	; 194
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	95 8b       	std	Z+21, r25	; 0x15
 640:	84 8b       	std	Z+20, r24	; 0x14
 642:	86 ec       	ldi	r24, 0xC6	; 198
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	97 8b       	std	Z+23, r25	; 0x17
 648:	86 8b       	std	Z+22, r24	; 0x16
 64a:	11 8e       	std	Z+25, r1	; 0x19
 64c:	12 8e       	std	Z+26, r1	; 0x1a
 64e:	13 8e       	std	Z+27, r1	; 0x1b
 650:	14 8e       	std	Z+28, r1	; 0x1c
 652:	08 95       	ret

00000654 <initVariant>:
 654:	08 95       	ret

00000656 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 656:	0e 94 a3 04 	call	0x946	; 0x946 <init>

	initVariant();
 65a:	0e 94 2a 03 	call	0x654	; 0x654 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 65e:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 662:	ce e9       	ldi	r28, 0x9E	; 158
 664:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 666:	0e 94 68 00 	call	0xd0	; 0xd0 <loop>
		if (serialEventRun) serialEventRun();
 66a:	20 97       	sbiw	r28, 0x00	; 0
 66c:	e1 f3       	breq	.-8      	; 0x666 <main+0x10>
 66e:	0e 94 9e 01 	call	0x33c	; 0x33c <_Z14serialEventRunv>
 672:	f9 cf       	rjmp	.-14     	; 0x666 <main+0x10>

00000674 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 674:	cf 92       	push	r12
 676:	df 92       	push	r13
 678:	ef 92       	push	r14
 67a:	ff 92       	push	r15
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	6c 01       	movw	r12, r24
 686:	7a 01       	movw	r14, r20
 688:	8b 01       	movw	r16, r22
 68a:	c0 e0       	ldi	r28, 0x00	; 0
 68c:	d0 e0       	ldi	r29, 0x00	; 0
 68e:	ce 15       	cp	r28, r14
 690:	df 05       	cpc	r29, r15
 692:	81 f0       	breq	.+32     	; 0x6b4 <_ZN5Print5writeEPKhj+0x40>
 694:	d8 01       	movw	r26, r16
 696:	6d 91       	ld	r22, X+
 698:	8d 01       	movw	r16, r26
 69a:	d6 01       	movw	r26, r12
 69c:	ed 91       	ld	r30, X+
 69e:	fc 91       	ld	r31, X
 6a0:	01 90       	ld	r0, Z+
 6a2:	f0 81       	ld	r31, Z
 6a4:	e0 2d       	mov	r30, r0
 6a6:	c6 01       	movw	r24, r12
 6a8:	09 95       	icall
 6aa:	89 2b       	or	r24, r25
 6ac:	11 f0       	breq	.+4      	; 0x6b2 <_ZN5Print5writeEPKhj+0x3e>
 6ae:	21 96       	adiw	r28, 0x01	; 1
 6b0:	ee cf       	rjmp	.-36     	; 0x68e <_ZN5Print5writeEPKhj+0x1a>
 6b2:	7e 01       	movw	r14, r28
 6b4:	c7 01       	movw	r24, r14
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	ff 90       	pop	r15
 6c0:	ef 90       	pop	r14
 6c2:	df 90       	pop	r13
 6c4:	cf 90       	pop	r12
 6c6:	08 95       	ret

000006c8 <_ZN5Print5writeEPKc>:
 6c8:	61 15       	cp	r22, r1
 6ca:	71 05       	cpc	r23, r1
 6cc:	79 f0       	breq	.+30     	; 0x6ec <_ZN5Print5writeEPKc+0x24>
 6ce:	fb 01       	movw	r30, r22
 6d0:	01 90       	ld	r0, Z+
 6d2:	00 20       	and	r0, r0
 6d4:	e9 f7       	brne	.-6      	; 0x6d0 <_ZN5Print5writeEPKc+0x8>
 6d6:	31 97       	sbiw	r30, 0x01	; 1
 6d8:	af 01       	movw	r20, r30
 6da:	46 1b       	sub	r20, r22
 6dc:	57 0b       	sbc	r21, r23
 6de:	dc 01       	movw	r26, r24
 6e0:	ed 91       	ld	r30, X+
 6e2:	fc 91       	ld	r31, X
 6e4:	02 80       	ldd	r0, Z+2	; 0x02
 6e6:	f3 81       	ldd	r31, Z+3	; 0x03
 6e8:	e0 2d       	mov	r30, r0
 6ea:	09 94       	ijmp
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	08 95       	ret

000006f2 <_ZN5Print5printEc>:
 6f2:	dc 01       	movw	r26, r24
 6f4:	ed 91       	ld	r30, X+
 6f6:	fc 91       	ld	r31, X
 6f8:	01 90       	ld	r0, Z+
 6fa:	f0 81       	ld	r31, Z
 6fc:	e0 2d       	mov	r30, r0
 6fe:	09 94       	ijmp

00000700 <_ZN5Print7printlnEv>:
 700:	67 e7       	ldi	r22, 0x77	; 119
 702:	72 e0       	ldi	r23, 0x02	; 2
 704:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <_ZN5Print5writeEPKc>

00000708 <_ZN5Print11printNumberEmh>:
 708:	8f 92       	push	r8
 70a:	9f 92       	push	r9
 70c:	af 92       	push	r10
 70e:	bf 92       	push	r11
 710:	ef 92       	push	r14
 712:	ff 92       	push	r15
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
 720:	a1 97       	sbiw	r28, 0x21	; 33
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	de bf       	out	0x3e, r29	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	cd bf       	out	0x3d, r28	; 61
 72c:	7c 01       	movw	r14, r24
 72e:	fa 01       	movw	r30, r20
 730:	cb 01       	movw	r24, r22
 732:	19 a2       	std	Y+33, r1	; 0x21
 734:	22 30       	cpi	r18, 0x02	; 2
 736:	08 f4       	brcc	.+2      	; 0x73a <_ZN5Print11printNumberEmh+0x32>
 738:	2a e0       	ldi	r18, 0x0A	; 10
 73a:	8e 01       	movw	r16, r28
 73c:	0f 5d       	subi	r16, 0xDF	; 223
 73e:	1f 4f       	sbci	r17, 0xFF	; 255
 740:	82 2e       	mov	r8, r18
 742:	91 2c       	mov	r9, r1
 744:	a1 2c       	mov	r10, r1
 746:	b1 2c       	mov	r11, r1
 748:	bf 01       	movw	r22, r30
 74a:	a5 01       	movw	r20, r10
 74c:	94 01       	movw	r18, r8
 74e:	0e 94 de 04 	call	0x9bc	; 0x9bc <__udivmodsi4>
 752:	f9 01       	movw	r30, r18
 754:	ca 01       	movw	r24, r20
 756:	01 50       	subi	r16, 0x01	; 1
 758:	11 09       	sbc	r17, r1
 75a:	6a 30       	cpi	r22, 0x0A	; 10
 75c:	10 f4       	brcc	.+4      	; 0x762 <_ZN5Print11printNumberEmh+0x5a>
 75e:	60 5d       	subi	r22, 0xD0	; 208
 760:	01 c0       	rjmp	.+2      	; 0x764 <_ZN5Print11printNumberEmh+0x5c>
 762:	69 5c       	subi	r22, 0xC9	; 201
 764:	d8 01       	movw	r26, r16
 766:	6c 93       	st	X, r22
 768:	23 2b       	or	r18, r19
 76a:	24 2b       	or	r18, r20
 76c:	25 2b       	or	r18, r21
 76e:	61 f7       	brne	.-40     	; 0x748 <_ZN5Print11printNumberEmh+0x40>
 770:	b8 01       	movw	r22, r16
 772:	c7 01       	movw	r24, r14
 774:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN5Print5writeEPKc>
 778:	a1 96       	adiw	r28, 0x21	; 33
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	f8 94       	cli
 77e:	de bf       	out	0x3e, r29	; 62
 780:	0f be       	out	0x3f, r0	; 63
 782:	cd bf       	out	0x3d, r28	; 61
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	1f 91       	pop	r17
 78a:	0f 91       	pop	r16
 78c:	ff 90       	pop	r15
 78e:	ef 90       	pop	r14
 790:	bf 90       	pop	r11
 792:	af 90       	pop	r10
 794:	9f 90       	pop	r9
 796:	8f 90       	pop	r8
 798:	08 95       	ret

0000079a <_ZN5Print5printEmi>:
 79a:	21 15       	cp	r18, r1
 79c:	31 05       	cpc	r19, r1
 79e:	41 f4       	brne	.+16     	; 0x7b0 <_ZN5Print5printEmi+0x16>
 7a0:	dc 01       	movw	r26, r24
 7a2:	ed 91       	ld	r30, X+
 7a4:	fc 91       	ld	r31, X
 7a6:	01 90       	ld	r0, Z+
 7a8:	f0 81       	ld	r31, Z
 7aa:	e0 2d       	mov	r30, r0
 7ac:	64 2f       	mov	r22, r20
 7ae:	09 94       	ijmp
 7b0:	0c 94 84 03 	jmp	0x708	; 0x708 <_ZN5Print11printNumberEmh>

000007b4 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 7be:	0e 94 cd 03 	call	0x79a	; 0x79a <_ZN5Print5printEmi>
 7c2:	8c 01       	movw	r16, r24
  n += println();
 7c4:	ce 01       	movw	r24, r28
 7c6:	0e 94 80 03 	call	0x700	; 0x700 <_ZN5Print7printlnEv>
  return n;
}
 7ca:	80 0f       	add	r24, r16
 7cc:	91 1f       	adc	r25, r17
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	08 95       	ret

000007d8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 7d8:	cf 92       	push	r12
 7da:	df 92       	push	r13
 7dc:	ef 92       	push	r14
 7de:	ff 92       	push	r15
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
  if (base == 0) {
 7e8:	21 15       	cp	r18, r1
 7ea:	31 05       	cpc	r19, r1
 7ec:	81 f4       	brne	.+32     	; 0x80e <_ZN5Print5printEli+0x36>
    return write(n);
 7ee:	dc 01       	movw	r26, r24
 7f0:	ed 91       	ld	r30, X+
 7f2:	fc 91       	ld	r31, X
 7f4:	01 90       	ld	r0, Z+
 7f6:	f0 81       	ld	r31, Z
 7f8:	e0 2d       	mov	r30, r0
 7fa:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	ff 90       	pop	r15
 806:	ef 90       	pop	r14
 808:	df 90       	pop	r13
 80a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80c:	09 94       	ijmp
  } else if (base == 10) {
 80e:	2a 30       	cpi	r18, 0x0A	; 10
 810:	31 05       	cpc	r19, r1
 812:	01 f5       	brne	.+64     	; 0x854 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 814:	77 ff       	sbrs	r23, 7
 816:	1d c0       	rjmp	.+58     	; 0x852 <_ZN5Print5printEli+0x7a>
 818:	6a 01       	movw	r12, r20
 81a:	7b 01       	movw	r14, r22
 81c:	ec 01       	movw	r28, r24
      int t = print('-');
 81e:	6d e2       	ldi	r22, 0x2D	; 45
 820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN5Print5printEc>
 824:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 826:	44 27       	eor	r20, r20
 828:	55 27       	eor	r21, r21
 82a:	ba 01       	movw	r22, r20
 82c:	4c 19       	sub	r20, r12
 82e:	5d 09       	sbc	r21, r13
 830:	6e 09       	sbc	r22, r14
 832:	7f 09       	sbc	r23, r15
 834:	2a e0       	ldi	r18, 0x0A	; 10
 836:	ce 01       	movw	r24, r28
 838:	0e 94 84 03 	call	0x708	; 0x708 <_ZN5Print11printNumberEmh>
 83c:	80 0f       	add	r24, r16
 83e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	ff 90       	pop	r15
 84a:	ef 90       	pop	r14
 84c:	df 90       	pop	r13
 84e:	cf 90       	pop	r12
 850:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 852:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	1f 91       	pop	r17
 85a:	0f 91       	pop	r16
 85c:	ff 90       	pop	r15
 85e:	ef 90       	pop	r14
 860:	df 90       	pop	r13
 862:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 864:	0c 94 84 03 	jmp	0x708	; 0x708 <_ZN5Print11printNumberEmh>

00000868 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	8f 93       	push	r24
 878:	9f 93       	push	r25
 87a:	af 93       	push	r26
 87c:	bf 93       	push	r27
 87e:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <timer0_millis>
 882:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <timer0_millis+0x1>
 886:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <timer0_millis+0x2>
 88a:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <timer0_millis+0x3>
 88e:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <timer0_fract>
 892:	23 e0       	ldi	r18, 0x03	; 3
 894:	23 0f       	add	r18, r19
 896:	2d 37       	cpi	r18, 0x7D	; 125
 898:	20 f4       	brcc	.+8      	; 0x8a2 <__vector_16+0x3a>
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	a1 1d       	adc	r26, r1
 89e:	b1 1d       	adc	r27, r1
 8a0:	05 c0       	rjmp	.+10     	; 0x8ac <__vector_16+0x44>
 8a2:	26 e8       	ldi	r18, 0x86	; 134
 8a4:	23 0f       	add	r18, r19
 8a6:	02 96       	adiw	r24, 0x02	; 2
 8a8:	a1 1d       	adc	r26, r1
 8aa:	b1 1d       	adc	r27, r1
 8ac:	20 93 23 03 	sts	0x0323, r18	; 0x800323 <timer0_fract>
 8b0:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <timer0_millis>
 8b4:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <timer0_millis+0x1>
 8b8:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <timer0_millis+0x2>
 8bc:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <timer0_millis+0x3>
 8c0:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 8c4:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 8c8:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 8cc:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 8d0:	01 96       	adiw	r24, 0x01	; 1
 8d2:	a1 1d       	adc	r26, r1
 8d4:	b1 1d       	adc	r27, r1
 8d6:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <timer0_overflow_count>
 8da:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <timer0_overflow_count+0x1>
 8de:	a0 93 2a 03 	sts	0x032A, r26	; 0x80032a <timer0_overflow_count+0x2>
 8e2:	b0 93 2b 03 	sts	0x032B, r27	; 0x80032b <timer0_overflow_count+0x3>
 8e6:	bf 91       	pop	r27
 8e8:	af 91       	pop	r26
 8ea:	9f 91       	pop	r25
 8ec:	8f 91       	pop	r24
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	0f 90       	pop	r0
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	0f 90       	pop	r0
 8f8:	1f 90       	pop	r1
 8fa:	18 95       	reti

000008fc <micros>:
 8fc:	3f b7       	in	r19, 0x3f	; 63
 8fe:	f8 94       	cli
 900:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 904:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 908:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 90c:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 910:	26 b5       	in	r18, 0x26	; 38
 912:	a8 9b       	sbis	0x15, 0	; 21
 914:	05 c0       	rjmp	.+10     	; 0x920 <__stack+0x21>
 916:	2f 3f       	cpi	r18, 0xFF	; 255
 918:	19 f0       	breq	.+6      	; 0x920 <__stack+0x21>
 91a:	01 96       	adiw	r24, 0x01	; 1
 91c:	a1 1d       	adc	r26, r1
 91e:	b1 1d       	adc	r27, r1
 920:	3f bf       	out	0x3f, r19	; 63
 922:	ba 2f       	mov	r27, r26
 924:	a9 2f       	mov	r26, r25
 926:	98 2f       	mov	r25, r24
 928:	88 27       	eor	r24, r24
 92a:	82 0f       	add	r24, r18
 92c:	91 1d       	adc	r25, r1
 92e:	a1 1d       	adc	r26, r1
 930:	b1 1d       	adc	r27, r1
 932:	bc 01       	movw	r22, r24
 934:	cd 01       	movw	r24, r26
 936:	42 e0       	ldi	r20, 0x02	; 2
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	4a 95       	dec	r20
 942:	d1 f7       	brne	.-12     	; 0x938 <__stack+0x39>
 944:	08 95       	ret

00000946 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 946:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 948:	84 b5       	in	r24, 0x24	; 36
 94a:	82 60       	ori	r24, 0x02	; 2
 94c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 94e:	84 b5       	in	r24, 0x24	; 36
 950:	81 60       	ori	r24, 0x01	; 1
 952:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 954:	85 b5       	in	r24, 0x25	; 37
 956:	82 60       	ori	r24, 0x02	; 2
 958:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 95a:	85 b5       	in	r24, 0x25	; 37
 95c:	81 60       	ori	r24, 0x01	; 1
 95e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 960:	ee e6       	ldi	r30, 0x6E	; 110
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	81 60       	ori	r24, 0x01	; 1
 968:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 96a:	e1 e8       	ldi	r30, 0x81	; 129
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 970:	80 81       	ld	r24, Z
 972:	82 60       	ori	r24, 0x02	; 2
 974:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 976:	80 81       	ld	r24, Z
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 97c:	e0 e8       	ldi	r30, 0x80	; 128
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	80 81       	ld	r24, Z
 982:	81 60       	ori	r24, 0x01	; 1
 984:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 986:	e1 eb       	ldi	r30, 0xB1	; 177
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	84 60       	ori	r24, 0x04	; 4
 98e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 990:	e0 eb       	ldi	r30, 0xB0	; 176
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	81 60       	ori	r24, 0x01	; 1
 998:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 99a:	ea e7       	ldi	r30, 0x7A	; 122
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	80 81       	ld	r24, Z
 9a0:	84 60       	ori	r24, 0x04	; 4
 9a2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 9a4:	80 81       	ld	r24, Z
 9a6:	82 60       	ori	r24, 0x02	; 2
 9a8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 9aa:	80 81       	ld	r24, Z
 9ac:	81 60       	ori	r24, 0x01	; 1
 9ae:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9b0:	80 81       	ld	r24, Z
 9b2:	80 68       	ori	r24, 0x80	; 128
 9b4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 9ba:	08 95       	ret

000009bc <__udivmodsi4>:
 9bc:	a1 e2       	ldi	r26, 0x21	; 33
 9be:	1a 2e       	mov	r1, r26
 9c0:	aa 1b       	sub	r26, r26
 9c2:	bb 1b       	sub	r27, r27
 9c4:	fd 01       	movw	r30, r26
 9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__udivmodsi4_ep>

000009c8 <__udivmodsi4_loop>:
 9c8:	aa 1f       	adc	r26, r26
 9ca:	bb 1f       	adc	r27, r27
 9cc:	ee 1f       	adc	r30, r30
 9ce:	ff 1f       	adc	r31, r31
 9d0:	a2 17       	cp	r26, r18
 9d2:	b3 07       	cpc	r27, r19
 9d4:	e4 07       	cpc	r30, r20
 9d6:	f5 07       	cpc	r31, r21
 9d8:	20 f0       	brcs	.+8      	; 0x9e2 <__udivmodsi4_ep>
 9da:	a2 1b       	sub	r26, r18
 9dc:	b3 0b       	sbc	r27, r19
 9de:	e4 0b       	sbc	r30, r20
 9e0:	f5 0b       	sbc	r31, r21

000009e2 <__udivmodsi4_ep>:
 9e2:	66 1f       	adc	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	1a 94       	dec	r1
 9ec:	69 f7       	brne	.-38     	; 0x9c8 <__udivmodsi4_loop>
 9ee:	60 95       	com	r22
 9f0:	70 95       	com	r23
 9f2:	80 95       	com	r24
 9f4:	90 95       	com	r25
 9f6:	9b 01       	movw	r18, r22
 9f8:	ac 01       	movw	r20, r24
 9fa:	bd 01       	movw	r22, r26
 9fc:	cf 01       	movw	r24, r30
 9fe:	08 95       	ret

00000a00 <__tablejump2__>:
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31
 a04:	05 90       	lpm	r0, Z+
 a06:	f4 91       	lpm	r31, Z
 a08:	e0 2d       	mov	r30, r0
 a0a:	09 94       	ijmp

00000a0c <_exit>:
 a0c:	f8 94       	cli

00000a0e <__stop_program>:
 a0e:	ff cf       	rjmp	.-2      	; 0xa0e <__stop_program>
