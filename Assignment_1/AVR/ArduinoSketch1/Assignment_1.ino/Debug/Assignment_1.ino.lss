
Assignment_1.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  00000c14  00000ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800286  00800286  00000e2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000072fb  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016a2  00000000  00000000  000083e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001584  00000000  00000000  00009a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000074c  00000000  00000000  0000b00c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f5c  00000000  00000000  0000b758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c90  00000000  00000000  0000d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00010344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_18>
  4c:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	4e 04       	cpc	r4, r14

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e4 e1       	ldi	r30, 0x14	; 20
  7e:	fc e0       	ldi	r31, 0x0C	; 12
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 38       	cpi	r26, 0x86	; 134
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	23 e0       	ldi	r18, 0x03	; 3
  8e:	a6 e8       	ldi	r26, 0x86	; 134
  90:	b2 e0       	ldi	r27, 0x02	; 2
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ac 32       	cpi	r26, 0x2C	; 44
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 02 06 	call	0xc04	; 0xc04 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <main>
  b6:	0c 94 08 06 	jmp	0xc10	; 0xc10 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	55 e2       	ldi	r21, 0x25	; 37
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	0c 94 87 03 	jmp	0x70e	; 0x70e <_ZN14HardwareSerial5beginEmh>

000000d0 <loop>:
  // put your setup code here, to run once:
  // initialize serial:
  Serial.begin(9600);
}

void loop() {
  d0:	2f 92       	push	r2
  d2:	3f 92       	push	r3
  d4:	4f 92       	push	r4
  d6:	5f 92       	push	r5
  d8:	6f 92       	push	r6
  da:	7f 92       	push	r7
  dc:	8f 92       	push	r8
  de:	9f 92       	push	r9
  e0:	af 92       	push	r10
  e2:	bf 92       	push	r11
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	c5 5b       	subi	r28, 0xB5	; 181
  fa:	d2 40       	sbci	r29, 0x02	; 2
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	de bf       	out	0x3e, r29	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	cd bf       	out	0x3d, r28	; 61
  // put your main code here, to run repeatedly:
   
    int32_t matrixR[NR_MATRIX_ELEMENTS] = {0};
 106:	fe 01       	movw	r30, r28
 108:	31 96       	adiw	r30, 0x01	; 1
 10a:	84 ea       	ldi	r24, 0xA4	; 164
 10c:	92 e0       	ldi	r25, 0x02	; 2
 10e:	df 01       	movw	r26, r30
 110:	9c 01       	movw	r18, r24
 112:	1d 92       	st	X+, r1
 114:	21 50       	subi	r18, 0x01	; 1
 116:	30 40       	sbci	r19, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <loop+0x42>
	register int8_t reg10 = 0;
	register int8_t reg11 = 0;
	register int8_t reg12 = 0;
  
    /*Start timer*/
	unsigned long startTime = micros();	
 11a:	0e 94 80 05 	call	0xb00	; 0xb00 <micros>
 11e:	ce 54       	subi	r28, 0x4E	; 78
 120:	dd 4f       	sbci	r29, 0xFD	; 253
 122:	68 83       	st	Y, r22
 124:	79 83       	std	Y+1, r23	; 0x01
 126:	8a 83       	std	Y+2, r24	; 0x02
 128:	9b 83       	std	Y+3, r25	; 0x03
 12a:	c2 5b       	subi	r28, 0xB2	; 178
 12c:	d2 40       	sbci	r29, 0x02	; 2
 12e:	38 ee       	ldi	r19, 0xE8	; 232
 130:	cf 54       	subi	r28, 0x4F	; 79
 132:	dd 4f       	sbci	r29, 0xFD	; 253
 134:	38 83       	st	Y, r19
 136:	c1 5b       	subi	r28, 0xB1	; 177
 138:	d2 40       	sbci	r29, 0x02	; 2
	register int8_t reg7 = 0;
	register int8_t reg8 = 0;
	register int8_t reg9 = 0;
	register int8_t reg10 = 0;
	register int8_t reg11 = 0;
	register int8_t reg12 = 0;
 13a:	71 2c       	mov	r7, r1
	register int8_t reg6 = 0;
	register int8_t reg7 = 0;
	register int8_t reg8 = 0;
	register int8_t reg9 = 0;
	register int8_t reg10 = 0;
	register int8_t reg11 = 0;
 13c:	c2 55       	subi	r28, 0x52	; 82
 13e:	dd 4f       	sbci	r29, 0xFD	; 253
 140:	18 82       	st	Y, r1
 142:	ce 5a       	subi	r28, 0xAE	; 174
 144:	d2 40       	sbci	r29, 0x02	; 2
	register int8_t reg5 = 0;
	register int8_t reg6 = 0;
	register int8_t reg7 = 0;
	register int8_t reg8 = 0;
	register int8_t reg9 = 0;
	register int8_t reg10 = 0;
 146:	21 2c       	mov	r2, r1
	register int8_t reg4 = 0;
	register int8_t reg5 = 0;
	register int8_t reg6 = 0;
	register int8_t reg7 = 0;
	register int8_t reg8 = 0;
	register int8_t reg9 = 0;
 148:	31 2c       	mov	r3, r1
	register int8_t reg3 = 0;
	register int8_t reg4 = 0;
	register int8_t reg5 = 0;
	register int8_t reg6 = 0;
	register int8_t reg7 = 0;
	register int8_t reg8 = 0;
 14a:	c3 55       	subi	r28, 0x53	; 83
 14c:	dd 4f       	sbci	r29, 0xFD	; 253
 14e:	18 82       	st	Y, r1
 150:	cd 5a       	subi	r28, 0xAD	; 173
 152:	d2 40       	sbci	r29, 0x02	; 2
	register int8_t reg2 = 0;
	register int8_t reg3 = 0;
	register int8_t reg4 = 0;
	register int8_t reg5 = 0;
	register int8_t reg6 = 0;
	register int8_t reg7 = 0;
 154:	c4 55       	subi	r28, 0x54	; 84
 156:	dd 4f       	sbci	r29, 0xFD	; 253
 158:	18 82       	st	Y, r1
 15a:	cc 5a       	subi	r28, 0xAC	; 172
 15c:	d2 40       	sbci	r29, 0x02	; 2
	register int8_t reg1 = 0;
	register int8_t reg2 = 0;
	register int8_t reg3 = 0;
	register int8_t reg4 = 0;
	register int8_t reg5 = 0;
	register int8_t reg6 = 0;
 15e:	c5 55       	subi	r28, 0x55	; 85
 160:	dd 4f       	sbci	r29, 0xFD	; 253
 162:	18 82       	st	Y, r1
 164:	cb 5a       	subi	r28, 0xAB	; 171
 166:	d2 40       	sbci	r29, 0x02	; 2
	register int8_t reg0 = 0;
	register int8_t reg1 = 0;
	register int8_t reg2 = 0;
	register int8_t reg3 = 0;
	register int8_t reg4 = 0;
	register int8_t reg5 = 0;
 168:	c6 55       	subi	r28, 0x56	; 86
 16a:	dd 4f       	sbci	r29, 0xFD	; 253
 16c:	18 82       	st	Y, r1
 16e:	ca 5a       	subi	r28, 0xAA	; 170
 170:	d2 40       	sbci	r29, 0x02	; 2
	
	register int8_t reg0 = 0;
	register int8_t reg1 = 0;
	register int8_t reg2 = 0;
	register int8_t reg3 = 0;
	register int8_t reg4 = 0;
 172:	c7 55       	subi	r28, 0x57	; 87
 174:	dd 4f       	sbci	r29, 0xFD	; 253
 176:	18 82       	st	Y, r1
 178:	c9 5a       	subi	r28, 0xA9	; 169
 17a:	d2 40       	sbci	r29, 0x02	; 2
    register int32_t mBuffer = 0;
	
	register int8_t reg0 = 0;
	register int8_t reg1 = 0;
	register int8_t reg2 = 0;
	register int8_t reg3 = 0;
 17c:	c8 55       	subi	r28, 0x58	; 88
 17e:	dd 4f       	sbci	r29, 0xFD	; 253
 180:	18 82       	st	Y, r1
 182:	c8 5a       	subi	r28, 0xA8	; 168
 184:	d2 40       	sbci	r29, 0x02	; 2
	register uint8_t n = 1000;
    register int32_t mBuffer = 0;
	
	register int8_t reg0 = 0;
	register int8_t reg1 = 0;
	register int8_t reg2 = 0;
 186:	c9 55       	subi	r28, 0x59	; 89
 188:	dd 4f       	sbci	r29, 0xFD	; 253
 18a:	18 82       	st	Y, r1
 18c:	c7 5a       	subi	r28, 0xA7	; 167
 18e:	d2 40       	sbci	r29, 0x02	; 2
    register uint8_t k = 0;
	register uint8_t n = 1000;
    register int32_t mBuffer = 0;
	
	register int8_t reg0 = 0;
	register int8_t reg1 = 0;
 190:	ca 55       	subi	r28, 0x5A	; 90
 192:	dd 4f       	sbci	r29, 0xFD	; 253
 194:	18 82       	st	Y, r1
 196:	c6 5a       	subi	r28, 0xA6	; 166
 198:	d2 40       	sbci	r29, 0x02	; 2
    register uint8_t e = NR_MATRIX_ELEMENTS;
    register uint8_t k = 0;
	register uint8_t n = 1000;
    register int32_t mBuffer = 0;
	
	register int8_t reg0 = 0;
 19a:	cb 55       	subi	r28, 0x5B	; 91
 19c:	dd 4f       	sbci	r29, 0xFD	; 253
 19e:	18 82       	st	Y, r1
 1a0:	c5 5a       	subi	r28, 0xA5	; 165
 1a2:	d2 40       	sbci	r29, 0x02	; 2
    70,  108,  69,   12,   0,    80,   115,  107,  71,   54,   5,    57,   3,
    123, 72,   56,   5,    30,   45,   2,    11,   124,  84,   63,   47,   104};

    register int8_t *xM = matrixX + NR_MATRIX_ELEMENTS_MINUS_ONE;
    int8_t *xA = xM;
    register int8_t *yM = matrixY+ NR_MATRIX_ELEMENTS_MINUS_ONE;
 1a4:	a8 ea       	ldi	r26, 0xA8	; 168
 1a6:	b1 e0       	ldi	r27, 0x01	; 1
    121, 42,   78,   45,   8,    17,   52,   38,   44,   13,   104,  57,   62,
    29,  96,   0,    64,   47,   50,   22,   17,   88,   63,   108,  78,   101,
    70,  108,  69,   12,   0,    80,   115,  107,  71,   54,   5,    57,   3,
    123, 72,   56,   5,    30,   45,   2,    11,   124,  84,   63,   47,   104};

    register int8_t *xM = matrixX + NR_MATRIX_ELEMENTS_MINUS_ONE;
 1a8:	01 e5       	ldi	r16, 0x51	; 81
 1aa:	12 e0       	ldi	r17, 0x02	; 2
	{
		n--;
		//Serial.println(n);
		while(e>0){

			if(e%13 == 0){
 1ac:	8f e4       	ldi	r24, 0x4F	; 79
 1ae:	e8 2e       	mov	r14, r24
 1b0:	9d e0       	ldi	r25, 0x0D	; 13
 1b2:	69 2e       	mov	r6, r25
 1b4:	4e 01       	movw	r8, r28
 1b6:	4b e5       	ldi	r20, 0x5B	; 91
 1b8:	84 1a       	sub	r8, r20
 1ba:	4d ef       	ldi	r20, 0xFD	; 253
 1bc:	94 0a       	sbc	r9, r20
 1be:	22 e5       	ldi	r18, 0x52	; 82
 1c0:	a2 2e       	mov	r10, r18
 1c2:	22 e0       	ldi	r18, 0x02	; 2
 1c4:	b2 2e       	mov	r11, r18
 1c6:	39 ea       	ldi	r19, 0xA9	; 169
 1c8:	c3 2e       	mov	r12, r19
 1ca:	31 e0       	ldi	r19, 0x01	; 1
 1cc:	d3 2e       	mov	r13, r19

	while (n>0)
	{
		n--;
		//Serial.println(n);
		while(e>0){
 1ce:	49 ea       	ldi	r20, 0xA9	; 169
 1d0:	f4 2e       	mov	r15, r20
 1d2:	c1 55       	subi	r28, 0x51	; 81
 1d4:	dd 4f       	sbci	r29, 0xFD	; 253
 1d6:	78 82       	st	Y, r7
 1d8:	cf 5a       	subi	r28, 0xAF	; 175
 1da:	d2 40       	sbci	r29, 0x02	; 2
 1dc:	c0 55       	subi	r28, 0x50	; 80
 1de:	dd 4f       	sbci	r29, 0xFD	; 253
 1e0:	68 82       	st	Y, r6
 1e2:	c0 5b       	subi	r28, 0xB0	; 176
 1e4:	d2 40       	sbci	r29, 0x02	; 2

			if(e%13 == 0){
 1e6:	fe 9c       	mul	r15, r14
 1e8:	81 2d       	mov	r24, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	86 95       	lsr	r24
 1ee:	86 95       	lsr	r24
 1f0:	5f 2d       	mov	r21, r15
 1f2:	c0 55       	subi	r28, 0x50	; 80
 1f4:	dd 4f       	sbci	r29, 0xFD	; 253
 1f6:	98 81       	ld	r25, Y
 1f8:	c0 5b       	subi	r28, 0xB0	; 176
 1fa:	d2 40       	sbci	r29, 0x02	; 2
 1fc:	89 9f       	mul	r24, r25
 1fe:	50 19       	sub	r21, r0
 200:	11 24       	eor	r1, r1
 202:	51 11       	cpse	r21, r1
 204:	56 c0       	rjmp	.+172    	; 0x2b2 <loop+0x1e2>
				//unsigned long updateTime = micros();
				yM = matrixY+ NR_MATRIX_ELEMENTS_MINUS_ONE;

				reg0 = *xM--;
 206:	d8 01       	movw	r26, r16
 208:	bc 91       	ld	r27, X
 20a:	cb 55       	subi	r28, 0x5B	; 91
 20c:	dd 4f       	sbci	r29, 0xFD	; 253
 20e:	b8 83       	st	Y, r27
 210:	c5 5a       	subi	r28, 0xA5	; 165
 212:	d2 40       	sbci	r29, 0x02	; 2
				reg1 = *xM--;
 214:	f8 01       	movw	r30, r16
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	40 80       	ld	r4, Z
 21a:	ca 55       	subi	r28, 0x5A	; 90
 21c:	dd 4f       	sbci	r29, 0xFD	; 253
 21e:	48 82       	st	Y, r4
 220:	c6 5a       	subi	r28, 0xA6	; 166
 222:	d2 40       	sbci	r29, 0x02	; 2
				reg2 = *xM--;
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	50 80       	ld	r5, Z
 228:	c9 55       	subi	r28, 0x59	; 89
 22a:	dd 4f       	sbci	r29, 0xFD	; 253
 22c:	58 82       	st	Y, r5
 22e:	c7 5a       	subi	r28, 0xA7	; 167
 230:	d2 40       	sbci	r29, 0x02	; 2
				reg3 = *xM--;
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	60 80       	ld	r6, Z
 236:	c8 55       	subi	r28, 0x58	; 88
 238:	dd 4f       	sbci	r29, 0xFD	; 253
 23a:	68 82       	st	Y, r6
 23c:	c8 5a       	subi	r28, 0xA8	; 168
 23e:	d2 40       	sbci	r29, 0x02	; 2
				reg4 = *xM--;
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	70 80       	ld	r7, Z
 244:	c7 55       	subi	r28, 0x57	; 87
 246:	dd 4f       	sbci	r29, 0xFD	; 253
 248:	78 82       	st	Y, r7
 24a:	c9 5a       	subi	r28, 0xA9	; 169
 24c:	d2 40       	sbci	r29, 0x02	; 2
				reg5 = *xM--;
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	20 81       	ld	r18, Z
 252:	c6 55       	subi	r28, 0x56	; 86
 254:	dd 4f       	sbci	r29, 0xFD	; 253
 256:	28 83       	st	Y, r18
 258:	ca 5a       	subi	r28, 0xAA	; 170
 25a:	d2 40       	sbci	r29, 0x02	; 2
				reg6 = *xM--;
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	30 81       	ld	r19, Z
 260:	c5 55       	subi	r28, 0x55	; 85
 262:	dd 4f       	sbci	r29, 0xFD	; 253
 264:	38 83       	st	Y, r19
 266:	cb 5a       	subi	r28, 0xAB	; 171
 268:	d2 40       	sbci	r29, 0x02	; 2
				reg7 = *xM--;
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	40 81       	ld	r20, Z
 26e:	c4 55       	subi	r28, 0x54	; 84
 270:	dd 4f       	sbci	r29, 0xFD	; 253
 272:	48 83       	st	Y, r20
 274:	cc 5a       	subi	r28, 0xAC	; 172
 276:	d2 40       	sbci	r29, 0x02	; 2
				reg8 = *xM--;
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	50 81       	ld	r21, Z
 27c:	c3 55       	subi	r28, 0x53	; 83
 27e:	dd 4f       	sbci	r29, 0xFD	; 253
 280:	58 83       	st	Y, r21
 282:	cd 5a       	subi	r28, 0xAD	; 173
 284:	d2 40       	sbci	r29, 0x02	; 2
				reg9 = *xM--;
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	30 80       	ld	r3, Z
				reg10 = *xM--;
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	20 80       	ld	r2, Z
				reg11 = *xM--;
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	80 81       	ld	r24, Z
 292:	c2 55       	subi	r28, 0x52	; 82
 294:	dd 4f       	sbci	r29, 0xFD	; 253
 296:	88 83       	st	Y, r24
 298:	ce 5a       	subi	r28, 0xAE	; 174
 29a:	d2 40       	sbci	r29, 0x02	; 2
				reg12 = *xM--;
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	90 81       	ld	r25, Z
 2a0:	c1 55       	subi	r28, 0x51	; 81
 2a2:	dd 4f       	sbci	r29, 0xFD	; 253
 2a4:	98 83       	st	Y, r25
 2a6:	cf 5a       	subi	r28, 0xAF	; 175
 2a8:	d2 40       	sbci	r29, 0x02	; 2
 2aa:	0d 50       	subi	r16, 0x0D	; 13
 2ac:	11 09       	sbc	r17, r1
		//Serial.println(n);
		while(e>0){

			if(e%13 == 0){
				//unsigned long updateTime = micros();
				yM = matrixY+ NR_MATRIX_ELEMENTS_MINUS_ONE;
 2ae:	a8 ea       	ldi	r26, 0xA8	; 168
 2b0:	b1 e0       	ldi	r27, 0x01	; 1
			}

			mBuffer = 0;

			//unsigned long mathTime = micros();
			mBuffer += reg0 * *yM;
 2b2:	9c 91       	ld	r25, X
			yM -= NR_MATRIX_COLS;
			mBuffer += reg1 * *yM;
 2b4:	fd 01       	movw	r30, r26
 2b6:	3d 97       	sbiw	r30, 0x0d	; 13
 2b8:	80 81       	ld	r24, Z
 2ba:	cb 55       	subi	r28, 0x5B	; 91
 2bc:	dd 4f       	sbci	r29, 0xFD	; 253
 2be:	28 81       	ld	r18, Y
 2c0:	c5 5a       	subi	r28, 0xA5	; 165
 2c2:	d2 40       	sbci	r29, 0x02	; 2
 2c4:	29 02       	muls	r18, r25
 2c6:	f0 01       	movw	r30, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	af 01       	movw	r20, r30
 2cc:	ff 0f       	add	r31, r31
 2ce:	66 0b       	sbc	r22, r22
 2d0:	77 0b       	sbc	r23, r23
 2d2:	ca 55       	subi	r28, 0x5A	; 90
 2d4:	dd 4f       	sbci	r29, 0xFD	; 253
 2d6:	38 81       	ld	r19, Y
 2d8:	c6 5a       	subi	r28, 0xA6	; 166
 2da:	d2 40       	sbci	r29, 0x02	; 2
 2dc:	38 02       	muls	r19, r24
 2de:	c0 01       	movw	r24, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	2c 01       	movw	r4, r24
 2e4:	99 0f       	add	r25, r25
 2e6:	66 08       	sbc	r6, r6
 2e8:	77 08       	sbc	r7, r7
 2ea:	44 0d       	add	r20, r4
 2ec:	55 1d       	adc	r21, r5
 2ee:	66 1d       	adc	r22, r6
 2f0:	77 1d       	adc	r23, r7
			yM -= NR_MATRIX_COLS;
			mBuffer += reg2 * *yM;
 2f2:	fd 01       	movw	r30, r26
 2f4:	7a 97       	sbiw	r30, 0x1a	; 26
 2f6:	e0 81       	ld	r30, Z
 2f8:	c9 55       	subi	r28, 0x59	; 89
 2fa:	dd 4f       	sbci	r29, 0xFD	; 253
 2fc:	88 81       	ld	r24, Y
 2fe:	c7 5a       	subi	r28, 0xA7	; 167
 300:	d2 40       	sbci	r29, 0x02	; 2
 302:	8e 02       	muls	r24, r30
 304:	f0 01       	movw	r30, r0
 306:	11 24       	eor	r1, r1
 308:	2f 01       	movw	r4, r30
 30a:	ff 0f       	add	r31, r31
 30c:	66 08       	sbc	r6, r6
 30e:	77 08       	sbc	r7, r7
 310:	44 0d       	add	r20, r4
 312:	55 1d       	adc	r21, r5
 314:	66 1d       	adc	r22, r6
 316:	77 1d       	adc	r23, r7
			yM -= NR_MATRIX_COLS;
			mBuffer += reg3 * *yM;
 318:	fd 01       	movw	r30, r26
 31a:	b7 97       	sbiw	r30, 0x27	; 39
 31c:	e0 81       	ld	r30, Z
 31e:	c8 55       	subi	r28, 0x58	; 88
 320:	dd 4f       	sbci	r29, 0xFD	; 253
 322:	98 81       	ld	r25, Y
 324:	c8 5a       	subi	r28, 0xA8	; 168
 326:	d2 40       	sbci	r29, 0x02	; 2
 328:	9e 02       	muls	r25, r30
 32a:	f0 01       	movw	r30, r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 01       	movw	r4, r30
 330:	ff 0f       	add	r31, r31
 332:	66 08       	sbc	r6, r6
 334:	77 08       	sbc	r7, r7
 336:	44 0d       	add	r20, r4
 338:	55 1d       	adc	r21, r5
 33a:	66 1d       	adc	r22, r6
 33c:	77 1d       	adc	r23, r7
			yM -= NR_MATRIX_COLS;
			mBuffer += reg4 * *yM;
 33e:	fd 01       	movw	r30, r26
 340:	f4 97       	sbiw	r30, 0x34	; 52
 342:	e0 81       	ld	r30, Z
 344:	c7 55       	subi	r28, 0x57	; 87
 346:	dd 4f       	sbci	r29, 0xFD	; 253
 348:	28 81       	ld	r18, Y
 34a:	c9 5a       	subi	r28, 0xA9	; 169
 34c:	d2 40       	sbci	r29, 0x02	; 2
 34e:	2e 02       	muls	r18, r30
 350:	f0 01       	movw	r30, r0
 352:	11 24       	eor	r1, r1
 354:	2f 01       	movw	r4, r30
 356:	ff 0f       	add	r31, r31
 358:	66 08       	sbc	r6, r6
 35a:	77 08       	sbc	r7, r7
 35c:	44 0d       	add	r20, r4
 35e:	55 1d       	adc	r21, r5
 360:	66 1d       	adc	r22, r6
 362:	77 1d       	adc	r23, r7
			yM -= NR_MATRIX_COLS;
			mBuffer += reg5 * *yM;
 364:	fd 01       	movw	r30, r26
 366:	e1 54       	subi	r30, 0x41	; 65
 368:	f1 09       	sbc	r31, r1
 36a:	e0 81       	ld	r30, Z
 36c:	c6 55       	subi	r28, 0x56	; 86
 36e:	dd 4f       	sbci	r29, 0xFD	; 253
 370:	38 81       	ld	r19, Y
 372:	ca 5a       	subi	r28, 0xAA	; 170
 374:	d2 40       	sbci	r29, 0x02	; 2
 376:	3e 02       	muls	r19, r30
 378:	f0 01       	movw	r30, r0
 37a:	11 24       	eor	r1, r1
 37c:	2f 01       	movw	r4, r30
 37e:	ff 0f       	add	r31, r31
 380:	66 08       	sbc	r6, r6
 382:	77 08       	sbc	r7, r7
 384:	44 0d       	add	r20, r4
 386:	55 1d       	adc	r21, r5
 388:	66 1d       	adc	r22, r6
 38a:	77 1d       	adc	r23, r7
			yM -= NR_MATRIX_COLS;
			mBuffer += reg6 * *yM;
 38c:	fd 01       	movw	r30, r26
 38e:	ee 54       	subi	r30, 0x4E	; 78
 390:	f1 09       	sbc	r31, r1
 392:	e0 81       	ld	r30, Z
 394:	c5 55       	subi	r28, 0x55	; 85
 396:	dd 4f       	sbci	r29, 0xFD	; 253
 398:	88 81       	ld	r24, Y
 39a:	cb 5a       	subi	r28, 0xAB	; 171
 39c:	d2 40       	sbci	r29, 0x02	; 2
 39e:	8e 02       	muls	r24, r30
 3a0:	f0 01       	movw	r30, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 01       	movw	r4, r30
 3a6:	ff 0f       	add	r31, r31
 3a8:	66 08       	sbc	r6, r6
 3aa:	77 08       	sbc	r7, r7
 3ac:	44 0d       	add	r20, r4
 3ae:	55 1d       	adc	r21, r5
 3b0:	66 1d       	adc	r22, r6
 3b2:	77 1d       	adc	r23, r7
			yM -= NR_MATRIX_COLS;
			mBuffer += reg7 * *yM;
 3b4:	fd 01       	movw	r30, r26
 3b6:	eb 55       	subi	r30, 0x5B	; 91
 3b8:	f1 09       	sbc	r31, r1
 3ba:	e0 81       	ld	r30, Z
 3bc:	c4 55       	subi	r28, 0x54	; 84
 3be:	dd 4f       	sbci	r29, 0xFD	; 253
 3c0:	98 81       	ld	r25, Y
 3c2:	cc 5a       	subi	r28, 0xAC	; 172
 3c4:	d2 40       	sbci	r29, 0x02	; 2
 3c6:	9e 02       	muls	r25, r30
 3c8:	f0 01       	movw	r30, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	2f 01       	movw	r4, r30
 3ce:	ff 0f       	add	r31, r31
 3d0:	66 08       	sbc	r6, r6
 3d2:	77 08       	sbc	r7, r7
 3d4:	44 0d       	add	r20, r4
 3d6:	55 1d       	adc	r21, r5
 3d8:	66 1d       	adc	r22, r6
 3da:	77 1d       	adc	r23, r7
			yM -= NR_MATRIX_COLS;
			mBuffer += reg8 * *yM;
 3dc:	fd 01       	movw	r30, r26
 3de:	e8 56       	subi	r30, 0x68	; 104
 3e0:	f1 09       	sbc	r31, r1
 3e2:	e0 81       	ld	r30, Z
 3e4:	c3 55       	subi	r28, 0x53	; 83
 3e6:	dd 4f       	sbci	r29, 0xFD	; 253
 3e8:	28 81       	ld	r18, Y
 3ea:	cd 5a       	subi	r28, 0xAD	; 173
 3ec:	d2 40       	sbci	r29, 0x02	; 2
 3ee:	2e 02       	muls	r18, r30
 3f0:	f0 01       	movw	r30, r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 01       	movw	r4, r30
 3f6:	ff 0f       	add	r31, r31
 3f8:	66 08       	sbc	r6, r6
 3fa:	77 08       	sbc	r7, r7
 3fc:	44 0e       	add	r4, r20
 3fe:	55 1e       	adc	r5, r21
 400:	66 1e       	adc	r6, r22
 402:	77 1e       	adc	r7, r23
			yM -= NR_MATRIX_COLS;
			mBuffer += reg9 * *yM;
 404:	fd 01       	movw	r30, r26
 406:	e5 57       	subi	r30, 0x75	; 117
 408:	f1 09       	sbc	r31, r1
 40a:	60 81       	ld	r22, Z
 40c:	33 2d       	mov	r19, r3
 40e:	36 02       	muls	r19, r22
 410:	b0 01       	movw	r22, r0
 412:	11 24       	eor	r1, r1
 414:	ab 01       	movw	r20, r22
 416:	77 0f       	add	r23, r23
 418:	66 0b       	sbc	r22, r22
 41a:	77 0b       	sbc	r23, r23
 41c:	44 0e       	add	r4, r20
 41e:	55 1e       	adc	r5, r21
 420:	66 1e       	adc	r6, r22
 422:	77 1e       	adc	r7, r23
			yM -= NR_MATRIX_COLS;
			mBuffer += reg10 * *yM;
 424:	3d 97       	sbiw	r30, 0x0d	; 13
 426:	40 81       	ld	r20, Z
 428:	82 2d       	mov	r24, r2
 42a:	84 02       	muls	r24, r20
 42c:	a0 01       	movw	r20, r0
 42e:	11 24       	eor	r1, r1
 430:	05 2e       	mov	r0, r21
 432:	00 0c       	add	r0, r0
 434:	66 0b       	sbc	r22, r22
 436:	77 0b       	sbc	r23, r23
 438:	44 0d       	add	r20, r4
 43a:	55 1d       	adc	r21, r5
 43c:	66 1d       	adc	r22, r6
 43e:	77 1d       	adc	r23, r7
			yM -= NR_MATRIX_COLS;
			mBuffer += reg11 * *yM;
 440:	3d 97       	sbiw	r30, 0x0d	; 13
 442:	20 81       	ld	r18, Z
 444:	c2 55       	subi	r28, 0x52	; 82
 446:	dd 4f       	sbci	r29, 0xFD	; 253
 448:	98 81       	ld	r25, Y
 44a:	ce 5a       	subi	r28, 0xAE	; 174
 44c:	d2 40       	sbci	r29, 0x02	; 2
 44e:	92 02       	muls	r25, r18
 450:	90 01       	movw	r18, r0
 452:	11 24       	eor	r1, r1
 454:	29 01       	movw	r4, r18
 456:	33 0f       	add	r19, r19
 458:	66 08       	sbc	r6, r6
 45a:	77 08       	sbc	r7, r7
 45c:	44 0e       	add	r4, r20
 45e:	55 1e       	adc	r5, r21
 460:	66 1e       	adc	r6, r22
 462:	77 1e       	adc	r7, r23
			yM -= NR_MATRIX_COLS;
			mBuffer += reg12 * *yM;
 464:	3d 97       	sbiw	r30, 0x0d	; 13
 466:	80 81       	ld	r24, Z

			*r += mBuffer + *xA + *yA;
 468:	c1 55       	subi	r28, 0x51	; 81
 46a:	dd 4f       	sbci	r29, 0xFD	; 253
 46c:	e8 81       	ld	r30, Y
 46e:	cf 5a       	subi	r28, 0xAF	; 175
 470:	d2 40       	sbci	r29, 0x02	; 2
 472:	e8 02       	muls	r30, r24
 474:	c0 01       	movw	r24, r0
 476:	11 24       	eor	r1, r1
 478:	ac 01       	movw	r20, r24
 47a:	99 0f       	add	r25, r25
 47c:	66 0b       	sbc	r22, r22
 47e:	77 0b       	sbc	r23, r23
 480:	44 0e       	add	r4, r20
 482:	55 1e       	adc	r5, r21
 484:	66 1e       	adc	r6, r22
 486:	77 1e       	adc	r7, r23
 488:	f5 01       	movw	r30, r10
 48a:	42 91       	ld	r20, -Z
 48c:	5f 01       	movw	r10, r30
 48e:	04 2e       	mov	r0, r20
 490:	00 0c       	add	r0, r0
 492:	55 0b       	sbc	r21, r21
 494:	66 0b       	sbc	r22, r22
 496:	77 0b       	sbc	r23, r23
 498:	44 0e       	add	r4, r20
 49a:	55 1e       	adc	r5, r21
 49c:	66 1e       	adc	r6, r22
 49e:	77 1e       	adc	r7, r23
 4a0:	f6 01       	movw	r30, r12
 4a2:	22 91       	ld	r18, -Z
 4a4:	6f 01       	movw	r12, r30
 4a6:	42 2f       	mov	r20, r18
 4a8:	22 0f       	add	r18, r18
 4aa:	55 0b       	sbc	r21, r21
 4ac:	66 0b       	sbc	r22, r22
 4ae:	77 0b       	sbc	r23, r23
 4b0:	9a 01       	movw	r18, r20
 4b2:	ab 01       	movw	r20, r22
 4b4:	24 0d       	add	r18, r4
 4b6:	35 1d       	adc	r19, r5
 4b8:	46 1d       	adc	r20, r6
 4ba:	57 1d       	adc	r21, r7
 4bc:	f4 01       	movw	r30, r8
 4be:	92 91       	ld	r25, -Z
 4c0:	82 91       	ld	r24, -Z
 4c2:	72 91       	ld	r23, -Z
 4c4:	62 91       	ld	r22, -Z
 4c6:	4f 01       	movw	r8, r30
 4c8:	2b 01       	movw	r4, r22
 4ca:	3c 01       	movw	r6, r24
 4cc:	42 0e       	add	r4, r18
 4ce:	53 1e       	adc	r5, r19
 4d0:	64 1e       	adc	r6, r20
 4d2:	75 1e       	adc	r7, r21
 4d4:	40 82       	st	Z, r4
 4d6:	51 82       	std	Z+1, r5	; 0x01
 4d8:	62 82       	std	Z+2, r6	; 0x02
 4da:	73 82       	std	Z+3, r7	; 0x03

			//mathTime = micros() - mathTime;
			//Serial.write("mathTime(us): ");
			//Serial.println(mathTime);

			yM += 155;
 4dc:	11 97       	sbiw	r26, 0x01	; 1

			--xA;
			--yA;
			--r;

			--e;
 4de:	fa 94       	dec	r15

	while (n>0)
	{
		n--;
		//Serial.println(n);
		while(e>0){
 4e0:	f1 10       	cpse	r15, r1
 4e2:	81 ce       	rjmp	.-766    	; 0x1e6 <loop+0x116>
 4e4:	cf 54       	subi	r28, 0x4F	; 79
 4e6:	dd 4f       	sbci	r29, 0xFD	; 253
 4e8:	88 81       	ld	r24, Y
 4ea:	c1 5b       	subi	r28, 0xB1	; 177
 4ec:	d2 40       	sbci	r29, 0x02	; 2
 4ee:	81 50       	subi	r24, 0x01	; 1
	register int8_t reg12 = 0;
  
    /*Start timer*/
	unsigned long startTime = micros();	

	while (n>0)
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
			--e;
		}
	}

  //
  unsigned long currentTime = micros();
 4f2:	0e 94 80 05 	call	0xb00	; 0xb00 <micros>
  unsigned long elapsedTime = currentTime - startTime;
 4f6:	6b 01       	movw	r12, r22
 4f8:	7c 01       	movw	r14, r24
 4fa:	ce 54       	subi	r28, 0x4E	; 78
 4fc:	dd 4f       	sbci	r29, 0xFD	; 253
 4fe:	48 80       	ld	r4, Y
 500:	59 80       	ldd	r5, Y+1	; 0x01
 502:	6a 80       	ldd	r6, Y+2	; 0x02
 504:	7b 80       	ldd	r7, Y+3	; 0x03
 506:	c2 5b       	subi	r28, 0xB2	; 178
 508:	d2 40       	sbci	r29, 0x02	; 2
 50a:	c4 18       	sub	r12, r4
 50c:	d5 08       	sbc	r13, r5
 50e:	e6 08       	sbc	r14, r6
 510:	f7 08       	sbc	r15, r7
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 512:	42 e1       	ldi	r20, 0x12	; 18
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	62 e5       	ldi	r22, 0x52	; 82
 518:	72 e0       	ldi	r23, 0x02	; 2
 51a:	86 e8       	ldi	r24, 0x86	; 134
 51c:	92 e0       	ldi	r25, 0x02	; 2
 51e:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5writeEPKhj>
  
  //
  Serial.write("Elapsed time(us): ");
  Serial.println(elapsedTime);
 522:	2a e0       	ldi	r18, 0x0A	; 10
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	b7 01       	movw	r22, r14
 528:	a6 01       	movw	r20, r12
 52a:	86 e8       	ldi	r24, 0x86	; 134
 52c:	92 e0       	ldi	r25, 0x02	; 2
}
 52e:	cb 54       	subi	r28, 0x4B	; 75
 530:	dd 4f       	sbci	r29, 0xFD	; 253
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	ff 90       	pop	r15
 546:	ef 90       	pop	r14
 548:	df 90       	pop	r13
 54a:	cf 90       	pop	r12
 54c:	bf 90       	pop	r11
 54e:	af 90       	pop	r10
 550:	9f 90       	pop	r9
 552:	8f 90       	pop	r8
 554:	7f 90       	pop	r7
 556:	6f 90       	pop	r6
 558:	5f 90       	pop	r5
 55a:	4f 90       	pop	r4
 55c:	3f 90       	pop	r3
 55e:	2f 90       	pop	r2
  unsigned long currentTime = micros();
  unsigned long elapsedTime = currentTime - startTime;
  
  //
  Serial.write("Elapsed time(us): ");
  Serial.println(elapsedTime);
 560:	0c 94 24 05 	jmp	0xa48	; 0xa48 <_ZN5Print7printlnEmi>

00000564 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 564:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 566:	91 8d       	ldd	r25, Z+25	; 0x19
 568:	22 8d       	ldd	r18, Z+26	; 0x1a
 56a:	89 2f       	mov	r24, r25
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	80 5c       	subi	r24, 0xC0	; 192
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	82 1b       	sub	r24, r18
 574:	91 09       	sbc	r25, r1
}
 576:	8f 73       	andi	r24, 0x3F	; 63
 578:	99 27       	eor	r25, r25
 57a:	08 95       	ret

0000057c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 57c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 57e:	91 8d       	ldd	r25, Z+25	; 0x19
 580:	82 8d       	ldd	r24, Z+26	; 0x1a
 582:	98 17       	cp	r25, r24
 584:	31 f0       	breq	.+12     	; 0x592 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 586:	82 8d       	ldd	r24, Z+26	; 0x1a
 588:	e8 0f       	add	r30, r24
 58a:	f1 1d       	adc	r31, r1
 58c:	85 8d       	ldd	r24, Z+29	; 0x1d
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 596:	08 95       	ret

00000598 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 598:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 59a:	91 8d       	ldd	r25, Z+25	; 0x19
 59c:	82 8d       	ldd	r24, Z+26	; 0x1a
 59e:	98 17       	cp	r25, r24
 5a0:	61 f0       	breq	.+24     	; 0x5ba <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 5a2:	82 8d       	ldd	r24, Z+26	; 0x1a
 5a4:	df 01       	movw	r26, r30
 5a6:	a8 0f       	add	r26, r24
 5a8:	b1 1d       	adc	r27, r1
 5aa:	5d 96       	adiw	r26, 0x1d	; 29
 5ac:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 5ae:	92 8d       	ldd	r25, Z+26	; 0x1a
 5b0:	9f 5f       	subi	r25, 0xFF	; 255
 5b2:	9f 73       	andi	r25, 0x3F	; 63
 5b4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 5ba:	8f ef       	ldi	r24, 0xFF	; 255
 5bc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 5be:	08 95       	ret

000005c0 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 5c0:	fc 01       	movw	r30, r24
 5c2:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 5c4:	44 8d       	ldd	r20, Z+28	; 0x1c
 5c6:	25 2f       	mov	r18, r21
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	84 2f       	mov	r24, r20
 5cc:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 5ce:	82 1b       	sub	r24, r18
 5d0:	93 0b       	sbc	r25, r19
 5d2:	54 17       	cp	r21, r20
 5d4:	10 f0       	brcs	.+4      	; 0x5da <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 5d6:	cf 96       	adiw	r24, 0x3f	; 63
 5d8:	08 95       	ret
  return tail - head - 1;
 5da:	01 97       	sbiw	r24, 0x01	; 1
}
 5dc:	08 95       	ret

000005de <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 5de:	84 e4       	ldi	r24, 0x44	; 68
 5e0:	94 e0       	ldi	r25, 0x04	; 4
 5e2:	89 2b       	or	r24, r25
 5e4:	49 f0       	breq	.+18     	; 0x5f8 <_Z14serialEventRunv+0x1a>
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	89 2b       	or	r24, r25
 5ec:	29 f0       	breq	.+10     	; 0x5f8 <_Z14serialEventRunv+0x1a>
 5ee:	0e 94 44 04 	call	0x888	; 0x888 <_Z17Serial0_availablev>
 5f2:	81 11       	cpse	r24, r1
 5f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 5f8:	08 95       	ret

000005fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 5fa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 5fc:	84 8d       	ldd	r24, Z+28	; 0x1c
 5fe:	df 01       	movw	r26, r30
 600:	a8 0f       	add	r26, r24
 602:	b1 1d       	adc	r27, r1
 604:	a3 5a       	subi	r26, 0xA3	; 163
 606:	bf 4f       	sbci	r27, 0xFF	; 255
 608:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 60a:	84 8d       	ldd	r24, Z+28	; 0x1c
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	8f 73       	andi	r24, 0x3F	; 63
 612:	99 27       	eor	r25, r25
 614:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 616:	a6 89       	ldd	r26, Z+22	; 0x16
 618:	b7 89       	ldd	r27, Z+23	; 0x17
 61a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 61c:	a0 89       	ldd	r26, Z+16	; 0x10
 61e:	b1 89       	ldd	r27, Z+17	; 0x11
 620:	8c 91       	ld	r24, X
 622:	80 64       	ori	r24, 0x40	; 64
 624:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 626:	93 8d       	ldd	r25, Z+27	; 0x1b
 628:	84 8d       	ldd	r24, Z+28	; 0x1c
 62a:	98 13       	cpse	r25, r24
 62c:	06 c0       	rjmp	.+12     	; 0x63a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 62e:	02 88       	ldd	r0, Z+18	; 0x12
 630:	f3 89       	ldd	r31, Z+19	; 0x13
 632:	e0 2d       	mov	r30, r0
 634:	80 81       	ld	r24, Z
 636:	8f 7d       	andi	r24, 0xDF	; 223
 638:	80 83       	st	Z, r24
 63a:	08 95       	ret

0000063c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 63c:	ef 92       	push	r14
 63e:	ff 92       	push	r15
 640:	0f 93       	push	r16
 642:	1f 93       	push	r17
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	ec 01       	movw	r28, r24
  _written = true;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 64e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 650:	8c 8d       	ldd	r24, Y+28	; 0x1c
 652:	98 13       	cpse	r25, r24
 654:	05 c0       	rjmp	.+10     	; 0x660 <_ZN14HardwareSerial5writeEh+0x24>
 656:	e8 89       	ldd	r30, Y+16	; 0x10
 658:	f9 89       	ldd	r31, Y+17	; 0x11
 65a:	80 81       	ld	r24, Z
 65c:	85 fd       	sbrc	r24, 5
 65e:	24 c0       	rjmp	.+72     	; 0x6a8 <_ZN14HardwareSerial5writeEh+0x6c>
 660:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 662:	0b 8d       	ldd	r16, Y+27	; 0x1b
 664:	10 e0       	ldi	r17, 0x00	; 0
 666:	0f 5f       	subi	r16, 0xFF	; 255
 668:	1f 4f       	sbci	r17, 0xFF	; 255
 66a:	0f 73       	andi	r16, 0x3F	; 63
 66c:	11 27       	eor	r17, r17
 66e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 670:	8c 8d       	ldd	r24, Y+28	; 0x1c
 672:	e8 12       	cpse	r14, r24
 674:	0c c0       	rjmp	.+24     	; 0x68e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	07 fc       	sbrc	r0, 7
 67a:	fa cf       	rjmp	.-12     	; 0x670 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 67c:	e8 89       	ldd	r30, Y+16	; 0x10
 67e:	f9 89       	ldd	r31, Y+17	; 0x11
 680:	80 81       	ld	r24, Z
 682:	85 ff       	sbrs	r24, 5
 684:	f5 cf       	rjmp	.-22     	; 0x670 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 686:	ce 01       	movw	r24, r28
 688:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 68c:	f1 cf       	rjmp	.-30     	; 0x670 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 68e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 690:	fe 01       	movw	r30, r28
 692:	e8 0f       	add	r30, r24
 694:	f1 1d       	adc	r31, r1
 696:	e3 5a       	subi	r30, 0xA3	; 163
 698:	ff 4f       	sbci	r31, 0xFF	; 255
 69a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 69c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 69e:	ea 89       	ldd	r30, Y+18	; 0x12
 6a0:	fb 89       	ldd	r31, Y+19	; 0x13
 6a2:	80 81       	ld	r24, Z
 6a4:	80 62       	ori	r24, 0x20	; 32
 6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 6a8:	ee 89       	ldd	r30, Y+22	; 0x16
 6aa:	ff 89       	ldd	r31, Y+23	; 0x17
 6ac:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 6ae:	e8 89       	ldd	r30, Y+16	; 0x10
 6b0:	f9 89       	ldd	r31, Y+17	; 0x11
 6b2:	80 81       	ld	r24, Z
 6b4:	80 64       	ori	r24, 0x40	; 64
 6b6:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	08 95       	ret

000006ca <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 6d0:	88 8d       	ldd	r24, Y+24	; 0x18
 6d2:	88 23       	and	r24, r24
 6d4:	c9 f0       	breq	.+50     	; 0x708 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 6d6:	ea 89       	ldd	r30, Y+18	; 0x12
 6d8:	fb 89       	ldd	r31, Y+19	; 0x13
 6da:	80 81       	ld	r24, Z
 6dc:	85 fd       	sbrc	r24, 5
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <_ZN14HardwareSerial5flushEv+0x20>
 6e0:	a8 89       	ldd	r26, Y+16	; 0x10
 6e2:	b9 89       	ldd	r27, Y+17	; 0x11
 6e4:	8c 91       	ld	r24, X
 6e6:	86 fd       	sbrc	r24, 6
 6e8:	0f c0       	rjmp	.+30     	; 0x708 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	07 fc       	sbrc	r0, 7
 6ee:	f5 cf       	rjmp	.-22     	; 0x6da <_ZN14HardwareSerial5flushEv+0x10>
 6f0:	80 81       	ld	r24, Z
 6f2:	85 ff       	sbrs	r24, 5
 6f4:	f2 cf       	rjmp	.-28     	; 0x6da <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 6f6:	a8 89       	ldd	r26, Y+16	; 0x10
 6f8:	b9 89       	ldd	r27, Y+17	; 0x11
 6fa:	8c 91       	ld	r24, X
 6fc:	85 ff       	sbrs	r24, 5
 6fe:	ed cf       	rjmp	.-38     	; 0x6da <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 700:	ce 01       	movw	r24, r28
 702:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 706:	e7 cf       	rjmp	.-50     	; 0x6d6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 70e:	cf 92       	push	r12
 710:	df 92       	push	r13
 712:	ef 92       	push	r14
 714:	ff 92       	push	r15
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	ec 01       	movw	r28, r24
 71e:	6a 01       	movw	r12, r20
 720:	7b 01       	movw	r14, r22
 722:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 724:	e8 89       	ldd	r30, Y+16	; 0x10
 726:	f9 89       	ldd	r31, Y+17	; 0x11
 728:	82 e0       	ldi	r24, 0x02	; 2
 72a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 72c:	41 15       	cp	r20, r1
 72e:	51 4e       	sbci	r21, 0xE1	; 225
 730:	61 05       	cpc	r22, r1
 732:	71 05       	cpc	r23, r1
 734:	b1 f0       	breq	.+44     	; 0x762 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	79 e0       	ldi	r23, 0x09	; 9
 73a:	8d e3       	ldi	r24, 0x3D	; 61
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	a7 01       	movw	r20, r14
 740:	96 01       	movw	r18, r12
 742:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__udivmodsi4>
 746:	da 01       	movw	r26, r20
 748:	c9 01       	movw	r24, r18
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	a1 09       	sbc	r26, r1
 74e:	b1 09       	sbc	r27, r1
 750:	b6 95       	lsr	r27
 752:	a7 95       	ror	r26
 754:	97 95       	ror	r25
 756:	87 95       	ror	r24
 758:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 75a:	21 15       	cp	r18, r1
 75c:	80 e1       	ldi	r24, 0x10	; 16
 75e:	38 07       	cpc	r19, r24
 760:	a8 f0       	brcs	.+42     	; 0x78c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 762:	e8 89       	ldd	r30, Y+16	; 0x10
 764:	f9 89       	ldd	r31, Y+17	; 0x11
 766:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 768:	60 e8       	ldi	r22, 0x80	; 128
 76a:	74 e8       	ldi	r23, 0x84	; 132
 76c:	8e e1       	ldi	r24, 0x1E	; 30
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	a7 01       	movw	r20, r14
 772:	96 01       	movw	r18, r12
 774:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__udivmodsi4>
 778:	da 01       	movw	r26, r20
 77a:	c9 01       	movw	r24, r18
 77c:	01 97       	sbiw	r24, 0x01	; 1
 77e:	a1 09       	sbc	r26, r1
 780:	b1 09       	sbc	r27, r1
 782:	b6 95       	lsr	r27
 784:	a7 95       	ror	r26
 786:	97 95       	ror	r25
 788:	87 95       	ror	r24
 78a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 78c:	ec 85       	ldd	r30, Y+12	; 0x0c
 78e:	fd 85       	ldd	r31, Y+13	; 0x0d
 790:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 792:	ee 85       	ldd	r30, Y+14	; 0x0e
 794:	ff 85       	ldd	r31, Y+15	; 0x0f
 796:	20 83       	st	Z, r18

  _written = false;
 798:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 79a:	ec 89       	ldd	r30, Y+20	; 0x14
 79c:	fd 89       	ldd	r31, Y+21	; 0x15
 79e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 7a0:	ea 89       	ldd	r30, Y+18	; 0x12
 7a2:	fb 89       	ldd	r31, Y+19	; 0x13
 7a4:	80 81       	ld	r24, Z
 7a6:	80 61       	ori	r24, 0x10	; 16
 7a8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 7aa:	ea 89       	ldd	r30, Y+18	; 0x12
 7ac:	fb 89       	ldd	r31, Y+19	; 0x13
 7ae:	80 81       	ld	r24, Z
 7b0:	88 60       	ori	r24, 0x08	; 8
 7b2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 7b4:	ea 89       	ldd	r30, Y+18	; 0x12
 7b6:	fb 89       	ldd	r31, Y+19	; 0x13
 7b8:	80 81       	ld	r24, Z
 7ba:	80 68       	ori	r24, 0x80	; 128
 7bc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 7be:	ea 89       	ldd	r30, Y+18	; 0x12
 7c0:	fb 89       	ldd	r31, Y+19	; 0x13
 7c2:	80 81       	ld	r24, Z
 7c4:	8f 7d       	andi	r24, 0xDF	; 223
 7c6:	80 83       	st	Z, r24
}
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	1f 91       	pop	r17
 7ce:	ff 90       	pop	r15
 7d0:	ef 90       	pop	r14
 7d2:	df 90       	pop	r13
 7d4:	cf 90       	pop	r12
 7d6:	08 95       	ret

000007d8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 7d8:	1f 92       	push	r1
 7da:	0f 92       	push	r0
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	0f 92       	push	r0
 7e0:	11 24       	eor	r1, r1
 7e2:	2f 93       	push	r18
 7e4:	8f 93       	push	r24
 7e6:	9f 93       	push	r25
 7e8:	ef 93       	push	r30
 7ea:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 7ec:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <__data_end+0x10>
 7f0:	f0 91 97 02 	lds	r31, 0x0297	; 0x800297 <__data_end+0x11>
 7f4:	80 81       	ld	r24, Z
 7f6:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end+0x16>
 7fa:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <__data_end+0x17>
 7fe:	82 fd       	sbrc	r24, 2
 800:	12 c0       	rjmp	.+36     	; 0x826 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 802:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 804:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <__data_end+0x19>
 808:	8f 5f       	subi	r24, 0xFF	; 255
 80a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 80c:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__data_end+0x1a>
 810:	82 17       	cp	r24, r18
 812:	51 f0       	breq	.+20     	; 0x828 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 814:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__data_end+0x19>
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	ea 57       	subi	r30, 0x7A	; 122
 81c:	fd 4f       	sbci	r31, 0xFD	; 253
 81e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 820:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <__data_end+0x19>
 824:	01 c0       	rjmp	.+2      	; 0x828 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 826:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 828:	ff 91       	pop	r31
 82a:	ef 91       	pop	r30
 82c:	9f 91       	pop	r25
 82e:	8f 91       	pop	r24
 830:	2f 91       	pop	r18
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0
 838:	1f 90       	pop	r1
 83a:	18 95       	reti

0000083c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 83c:	1f 92       	push	r1
 83e:	0f 92       	push	r0
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	0f 92       	push	r0
 844:	11 24       	eor	r1, r1
 846:	2f 93       	push	r18
 848:	3f 93       	push	r19
 84a:	4f 93       	push	r20
 84c:	5f 93       	push	r21
 84e:	6f 93       	push	r22
 850:	7f 93       	push	r23
 852:	8f 93       	push	r24
 854:	9f 93       	push	r25
 856:	af 93       	push	r26
 858:	bf 93       	push	r27
 85a:	ef 93       	push	r30
 85c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 85e:	86 e8       	ldi	r24, 0x86	; 134
 860:	92 e0       	ldi	r25, 0x02	; 2
 862:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 866:	ff 91       	pop	r31
 868:	ef 91       	pop	r30
 86a:	bf 91       	pop	r27
 86c:	af 91       	pop	r26
 86e:	9f 91       	pop	r25
 870:	8f 91       	pop	r24
 872:	7f 91       	pop	r23
 874:	6f 91       	pop	r22
 876:	5f 91       	pop	r21
 878:	4f 91       	pop	r20
 87a:	3f 91       	pop	r19
 87c:	2f 91       	pop	r18
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 888:	86 e8       	ldi	r24, 0x86	; 134
 88a:	92 e0       	ldi	r25, 0x02	; 2
 88c:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN14HardwareSerial9availableEv>
 890:	21 e0       	ldi	r18, 0x01	; 1
 892:	89 2b       	or	r24, r25
 894:	09 f4       	brne	.+2      	; 0x898 <_Z17Serial0_availablev+0x10>
 896:	20 e0       	ldi	r18, 0x00	; 0
}
 898:	82 2f       	mov	r24, r18
 89a:	08 95       	ret

0000089c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 89c:	e6 e8       	ldi	r30, 0x86	; 134
 89e:	f2 e0       	ldi	r31, 0x02	; 2
 8a0:	13 82       	std	Z+3, r1	; 0x03
 8a2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 8a4:	88 ee       	ldi	r24, 0xE8	; 232
 8a6:	93 e0       	ldi	r25, 0x03	; 3
 8a8:	a0 e0       	ldi	r26, 0x00	; 0
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	84 83       	std	Z+4, r24	; 0x04
 8ae:	95 83       	std	Z+5, r25	; 0x05
 8b0:	a6 83       	std	Z+6, r26	; 0x06
 8b2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 8b4:	89 e6       	ldi	r24, 0x69	; 105
 8b6:	92 e0       	ldi	r25, 0x02	; 2
 8b8:	91 83       	std	Z+1, r25	; 0x01
 8ba:	80 83       	st	Z, r24
 8bc:	85 ec       	ldi	r24, 0xC5	; 197
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	95 87       	std	Z+13, r25	; 0x0d
 8c2:	84 87       	std	Z+12, r24	; 0x0c
 8c4:	84 ec       	ldi	r24, 0xC4	; 196
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	97 87       	std	Z+15, r25	; 0x0f
 8ca:	86 87       	std	Z+14, r24	; 0x0e
 8cc:	80 ec       	ldi	r24, 0xC0	; 192
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	91 8b       	std	Z+17, r25	; 0x11
 8d2:	80 8b       	std	Z+16, r24	; 0x10
 8d4:	81 ec       	ldi	r24, 0xC1	; 193
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	93 8b       	std	Z+19, r25	; 0x13
 8da:	82 8b       	std	Z+18, r24	; 0x12
 8dc:	82 ec       	ldi	r24, 0xC2	; 194
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	95 8b       	std	Z+21, r25	; 0x15
 8e2:	84 8b       	std	Z+20, r24	; 0x14
 8e4:	86 ec       	ldi	r24, 0xC6	; 198
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	97 8b       	std	Z+23, r25	; 0x17
 8ea:	86 8b       	std	Z+22, r24	; 0x16
 8ec:	11 8e       	std	Z+25, r1	; 0x19
 8ee:	12 8e       	std	Z+26, r1	; 0x1a
 8f0:	13 8e       	std	Z+27, r1	; 0x1b
 8f2:	14 8e       	std	Z+28, r1	; 0x1c
 8f4:	08 95       	ret

000008f6 <initVariant>:
 8f6:	08 95       	ret

000008f8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 8f8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <init>

	initVariant();
 8fc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 900:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 904:	cf ee       	ldi	r28, 0xEF	; 239
 906:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 908:	0e 94 68 00 	call	0xd0	; 0xd0 <loop>
		if (serialEventRun) serialEventRun();
 90c:	20 97       	sbiw	r28, 0x00	; 0
 90e:	e1 f3       	breq	.-8      	; 0x908 <__stack+0x9>
 910:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z14serialEventRunv>
 914:	f9 cf       	rjmp	.-14     	; 0x908 <__stack+0x9>

00000916 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 916:	cf 92       	push	r12
 918:	df 92       	push	r13
 91a:	ef 92       	push	r14
 91c:	ff 92       	push	r15
 91e:	0f 93       	push	r16
 920:	1f 93       	push	r17
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	6c 01       	movw	r12, r24
 928:	7a 01       	movw	r14, r20
 92a:	8b 01       	movw	r16, r22
 92c:	c0 e0       	ldi	r28, 0x00	; 0
 92e:	d0 e0       	ldi	r29, 0x00	; 0
 930:	ce 15       	cp	r28, r14
 932:	df 05       	cpc	r29, r15
 934:	81 f0       	breq	.+32     	; 0x956 <_ZN5Print5writeEPKhj+0x40>
 936:	d8 01       	movw	r26, r16
 938:	6d 91       	ld	r22, X+
 93a:	8d 01       	movw	r16, r26
 93c:	d6 01       	movw	r26, r12
 93e:	ed 91       	ld	r30, X+
 940:	fc 91       	ld	r31, X
 942:	01 90       	ld	r0, Z+
 944:	f0 81       	ld	r31, Z
 946:	e0 2d       	mov	r30, r0
 948:	c6 01       	movw	r24, r12
 94a:	09 95       	icall
 94c:	89 2b       	or	r24, r25
 94e:	11 f0       	breq	.+4      	; 0x954 <_ZN5Print5writeEPKhj+0x3e>
 950:	21 96       	adiw	r28, 0x01	; 1
 952:	ee cf       	rjmp	.-36     	; 0x930 <_ZN5Print5writeEPKhj+0x1a>
 954:	7e 01       	movw	r14, r28
 956:	c7 01       	movw	r24, r14
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	1f 91       	pop	r17
 95e:	0f 91       	pop	r16
 960:	ff 90       	pop	r15
 962:	ef 90       	pop	r14
 964:	df 90       	pop	r13
 966:	cf 90       	pop	r12
 968:	08 95       	ret

0000096a <_ZN5Print5writeEPKc>:
 96a:	61 15       	cp	r22, r1
 96c:	71 05       	cpc	r23, r1
 96e:	79 f0       	breq	.+30     	; 0x98e <_ZN5Print5writeEPKc+0x24>
 970:	fb 01       	movw	r30, r22
 972:	01 90       	ld	r0, Z+
 974:	00 20       	and	r0, r0
 976:	e9 f7       	brne	.-6      	; 0x972 <_ZN5Print5writeEPKc+0x8>
 978:	31 97       	sbiw	r30, 0x01	; 1
 97a:	af 01       	movw	r20, r30
 97c:	46 1b       	sub	r20, r22
 97e:	57 0b       	sbc	r21, r23
 980:	dc 01       	movw	r26, r24
 982:	ed 91       	ld	r30, X+
 984:	fc 91       	ld	r31, X
 986:	02 80       	ldd	r0, Z+2	; 0x02
 988:	f3 81       	ldd	r31, Z+3	; 0x03
 98a:	e0 2d       	mov	r30, r0
 98c:	09 94       	ijmp
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	08 95       	ret

00000994 <_ZN5Print7printlnEv>:
 994:	67 e7       	ldi	r22, 0x77	; 119
 996:	72 e0       	ldi	r23, 0x02	; 2
 998:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_ZN5Print5writeEPKc>

0000099c <_ZN5Print11printNumberEmh>:
 99c:	8f 92       	push	r8
 99e:	9f 92       	push	r9
 9a0:	af 92       	push	r10
 9a2:	bf 92       	push	r11
 9a4:	ef 92       	push	r14
 9a6:	ff 92       	push	r15
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	cd b7       	in	r28, 0x3d	; 61
 9b2:	de b7       	in	r29, 0x3e	; 62
 9b4:	a1 97       	sbiw	r28, 0x21	; 33
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
 9c0:	7c 01       	movw	r14, r24
 9c2:	fa 01       	movw	r30, r20
 9c4:	cb 01       	movw	r24, r22
 9c6:	19 a2       	std	Y+33, r1	; 0x21
 9c8:	22 30       	cpi	r18, 0x02	; 2
 9ca:	08 f4       	brcc	.+2      	; 0x9ce <_ZN5Print11printNumberEmh+0x32>
 9cc:	2a e0       	ldi	r18, 0x0A	; 10
 9ce:	8e 01       	movw	r16, r28
 9d0:	0f 5d       	subi	r16, 0xDF	; 223
 9d2:	1f 4f       	sbci	r17, 0xFF	; 255
 9d4:	82 2e       	mov	r8, r18
 9d6:	91 2c       	mov	r9, r1
 9d8:	a1 2c       	mov	r10, r1
 9da:	b1 2c       	mov	r11, r1
 9dc:	bf 01       	movw	r22, r30
 9de:	a5 01       	movw	r20, r10
 9e0:	94 01       	movw	r18, r8
 9e2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__udivmodsi4>
 9e6:	f9 01       	movw	r30, r18
 9e8:	ca 01       	movw	r24, r20
 9ea:	01 50       	subi	r16, 0x01	; 1
 9ec:	11 09       	sbc	r17, r1
 9ee:	6a 30       	cpi	r22, 0x0A	; 10
 9f0:	10 f4       	brcc	.+4      	; 0x9f6 <_ZN5Print11printNumberEmh+0x5a>
 9f2:	60 5d       	subi	r22, 0xD0	; 208
 9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <_ZN5Print11printNumberEmh+0x5c>
 9f6:	69 5c       	subi	r22, 0xC9	; 201
 9f8:	d8 01       	movw	r26, r16
 9fa:	6c 93       	st	X, r22
 9fc:	23 2b       	or	r18, r19
 9fe:	24 2b       	or	r18, r20
 a00:	25 2b       	or	r18, r21
 a02:	61 f7       	brne	.-40     	; 0x9dc <_ZN5Print11printNumberEmh+0x40>
 a04:	b8 01       	movw	r22, r16
 a06:	c7 01       	movw	r24, r14
 a08:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN5Print5writeEPKc>
 a0c:	a1 96       	adiw	r28, 0x21	; 33
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	f8 94       	cli
 a12:	de bf       	out	0x3e, r29	; 62
 a14:	0f be       	out	0x3f, r0	; 63
 a16:	cd bf       	out	0x3d, r28	; 61
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	1f 91       	pop	r17
 a1e:	0f 91       	pop	r16
 a20:	ff 90       	pop	r15
 a22:	ef 90       	pop	r14
 a24:	bf 90       	pop	r11
 a26:	af 90       	pop	r10
 a28:	9f 90       	pop	r9
 a2a:	8f 90       	pop	r8
 a2c:	08 95       	ret

00000a2e <_ZN5Print5printEmi>:
 a2e:	21 15       	cp	r18, r1
 a30:	31 05       	cpc	r19, r1
 a32:	41 f4       	brne	.+16     	; 0xa44 <_ZN5Print5printEmi+0x16>
 a34:	dc 01       	movw	r26, r24
 a36:	ed 91       	ld	r30, X+
 a38:	fc 91       	ld	r31, X
 a3a:	01 90       	ld	r0, Z+
 a3c:	f0 81       	ld	r31, Z
 a3e:	e0 2d       	mov	r30, r0
 a40:	64 2f       	mov	r22, r20
 a42:	09 94       	ijmp
 a44:	0c 94 ce 04 	jmp	0x99c	; 0x99c <_ZN5Print11printNumberEmh>

00000a48 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 a48:	0f 93       	push	r16
 a4a:	1f 93       	push	r17
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
 a50:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 a52:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN5Print5printEmi>
 a56:	8c 01       	movw	r16, r24
  n += println();
 a58:	ce 01       	movw	r24, r28
 a5a:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN5Print7printlnEv>
  return n;
}
 a5e:	80 0f       	add	r24, r16
 a60:	91 1f       	adc	r25, r17
 a62:	df 91       	pop	r29
 a64:	cf 91       	pop	r28
 a66:	1f 91       	pop	r17
 a68:	0f 91       	pop	r16
 a6a:	08 95       	ret

00000a6c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 a6c:	1f 92       	push	r1
 a6e:	0f 92       	push	r0
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	0f 92       	push	r0
 a74:	11 24       	eor	r1, r1
 a76:	2f 93       	push	r18
 a78:	3f 93       	push	r19
 a7a:	8f 93       	push	r24
 a7c:	9f 93       	push	r25
 a7e:	af 93       	push	r26
 a80:	bf 93       	push	r27
 a82:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <timer0_millis>
 a86:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <timer0_millis+0x1>
 a8a:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <timer0_millis+0x2>
 a8e:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <timer0_millis+0x3>
 a92:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <timer0_fract>
 a96:	23 e0       	ldi	r18, 0x03	; 3
 a98:	23 0f       	add	r18, r19
 a9a:	2d 37       	cpi	r18, 0x7D	; 125
 a9c:	20 f4       	brcc	.+8      	; 0xaa6 <__vector_16+0x3a>
 a9e:	01 96       	adiw	r24, 0x01	; 1
 aa0:	a1 1d       	adc	r26, r1
 aa2:	b1 1d       	adc	r27, r1
 aa4:	05 c0       	rjmp	.+10     	; 0xab0 <__vector_16+0x44>
 aa6:	26 e8       	ldi	r18, 0x86	; 134
 aa8:	23 0f       	add	r18, r19
 aaa:	02 96       	adiw	r24, 0x02	; 2
 aac:	a1 1d       	adc	r26, r1
 aae:	b1 1d       	adc	r27, r1
 ab0:	20 93 23 03 	sts	0x0323, r18	; 0x800323 <timer0_fract>
 ab4:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <timer0_millis>
 ab8:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <timer0_millis+0x1>
 abc:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <timer0_millis+0x2>
 ac0:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <timer0_millis+0x3>
 ac4:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 ac8:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 acc:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 ad0:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 ad4:	01 96       	adiw	r24, 0x01	; 1
 ad6:	a1 1d       	adc	r26, r1
 ad8:	b1 1d       	adc	r27, r1
 ada:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <timer0_overflow_count>
 ade:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <timer0_overflow_count+0x1>
 ae2:	a0 93 2a 03 	sts	0x032A, r26	; 0x80032a <timer0_overflow_count+0x2>
 ae6:	b0 93 2b 03 	sts	0x032B, r27	; 0x80032b <timer0_overflow_count+0x3>
 aea:	bf 91       	pop	r27
 aec:	af 91       	pop	r26
 aee:	9f 91       	pop	r25
 af0:	8f 91       	pop	r24
 af2:	3f 91       	pop	r19
 af4:	2f 91       	pop	r18
 af6:	0f 90       	pop	r0
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	0f 90       	pop	r0
 afc:	1f 90       	pop	r1
 afe:	18 95       	reti

00000b00 <micros>:
 b00:	3f b7       	in	r19, 0x3f	; 63
 b02:	f8 94       	cli
 b04:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 b08:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 b0c:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 b10:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 b14:	26 b5       	in	r18, 0x26	; 38
 b16:	a8 9b       	sbis	0x15, 0	; 21
 b18:	05 c0       	rjmp	.+10     	; 0xb24 <micros+0x24>
 b1a:	2f 3f       	cpi	r18, 0xFF	; 255
 b1c:	19 f0       	breq	.+6      	; 0xb24 <micros+0x24>
 b1e:	01 96       	adiw	r24, 0x01	; 1
 b20:	a1 1d       	adc	r26, r1
 b22:	b1 1d       	adc	r27, r1
 b24:	3f bf       	out	0x3f, r19	; 63
 b26:	ba 2f       	mov	r27, r26
 b28:	a9 2f       	mov	r26, r25
 b2a:	98 2f       	mov	r25, r24
 b2c:	88 27       	eor	r24, r24
 b2e:	82 0f       	add	r24, r18
 b30:	91 1d       	adc	r25, r1
 b32:	a1 1d       	adc	r26, r1
 b34:	b1 1d       	adc	r27, r1
 b36:	bc 01       	movw	r22, r24
 b38:	cd 01       	movw	r24, r26
 b3a:	42 e0       	ldi	r20, 0x02	; 2
 b3c:	66 0f       	add	r22, r22
 b3e:	77 1f       	adc	r23, r23
 b40:	88 1f       	adc	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	4a 95       	dec	r20
 b46:	d1 f7       	brne	.-12     	; 0xb3c <micros+0x3c>
 b48:	08 95       	ret

00000b4a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 b4a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 b4c:	84 b5       	in	r24, 0x24	; 36
 b4e:	82 60       	ori	r24, 0x02	; 2
 b50:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 b52:	84 b5       	in	r24, 0x24	; 36
 b54:	81 60       	ori	r24, 0x01	; 1
 b56:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 b58:	85 b5       	in	r24, 0x25	; 37
 b5a:	82 60       	ori	r24, 0x02	; 2
 b5c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 b5e:	85 b5       	in	r24, 0x25	; 37
 b60:	81 60       	ori	r24, 0x01	; 1
 b62:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 b64:	ee e6       	ldi	r30, 0x6E	; 110
 b66:	f0 e0       	ldi	r31, 0x00	; 0
 b68:	80 81       	ld	r24, Z
 b6a:	81 60       	ori	r24, 0x01	; 1
 b6c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 b6e:	e1 e8       	ldi	r30, 0x81	; 129
 b70:	f0 e0       	ldi	r31, 0x00	; 0
 b72:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 b74:	80 81       	ld	r24, Z
 b76:	82 60       	ori	r24, 0x02	; 2
 b78:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 b7a:	80 81       	ld	r24, Z
 b7c:	81 60       	ori	r24, 0x01	; 1
 b7e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 b80:	e0 e8       	ldi	r30, 0x80	; 128
 b82:	f0 e0       	ldi	r31, 0x00	; 0
 b84:	80 81       	ld	r24, Z
 b86:	81 60       	ori	r24, 0x01	; 1
 b88:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 b8a:	e1 eb       	ldi	r30, 0xB1	; 177
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	80 81       	ld	r24, Z
 b90:	84 60       	ori	r24, 0x04	; 4
 b92:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 b94:	e0 eb       	ldi	r30, 0xB0	; 176
 b96:	f0 e0       	ldi	r31, 0x00	; 0
 b98:	80 81       	ld	r24, Z
 b9a:	81 60       	ori	r24, 0x01	; 1
 b9c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 b9e:	ea e7       	ldi	r30, 0x7A	; 122
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	80 81       	ld	r24, Z
 ba4:	84 60       	ori	r24, 0x04	; 4
 ba6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 ba8:	80 81       	ld	r24, Z
 baa:	82 60       	ori	r24, 0x02	; 2
 bac:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 bae:	80 81       	ld	r24, Z
 bb0:	81 60       	ori	r24, 0x01	; 1
 bb2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 bb4:	80 81       	ld	r24, Z
 bb6:	80 68       	ori	r24, 0x80	; 128
 bb8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 bba:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 bbe:	08 95       	ret

00000bc0 <__udivmodsi4>:
 bc0:	a1 e2       	ldi	r26, 0x21	; 33
 bc2:	1a 2e       	mov	r1, r26
 bc4:	aa 1b       	sub	r26, r26
 bc6:	bb 1b       	sub	r27, r27
 bc8:	fd 01       	movw	r30, r26
 bca:	0d c0       	rjmp	.+26     	; 0xbe6 <__udivmodsi4_ep>

00000bcc <__udivmodsi4_loop>:
 bcc:	aa 1f       	adc	r26, r26
 bce:	bb 1f       	adc	r27, r27
 bd0:	ee 1f       	adc	r30, r30
 bd2:	ff 1f       	adc	r31, r31
 bd4:	a2 17       	cp	r26, r18
 bd6:	b3 07       	cpc	r27, r19
 bd8:	e4 07       	cpc	r30, r20
 bda:	f5 07       	cpc	r31, r21
 bdc:	20 f0       	brcs	.+8      	; 0xbe6 <__udivmodsi4_ep>
 bde:	a2 1b       	sub	r26, r18
 be0:	b3 0b       	sbc	r27, r19
 be2:	e4 0b       	sbc	r30, r20
 be4:	f5 0b       	sbc	r31, r21

00000be6 <__udivmodsi4_ep>:
 be6:	66 1f       	adc	r22, r22
 be8:	77 1f       	adc	r23, r23
 bea:	88 1f       	adc	r24, r24
 bec:	99 1f       	adc	r25, r25
 bee:	1a 94       	dec	r1
 bf0:	69 f7       	brne	.-38     	; 0xbcc <__udivmodsi4_loop>
 bf2:	60 95       	com	r22
 bf4:	70 95       	com	r23
 bf6:	80 95       	com	r24
 bf8:	90 95       	com	r25
 bfa:	9b 01       	movw	r18, r22
 bfc:	ac 01       	movw	r20, r24
 bfe:	bd 01       	movw	r22, r26
 c00:	cf 01       	movw	r24, r30
 c02:	08 95       	ret

00000c04 <__tablejump2__>:
 c04:	ee 0f       	add	r30, r30
 c06:	ff 1f       	adc	r31, r31
 c08:	05 90       	lpm	r0, Z+
 c0a:	f4 91       	lpm	r31, Z
 c0c:	e0 2d       	mov	r30, r0
 c0e:	09 94       	ijmp

00000c10 <_exit>:
 c10:	f8 94       	cli

00000c12 <__stop_program>:
 c12:	ff cf       	rjmp	.-2      	; 0xc12 <__stop_program>
