
Assignment_1.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  0000098a  00000a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800286  00800286  00000ba4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d94  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000148f  00000000  00000000  00007bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001268  00000000  00000000  0000905f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b4  00000000  00000000  0000a2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001df8  00000000  00000000  0000a97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002546  00000000  00000000  0000c774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000ecba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_18>
  4c:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	09 03       	fmul	r16, r17

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ea e8       	ldi	r30, 0x8A	; 138
  7e:	f9 e0       	ldi	r31, 0x09	; 9
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 38       	cpi	r26, 0x86	; 134
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	23 e0       	ldi	r18, 0x03	; 3
  8e:	a6 e8       	ldi	r26, 0x86	; 134
  90:	b2 e0       	ldi	r27, 0x02	; 2
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ac 32       	cpi	r26, 0x2C	; 44
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 bd 04 	call	0x97a	; 0x97a <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 37 03 	call	0x66e	; 0x66e <main>
  b6:	0c 94 c3 04 	jmp	0x986	; 0x986 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	55 e2       	ldi	r21, 0x25	; 37
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	0e 94 42 02 	call	0x484	; 0x484 <_ZN14HardwareSerial5beginEmh>
  d0:	08 95       	ret

000000d2 <loop>:
  d2:	2f 92       	push	r2
  d4:	3f 92       	push	r3
  d6:	4f 92       	push	r4
  d8:	5f 92       	push	r5
  da:	6f 92       	push	r6
  dc:	7f 92       	push	r7
  de:	8f 92       	push	r8
  e0:	9f 92       	push	r9
  e2:	af 92       	push	r10
  e4:	bf 92       	push	r11
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	cc 5a       	subi	r28, 0xAC	; 172
  fa:	d2 40       	sbci	r29, 0x02	; 2
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	de bf       	out	0x3e, r29	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	cd bf       	out	0x3d, r28	; 61
 106:	fe 01       	movw	r30, r28
 108:	31 96       	adiw	r30, 0x01	; 1
 10a:	84 ea       	ldi	r24, 0xA4	; 164
 10c:	92 e0       	ldi	r25, 0x02	; 2
 10e:	df 01       	movw	r26, r30
 110:	9c 01       	movw	r18, r24
 112:	1d 92       	st	X+, r1
 114:	21 50       	subi	r18, 0x01	; 1
 116:	30 40       	sbci	r19, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <loop+0x40>
 11a:	0e 94 3b 04 	call	0x876	; 0x876 <micros>
 11e:	c7 55       	subi	r28, 0x57	; 87
 120:	dd 4f       	sbci	r29, 0xFD	; 253
 122:	68 83       	st	Y, r22
 124:	79 83       	std	Y+1, r23	; 0x01
 126:	8a 83       	std	Y+2, r24	; 0x02
 128:	9b 83       	std	Y+3, r25	; 0x03
 12a:	c9 5a       	subi	r28, 0xA9	; 169
 12c:	d2 40       	sbci	r29, 0x02	; 2
 12e:	48 ee       	ldi	r20, 0xE8	; 232
 130:	53 e0       	ldi	r21, 0x03	; 3
 132:	c9 55       	subi	r28, 0x59	; 89
 134:	dd 4f       	sbci	r29, 0xFD	; 253
 136:	59 83       	std	Y+1, r21	; 0x01
 138:	48 83       	st	Y, r20
 13a:	c7 5a       	subi	r28, 0xA7	; 167
 13c:	d2 40       	sbci	r29, 0x02	; 2
 13e:	1e 01       	movw	r2, r28
 140:	53 e0       	ldi	r21, 0x03	; 3
 142:	25 1a       	sub	r2, r21
 144:	31 08       	sbc	r3, r1
 146:	82 e5       	ldi	r24, 0x52	; 82
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	cb 55       	subi	r28, 0x5B	; 91
 14c:	dd 4f       	sbci	r29, 0xFD	; 253
 14e:	99 83       	std	Y+1, r25	; 0x01
 150:	88 83       	st	Y, r24
 152:	c5 5a       	subi	r28, 0xA5	; 165
 154:	d2 40       	sbci	r29, 0x02	; 2
 156:	0f 2e       	mov	r0, r31
 158:	f9 ea       	ldi	r31, 0xA9	; 169
 15a:	ef 2e       	mov	r14, r31
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	ff 2e       	mov	r15, r31
 160:	f0 2d       	mov	r31, r0
 162:	0f 2e       	mov	r0, r31
 164:	fd e0       	ldi	r31, 0x0D	; 13
 166:	df 2e       	mov	r13, r31
 168:	f0 2d       	mov	r31, r0
 16a:	ae 01       	movw	r20, r28
 16c:	4f 55       	subi	r20, 0x5F	; 95
 16e:	5d 4f       	sbci	r21, 0xFD	; 253
 170:	08 ea       	ldi	r16, 0xA8	; 168
 172:	11 e0       	ldi	r17, 0x01	; 1
 174:	61 e5       	ldi	r22, 0x51	; 81
 176:	72 e0       	ldi	r23, 0x02	; 2
 178:	db 01       	movw	r26, r22
 17a:	8c 91       	ld	r24, X
 17c:	f8 01       	movw	r30, r16
 17e:	90 81       	ld	r25, Z
 180:	89 02       	muls	r24, r25
 182:	20 01       	movw	r4, r0
 184:	11 24       	eor	r1, r1
 186:	05 2c       	mov	r0, r5
 188:	00 0c       	add	r0, r0
 18a:	66 08       	sbc	r6, r6
 18c:	77 08       	sbc	r7, r7
 18e:	fa 01       	movw	r30, r20
 190:	80 81       	ld	r24, Z
 192:	91 81       	ldd	r25, Z+1	; 0x01
 194:	a2 81       	ldd	r26, Z+2	; 0x02
 196:	b3 81       	ldd	r27, Z+3	; 0x03
 198:	48 0e       	add	r4, r24
 19a:	59 1e       	adc	r5, r25
 19c:	6a 1e       	adc	r6, r26
 19e:	7b 1e       	adc	r7, r27
 1a0:	cb 01       	movw	r24, r22
 1a2:	0c 97       	sbiw	r24, 0x0c	; 12
 1a4:	d8 01       	movw	r26, r16
 1a6:	fb 01       	movw	r30, r22
 1a8:	1d 97       	sbiw	r26, 0x0d	; 13
 1aa:	22 91       	ld	r18, -Z
 1ac:	3c 91       	ld	r19, X
 1ae:	23 02       	muls	r18, r19
 1b0:	40 01       	movw	r8, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	09 2c       	mov	r0, r9
 1b6:	00 0c       	add	r0, r0
 1b8:	aa 08       	sbc	r10, r10
 1ba:	bb 08       	sbc	r11, r11
 1bc:	48 0c       	add	r4, r8
 1be:	59 1c       	adc	r5, r9
 1c0:	6a 1c       	adc	r6, r10
 1c2:	7b 1c       	adc	r7, r11
 1c4:	8e 17       	cp	r24, r30
 1c6:	9f 07       	cpc	r25, r31
 1c8:	79 f7       	brne	.-34     	; 0x1a8 <loop+0xd6>
 1ca:	cb 55       	subi	r28, 0x5B	; 91
 1cc:	dd 4f       	sbci	r29, 0xFD	; 253
 1ce:	a8 81       	ld	r26, Y
 1d0:	b9 81       	ldd	r27, Y+1	; 0x01
 1d2:	c5 5a       	subi	r28, 0xA5	; 165
 1d4:	d2 40       	sbci	r29, 0x02	; 2
 1d6:	ee 91       	ld	r30, -X
 1d8:	cb 55       	subi	r28, 0x5B	; 91
 1da:	dd 4f       	sbci	r29, 0xFD	; 253
 1dc:	b9 83       	std	Y+1, r27	; 0x01
 1de:	a8 83       	st	Y, r26
 1e0:	c5 5a       	subi	r28, 0xA5	; 165
 1e2:	d2 40       	sbci	r29, 0x02	; 2
 1e4:	d7 01       	movw	r26, r14
 1e6:	8e 91       	ld	r24, -X
 1e8:	7d 01       	movw	r14, r26
 1ea:	08 2e       	mov	r0, r24
 1ec:	00 0c       	add	r0, r0
 1ee:	99 0b       	sbc	r25, r25
 1f0:	8e 0f       	add	r24, r30
 1f2:	91 1d       	adc	r25, r1
 1f4:	e7 fd       	sbrc	r30, 7
 1f6:	9a 95       	dec	r25
 1f8:	09 2e       	mov	r0, r25
 1fa:	00 0c       	add	r0, r0
 1fc:	aa 0b       	sbc	r26, r26
 1fe:	bb 0b       	sbc	r27, r27
 200:	48 0e       	add	r4, r24
 202:	59 1e       	adc	r5, r25
 204:	6a 1e       	adc	r6, r26
 206:	7b 1e       	adc	r7, r27
 208:	fa 01       	movw	r30, r20
 20a:	40 82       	st	Z, r4
 20c:	51 82       	std	Z+1, r5	; 0x01
 20e:	62 82       	std	Z+2, r6	; 0x02
 210:	73 82       	std	Z+3, r7	; 0x03
 212:	da 94       	dec	r13
 214:	dd 20       	and	r13, r13
 216:	19 f0       	breq	.+6      	; 0x21e <loop+0x14c>
 218:	01 50       	subi	r16, 0x01	; 1
 21a:	11 09       	sbc	r17, r1
 21c:	08 c0       	rjmp	.+16     	; 0x22e <loop+0x15c>
 21e:	6d 50       	subi	r22, 0x0D	; 13
 220:	71 09       	sbc	r23, r1
 222:	04 5f       	subi	r16, 0xF4	; 244
 224:	1f 4f       	sbci	r17, 0xFF	; 255
 226:	0f 2e       	mov	r0, r31
 228:	fd e0       	ldi	r31, 0x0D	; 13
 22a:	df 2e       	mov	r13, r31
 22c:	f0 2d       	mov	r31, r0
 22e:	44 50       	subi	r20, 0x04	; 4
 230:	51 09       	sbc	r21, r1
 232:	42 15       	cp	r20, r2
 234:	53 05       	cpc	r21, r3
 236:	09 f0       	breq	.+2      	; 0x23a <loop+0x168>
 238:	9f cf       	rjmp	.-194    	; 0x178 <loop+0xa6>
 23a:	c9 55       	subi	r28, 0x59	; 89
 23c:	dd 4f       	sbci	r29, 0xFD	; 253
 23e:	28 81       	ld	r18, Y
 240:	39 81       	ldd	r19, Y+1	; 0x01
 242:	c7 5a       	subi	r28, 0xA7	; 167
 244:	d2 40       	sbci	r29, 0x02	; 2
 246:	21 50       	subi	r18, 0x01	; 1
 248:	31 09       	sbc	r19, r1
 24a:	c9 55       	subi	r28, 0x59	; 89
 24c:	dd 4f       	sbci	r29, 0xFD	; 253
 24e:	39 83       	std	Y+1, r19	; 0x01
 250:	28 83       	st	Y, r18
 252:	c7 5a       	subi	r28, 0xA7	; 167
 254:	d2 40       	sbci	r29, 0x02	; 2
 256:	23 2b       	or	r18, r19
 258:	09 f0       	breq	.+2      	; 0x25c <loop+0x18a>
 25a:	75 cf       	rjmp	.-278    	; 0x146 <loop+0x74>
 25c:	0e 94 3b 04 	call	0x876	; 0x876 <micros>
 260:	4b 01       	movw	r8, r22
 262:	5c 01       	movw	r10, r24
 264:	c7 55       	subi	r28, 0x57	; 87
 266:	dd 4f       	sbci	r29, 0xFD	; 253
 268:	28 81       	ld	r18, Y
 26a:	39 81       	ldd	r19, Y+1	; 0x01
 26c:	4a 81       	ldd	r20, Y+2	; 0x02
 26e:	5b 81       	ldd	r21, Y+3	; 0x03
 270:	c9 5a       	subi	r28, 0xA9	; 169
 272:	d2 40       	sbci	r29, 0x02	; 2
 274:	82 1a       	sub	r8, r18
 276:	93 0a       	sbc	r9, r19
 278:	a4 0a       	sbc	r10, r20
 27a:	b5 0a       	sbc	r11, r21
 27c:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <__data_end>
 280:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <__data_end+0x1>
 284:	02 80       	ldd	r0, Z+2	; 0x02
 286:	f3 81       	ldd	r31, Z+3	; 0x03
 288:	e0 2d       	mov	r30, r0
 28a:	42 e1       	ldi	r20, 0x12	; 18
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	62 e5       	ldi	r22, 0x52	; 82
 290:	72 e0       	ldi	r23, 0x02	; 2
 292:	86 e8       	ldi	r24, 0x86	; 134
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	09 95       	icall
 298:	2a e0       	ldi	r18, 0x0A	; 10
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b5 01       	movw	r22, r10
 29e:	a4 01       	movw	r20, r8
 2a0:	86 e8       	ldi	r24, 0x86	; 134
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN5Print7printlnEmi>
 2a8:	c4 55       	subi	r28, 0x54	; 84
 2aa:	dd 4f       	sbci	r29, 0xFD	; 253
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	bf 90       	pop	r11
 2c6:	af 90       	pop	r10
 2c8:	9f 90       	pop	r9
 2ca:	8f 90       	pop	r8
 2cc:	7f 90       	pop	r7
 2ce:	6f 90       	pop	r6
 2d0:	5f 90       	pop	r5
 2d2:	4f 90       	pop	r4
 2d4:	3f 90       	pop	r3
 2d6:	2f 90       	pop	r2
 2d8:	08 95       	ret

000002da <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2da:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2dc:	91 8d       	ldd	r25, Z+25	; 0x19
 2de:	22 8d       	ldd	r18, Z+26	; 0x1a
 2e0:	89 2f       	mov	r24, r25
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	80 5c       	subi	r24, 0xC0	; 192
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	82 1b       	sub	r24, r18
 2ea:	91 09       	sbc	r25, r1
}
 2ec:	8f 73       	andi	r24, 0x3F	; 63
 2ee:	99 27       	eor	r25, r25
 2f0:	08 95       	ret

000002f2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2f2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2f4:	91 8d       	ldd	r25, Z+25	; 0x19
 2f6:	82 8d       	ldd	r24, Z+26	; 0x1a
 2f8:	98 17       	cp	r25, r24
 2fa:	31 f0       	breq	.+12     	; 0x308 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2fc:	82 8d       	ldd	r24, Z+26	; 0x1a
 2fe:	e8 0f       	add	r30, r24
 300:	f1 1d       	adc	r31, r1
 302:	85 8d       	ldd	r24, Z+29	; 0x1d
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 30c:	08 95       	ret

0000030e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 30e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 310:	91 8d       	ldd	r25, Z+25	; 0x19
 312:	82 8d       	ldd	r24, Z+26	; 0x1a
 314:	98 17       	cp	r25, r24
 316:	61 f0       	breq	.+24     	; 0x330 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 318:	82 8d       	ldd	r24, Z+26	; 0x1a
 31a:	df 01       	movw	r26, r30
 31c:	a8 0f       	add	r26, r24
 31e:	b1 1d       	adc	r27, r1
 320:	5d 96       	adiw	r26, 0x1d	; 29
 322:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 324:	92 8d       	ldd	r25, Z+26	; 0x1a
 326:	9f 5f       	subi	r25, 0xFF	; 255
 328:	9f 73       	andi	r25, 0x3F	; 63
 32a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 334:	08 95       	ret

00000336 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 336:	fc 01       	movw	r30, r24
 338:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 33a:	44 8d       	ldd	r20, Z+28	; 0x1c
 33c:	25 2f       	mov	r18, r21
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	84 2f       	mov	r24, r20
 342:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 344:	82 1b       	sub	r24, r18
 346:	93 0b       	sbc	r25, r19
 348:	54 17       	cp	r21, r20
 34a:	10 f0       	brcs	.+4      	; 0x350 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 34c:	cf 96       	adiw	r24, 0x3f	; 63
 34e:	08 95       	ret
  return tail - head - 1;
 350:	01 97       	sbiw	r24, 0x01	; 1
}
 352:	08 95       	ret

00000354 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	92 e0       	ldi	r25, 0x02	; 2
 358:	89 2b       	or	r24, r25
 35a:	49 f0       	breq	.+18     	; 0x36e <_Z14serialEventRunv+0x1a>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	89 2b       	or	r24, r25
 362:	29 f0       	breq	.+10     	; 0x36e <_Z14serialEventRunv+0x1a>
 364:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_Z17Serial0_availablev>
 368:	81 11       	cpse	r24, r1
 36a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 36e:	08 95       	ret

00000370 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 370:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 372:	84 8d       	ldd	r24, Z+28	; 0x1c
 374:	df 01       	movw	r26, r30
 376:	a8 0f       	add	r26, r24
 378:	b1 1d       	adc	r27, r1
 37a:	a3 5a       	subi	r26, 0xA3	; 163
 37c:	bf 4f       	sbci	r27, 0xFF	; 255
 37e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 380:	84 8d       	ldd	r24, Z+28	; 0x1c
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	8f 73       	andi	r24, 0x3F	; 63
 388:	99 27       	eor	r25, r25
 38a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 38c:	a6 89       	ldd	r26, Z+22	; 0x16
 38e:	b7 89       	ldd	r27, Z+23	; 0x17
 390:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 392:	a0 89       	ldd	r26, Z+16	; 0x10
 394:	b1 89       	ldd	r27, Z+17	; 0x11
 396:	8c 91       	ld	r24, X
 398:	80 64       	ori	r24, 0x40	; 64
 39a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 39c:	93 8d       	ldd	r25, Z+27	; 0x1b
 39e:	84 8d       	ldd	r24, Z+28	; 0x1c
 3a0:	98 13       	cpse	r25, r24
 3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 3a4:	02 88       	ldd	r0, Z+18	; 0x12
 3a6:	f3 89       	ldd	r31, Z+19	; 0x13
 3a8:	e0 2d       	mov	r30, r0
 3aa:	80 81       	ld	r24, Z
 3ac:	8f 7d       	andi	r24, 0xDF	; 223
 3ae:	80 83       	st	Z, r24
 3b0:	08 95       	ret

000003b2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	ec 01       	movw	r28, r24
  _written = true;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 3c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3c8:	98 13       	cpse	r25, r24
 3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <_ZN14HardwareSerial5writeEh+0x24>
 3cc:	e8 89       	ldd	r30, Y+16	; 0x10
 3ce:	f9 89       	ldd	r31, Y+17	; 0x11
 3d0:	80 81       	ld	r24, Z
 3d2:	85 fd       	sbrc	r24, 5
 3d4:	24 c0       	rjmp	.+72     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3d6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 3d8:	0b 8d       	ldd	r16, Y+27	; 0x1b
 3da:	10 e0       	ldi	r17, 0x00	; 0
 3dc:	0f 5f       	subi	r16, 0xFF	; 255
 3de:	1f 4f       	sbci	r17, 0xFF	; 255
 3e0:	0f 73       	andi	r16, 0x3F	; 63
 3e2:	11 27       	eor	r17, r17
 3e4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 3e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3e8:	e8 12       	cpse	r14, r24
 3ea:	0c c0       	rjmp	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
    if (bit_is_clear(SREG, SREG_I)) {
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	07 fc       	sbrc	r0, 7
 3f0:	fa cf       	rjmp	.-12     	; 0x3e6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3f2:	e8 89       	ldd	r30, Y+16	; 0x10
 3f4:	f9 89       	ldd	r31, Y+17	; 0x11
 3f6:	80 81       	ld	r24, Z
 3f8:	85 ff       	sbrs	r24, 5
 3fa:	f5 cf       	rjmp	.-22     	; 0x3e6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3fc:	ce 01       	movw	r24, r28
 3fe:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 402:	f1 cf       	rjmp	.-30     	; 0x3e6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 404:	8b 8d       	ldd	r24, Y+27	; 0x1b
 406:	fe 01       	movw	r30, r28
 408:	e8 0f       	add	r30, r24
 40a:	f1 1d       	adc	r31, r1
 40c:	e3 5a       	subi	r30, 0xA3	; 163
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 412:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 414:	ea 89       	ldd	r30, Y+18	; 0x12
 416:	fb 89       	ldd	r31, Y+19	; 0x13
 418:	80 81       	ld	r24, Z
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 41e:	ee 89       	ldd	r30, Y+22	; 0x16
 420:	ff 89       	ldd	r31, Y+23	; 0x17
 422:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 424:	e8 89       	ldd	r30, Y+16	; 0x10
 426:	f9 89       	ldd	r31, Y+17	; 0x11
 428:	80 81       	ld	r24, Z
 42a:	80 64       	ori	r24, 0x40	; 64
 42c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	08 95       	ret

00000440 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 446:	88 8d       	ldd	r24, Y+24	; 0x18
 448:	88 23       	and	r24, r24
 44a:	c9 f0       	breq	.+50     	; 0x47e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 44c:	ea 89       	ldd	r30, Y+18	; 0x12
 44e:	fb 89       	ldd	r31, Y+19	; 0x13
 450:	80 81       	ld	r24, Z
 452:	85 fd       	sbrc	r24, 5
 454:	05 c0       	rjmp	.+10     	; 0x460 <_ZN14HardwareSerial5flushEv+0x20>
 456:	a8 89       	ldd	r26, Y+16	; 0x10
 458:	b9 89       	ldd	r27, Y+17	; 0x11
 45a:	8c 91       	ld	r24, X
 45c:	86 fd       	sbrc	r24, 6
 45e:	0f c0       	rjmp	.+30     	; 0x47e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	07 fc       	sbrc	r0, 7
 464:	f5 cf       	rjmp	.-22     	; 0x450 <_ZN14HardwareSerial5flushEv+0x10>
 466:	80 81       	ld	r24, Z
 468:	85 ff       	sbrs	r24, 5
 46a:	f2 cf       	rjmp	.-28     	; 0x450 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 46c:	a8 89       	ldd	r26, Y+16	; 0x10
 46e:	b9 89       	ldd	r27, Y+17	; 0x11
 470:	8c 91       	ld	r24, X
 472:	85 ff       	sbrs	r24, 5
 474:	ed cf       	rjmp	.-38     	; 0x450 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 476:	ce 01       	movw	r24, r28
 478:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 47c:	e7 cf       	rjmp	.-50     	; 0x44c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 484:	cf 92       	push	r12
 486:	df 92       	push	r13
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	ec 01       	movw	r28, r24
 494:	6a 01       	movw	r12, r20
 496:	7b 01       	movw	r14, r22
 498:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 49a:	e8 89       	ldd	r30, Y+16	; 0x10
 49c:	f9 89       	ldd	r31, Y+17	; 0x11
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4a2:	41 15       	cp	r20, r1
 4a4:	51 4e       	sbci	r21, 0xE1	; 225
 4a6:	61 05       	cpc	r22, r1
 4a8:	71 05       	cpc	r23, r1
 4aa:	b1 f0       	breq	.+44     	; 0x4d8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	79 e0       	ldi	r23, 0x09	; 9
 4b0:	8d e3       	ldi	r24, 0x3D	; 61
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	a7 01       	movw	r20, r14
 4b6:	96 01       	movw	r18, r12
 4b8:	0e 94 9b 04 	call	0x936	; 0x936 <__udivmodsi4>
 4bc:	da 01       	movw	r26, r20
 4be:	c9 01       	movw	r24, r18
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	a1 09       	sbc	r26, r1
 4c4:	b1 09       	sbc	r27, r1
 4c6:	b6 95       	lsr	r27
 4c8:	a7 95       	ror	r26
 4ca:	97 95       	ror	r25
 4cc:	87 95       	ror	r24
 4ce:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4d0:	21 15       	cp	r18, r1
 4d2:	80 e1       	ldi	r24, 0x10	; 16
 4d4:	38 07       	cpc	r19, r24
 4d6:	a8 f0       	brcs	.+42     	; 0x502 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 4d8:	e8 89       	ldd	r30, Y+16	; 0x10
 4da:	f9 89       	ldd	r31, Y+17	; 0x11
 4dc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 4de:	60 e8       	ldi	r22, 0x80	; 128
 4e0:	74 e8       	ldi	r23, 0x84	; 132
 4e2:	8e e1       	ldi	r24, 0x1E	; 30
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	a7 01       	movw	r20, r14
 4e8:	96 01       	movw	r18, r12
 4ea:	0e 94 9b 04 	call	0x936	; 0x936 <__udivmodsi4>
 4ee:	da 01       	movw	r26, r20
 4f0:	c9 01       	movw	r24, r18
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	a1 09       	sbc	r26, r1
 4f6:	b1 09       	sbc	r27, r1
 4f8:	b6 95       	lsr	r27
 4fa:	a7 95       	ror	r26
 4fc:	97 95       	ror	r25
 4fe:	87 95       	ror	r24
 500:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 502:	ec 85       	ldd	r30, Y+12	; 0x0c
 504:	fd 85       	ldd	r31, Y+13	; 0x0d
 506:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 508:	ee 85       	ldd	r30, Y+14	; 0x0e
 50a:	ff 85       	ldd	r31, Y+15	; 0x0f
 50c:	20 83       	st	Z, r18

  _written = false;
 50e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 510:	ec 89       	ldd	r30, Y+20	; 0x14
 512:	fd 89       	ldd	r31, Y+21	; 0x15
 514:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 516:	ea 89       	ldd	r30, Y+18	; 0x12
 518:	fb 89       	ldd	r31, Y+19	; 0x13
 51a:	80 81       	ld	r24, Z
 51c:	80 61       	ori	r24, 0x10	; 16
 51e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 520:	ea 89       	ldd	r30, Y+18	; 0x12
 522:	fb 89       	ldd	r31, Y+19	; 0x13
 524:	80 81       	ld	r24, Z
 526:	88 60       	ori	r24, 0x08	; 8
 528:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 52a:	ea 89       	ldd	r30, Y+18	; 0x12
 52c:	fb 89       	ldd	r31, Y+19	; 0x13
 52e:	80 81       	ld	r24, Z
 530:	80 68       	ori	r24, 0x80	; 128
 532:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 534:	ea 89       	ldd	r30, Y+18	; 0x12
 536:	fb 89       	ldd	r31, Y+19	; 0x13
 538:	80 81       	ld	r24, Z
 53a:	8f 7d       	andi	r24, 0xDF	; 223
 53c:	80 83       	st	Z, r24
}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	ff 90       	pop	r15
 546:	ef 90       	pop	r14
 548:	df 90       	pop	r13
 54a:	cf 90       	pop	r12
 54c:	08 95       	ret

0000054e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 54e:	1f 92       	push	r1
 550:	0f 92       	push	r0
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	0f 92       	push	r0
 556:	11 24       	eor	r1, r1
 558:	2f 93       	push	r18
 55a:	8f 93       	push	r24
 55c:	9f 93       	push	r25
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 562:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <__data_end+0x10>
 566:	f0 91 97 02 	lds	r31, 0x0297	; 0x800297 <__data_end+0x11>
 56a:	80 81       	ld	r24, Z
 56c:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end+0x16>
 570:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <__data_end+0x17>
 574:	82 fd       	sbrc	r24, 2
 576:	12 c0       	rjmp	.+36     	; 0x59c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 578:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 57a:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <__data_end+0x19>
 57e:	8f 5f       	subi	r24, 0xFF	; 255
 580:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 582:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__data_end+0x1a>
 586:	82 17       	cp	r24, r18
 588:	51 f0       	breq	.+20     	; 0x59e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 58a:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__data_end+0x19>
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	ea 57       	subi	r30, 0x7A	; 122
 592:	fd 4f       	sbci	r31, 0xFD	; 253
 594:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 596:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <__data_end+0x19>
 59a:	01 c0       	rjmp	.+2      	; 0x59e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 59c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	2f 91       	pop	r18
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 93       	push	r18
 5be:	3f 93       	push	r19
 5c0:	4f 93       	push	r20
 5c2:	5f 93       	push	r21
 5c4:	6f 93       	push	r22
 5c6:	7f 93       	push	r23
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	af 93       	push	r26
 5ce:	bf 93       	push	r27
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 5d4:	86 e8       	ldi	r24, 0x86	; 134
 5d6:	92 e0       	ldi	r25, 0x02	; 2
 5d8:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 5fe:	86 e8       	ldi	r24, 0x86	; 134
 600:	92 e0       	ldi	r25, 0x02	; 2
 602:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN14HardwareSerial9availableEv>
 606:	21 e0       	ldi	r18, 0x01	; 1
 608:	89 2b       	or	r24, r25
 60a:	09 f4       	brne	.+2      	; 0x60e <_Z17Serial0_availablev+0x10>
 60c:	20 e0       	ldi	r18, 0x00	; 0
}
 60e:	82 2f       	mov	r24, r18
 610:	08 95       	ret

00000612 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 612:	e6 e8       	ldi	r30, 0x86	; 134
 614:	f2 e0       	ldi	r31, 0x02	; 2
 616:	13 82       	std	Z+3, r1	; 0x03
 618:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 61a:	88 ee       	ldi	r24, 0xE8	; 232
 61c:	93 e0       	ldi	r25, 0x03	; 3
 61e:	a0 e0       	ldi	r26, 0x00	; 0
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	84 83       	std	Z+4, r24	; 0x04
 624:	95 83       	std	Z+5, r25	; 0x05
 626:	a6 83       	std	Z+6, r26	; 0x06
 628:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 62a:	89 e6       	ldi	r24, 0x69	; 105
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	91 83       	std	Z+1, r25	; 0x01
 630:	80 83       	st	Z, r24
 632:	85 ec       	ldi	r24, 0xC5	; 197
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	95 87       	std	Z+13, r25	; 0x0d
 638:	84 87       	std	Z+12, r24	; 0x0c
 63a:	84 ec       	ldi	r24, 0xC4	; 196
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	97 87       	std	Z+15, r25	; 0x0f
 640:	86 87       	std	Z+14, r24	; 0x0e
 642:	80 ec       	ldi	r24, 0xC0	; 192
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	91 8b       	std	Z+17, r25	; 0x11
 648:	80 8b       	std	Z+16, r24	; 0x10
 64a:	81 ec       	ldi	r24, 0xC1	; 193
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	93 8b       	std	Z+19, r25	; 0x13
 650:	82 8b       	std	Z+18, r24	; 0x12
 652:	82 ec       	ldi	r24, 0xC2	; 194
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	95 8b       	std	Z+21, r25	; 0x15
 658:	84 8b       	std	Z+20, r24	; 0x14
 65a:	86 ec       	ldi	r24, 0xC6	; 198
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	97 8b       	std	Z+23, r25	; 0x17
 660:	86 8b       	std	Z+22, r24	; 0x16
 662:	11 8e       	std	Z+25, r1	; 0x19
 664:	12 8e       	std	Z+26, r1	; 0x1a
 666:	13 8e       	std	Z+27, r1	; 0x1b
 668:	14 8e       	std	Z+28, r1	; 0x1c
 66a:	08 95       	ret

0000066c <initVariant>:
 66c:	08 95       	ret

0000066e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 66e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <init>

	initVariant();
 672:	0e 94 36 03 	call	0x66c	; 0x66c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 676:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 67a:	ca ea       	ldi	r28, 0xAA	; 170
 67c:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 67e:	0e 94 69 00 	call	0xd2	; 0xd2 <loop>
		if (serialEventRun) serialEventRun();
 682:	20 97       	sbiw	r28, 0x00	; 0
 684:	e1 f3       	breq	.-8      	; 0x67e <main+0x10>
 686:	0e 94 aa 01 	call	0x354	; 0x354 <_Z14serialEventRunv>
 68a:	f9 cf       	rjmp	.-14     	; 0x67e <main+0x10>

0000068c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 68c:	cf 92       	push	r12
 68e:	df 92       	push	r13
 690:	ef 92       	push	r14
 692:	ff 92       	push	r15
 694:	0f 93       	push	r16
 696:	1f 93       	push	r17
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	6c 01       	movw	r12, r24
 69e:	7a 01       	movw	r14, r20
 6a0:	8b 01       	movw	r16, r22
 6a2:	c0 e0       	ldi	r28, 0x00	; 0
 6a4:	d0 e0       	ldi	r29, 0x00	; 0
 6a6:	ce 15       	cp	r28, r14
 6a8:	df 05       	cpc	r29, r15
 6aa:	81 f0       	breq	.+32     	; 0x6cc <_ZN5Print5writeEPKhj+0x40>
 6ac:	d8 01       	movw	r26, r16
 6ae:	6d 91       	ld	r22, X+
 6b0:	8d 01       	movw	r16, r26
 6b2:	d6 01       	movw	r26, r12
 6b4:	ed 91       	ld	r30, X+
 6b6:	fc 91       	ld	r31, X
 6b8:	01 90       	ld	r0, Z+
 6ba:	f0 81       	ld	r31, Z
 6bc:	e0 2d       	mov	r30, r0
 6be:	c6 01       	movw	r24, r12
 6c0:	09 95       	icall
 6c2:	89 2b       	or	r24, r25
 6c4:	11 f0       	breq	.+4      	; 0x6ca <_ZN5Print5writeEPKhj+0x3e>
 6c6:	21 96       	adiw	r28, 0x01	; 1
 6c8:	ee cf       	rjmp	.-36     	; 0x6a6 <_ZN5Print5writeEPKhj+0x1a>
 6ca:	7e 01       	movw	r14, r28
 6cc:	c7 01       	movw	r24, r14
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	ff 90       	pop	r15
 6d8:	ef 90       	pop	r14
 6da:	df 90       	pop	r13
 6dc:	cf 90       	pop	r12
 6de:	08 95       	ret

000006e0 <_ZN5Print5writeEPKc>:
 6e0:	61 15       	cp	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	79 f0       	breq	.+30     	; 0x704 <_ZN5Print5writeEPKc+0x24>
 6e6:	fb 01       	movw	r30, r22
 6e8:	01 90       	ld	r0, Z+
 6ea:	00 20       	and	r0, r0
 6ec:	e9 f7       	brne	.-6      	; 0x6e8 <_ZN5Print5writeEPKc+0x8>
 6ee:	31 97       	sbiw	r30, 0x01	; 1
 6f0:	af 01       	movw	r20, r30
 6f2:	46 1b       	sub	r20, r22
 6f4:	57 0b       	sbc	r21, r23
 6f6:	dc 01       	movw	r26, r24
 6f8:	ed 91       	ld	r30, X+
 6fa:	fc 91       	ld	r31, X
 6fc:	02 80       	ldd	r0, Z+2	; 0x02
 6fe:	f3 81       	ldd	r31, Z+3	; 0x03
 700:	e0 2d       	mov	r30, r0
 702:	09 94       	ijmp
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	08 95       	ret

0000070a <_ZN5Print7printlnEv>:
 70a:	67 e7       	ldi	r22, 0x77	; 119
 70c:	72 e0       	ldi	r23, 0x02	; 2
 70e:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <_ZN5Print5writeEPKc>

00000712 <_ZN5Print11printNumberEmh>:
 712:	8f 92       	push	r8
 714:	9f 92       	push	r9
 716:	af 92       	push	r10
 718:	bf 92       	push	r11
 71a:	ef 92       	push	r14
 71c:	ff 92       	push	r15
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	a1 97       	sbiw	r28, 0x21	; 33
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 736:	7c 01       	movw	r14, r24
 738:	fa 01       	movw	r30, r20
 73a:	cb 01       	movw	r24, r22
 73c:	19 a2       	std	Y+33, r1	; 0x21
 73e:	22 30       	cpi	r18, 0x02	; 2
 740:	08 f4       	brcc	.+2      	; 0x744 <_ZN5Print11printNumberEmh+0x32>
 742:	2a e0       	ldi	r18, 0x0A	; 10
 744:	8e 01       	movw	r16, r28
 746:	0f 5d       	subi	r16, 0xDF	; 223
 748:	1f 4f       	sbci	r17, 0xFF	; 255
 74a:	82 2e       	mov	r8, r18
 74c:	91 2c       	mov	r9, r1
 74e:	a1 2c       	mov	r10, r1
 750:	b1 2c       	mov	r11, r1
 752:	bf 01       	movw	r22, r30
 754:	a5 01       	movw	r20, r10
 756:	94 01       	movw	r18, r8
 758:	0e 94 9b 04 	call	0x936	; 0x936 <__udivmodsi4>
 75c:	f9 01       	movw	r30, r18
 75e:	ca 01       	movw	r24, r20
 760:	01 50       	subi	r16, 0x01	; 1
 762:	11 09       	sbc	r17, r1
 764:	6a 30       	cpi	r22, 0x0A	; 10
 766:	10 f4       	brcc	.+4      	; 0x76c <_ZN5Print11printNumberEmh+0x5a>
 768:	60 5d       	subi	r22, 0xD0	; 208
 76a:	01 c0       	rjmp	.+2      	; 0x76e <_ZN5Print11printNumberEmh+0x5c>
 76c:	69 5c       	subi	r22, 0xC9	; 201
 76e:	d8 01       	movw	r26, r16
 770:	6c 93       	st	X, r22
 772:	23 2b       	or	r18, r19
 774:	24 2b       	or	r18, r20
 776:	25 2b       	or	r18, r21
 778:	61 f7       	brne	.-40     	; 0x752 <_ZN5Print11printNumberEmh+0x40>
 77a:	b8 01       	movw	r22, r16
 77c:	c7 01       	movw	r24, r14
 77e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN5Print5writeEPKc>
 782:	a1 96       	adiw	r28, 0x21	; 33
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	f8 94       	cli
 788:	de bf       	out	0x3e, r29	; 62
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	cd bf       	out	0x3d, r28	; 61
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	1f 91       	pop	r17
 794:	0f 91       	pop	r16
 796:	ff 90       	pop	r15
 798:	ef 90       	pop	r14
 79a:	bf 90       	pop	r11
 79c:	af 90       	pop	r10
 79e:	9f 90       	pop	r9
 7a0:	8f 90       	pop	r8
 7a2:	08 95       	ret

000007a4 <_ZN5Print5printEmi>:
 7a4:	21 15       	cp	r18, r1
 7a6:	31 05       	cpc	r19, r1
 7a8:	41 f4       	brne	.+16     	; 0x7ba <_ZN5Print5printEmi+0x16>
 7aa:	dc 01       	movw	r26, r24
 7ac:	ed 91       	ld	r30, X+
 7ae:	fc 91       	ld	r31, X
 7b0:	01 90       	ld	r0, Z+
 7b2:	f0 81       	ld	r31, Z
 7b4:	e0 2d       	mov	r30, r0
 7b6:	64 2f       	mov	r22, r20
 7b8:	09 94       	ijmp
 7ba:	0c 94 89 03 	jmp	0x712	; 0x712 <_ZN5Print11printNumberEmh>

000007be <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 7c8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <_ZN5Print5printEmi>
 7cc:	8c 01       	movw	r16, r24
  n += println();
 7ce:	ce 01       	movw	r24, r28
 7d0:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN5Print7printlnEv>
  return n;
}
 7d4:	80 0f       	add	r24, r16
 7d6:	91 1f       	adc	r25, r17
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	08 95       	ret

000007e2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 7e2:	1f 92       	push	r1
 7e4:	0f 92       	push	r0
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	0f 92       	push	r0
 7ea:	11 24       	eor	r1, r1
 7ec:	2f 93       	push	r18
 7ee:	3f 93       	push	r19
 7f0:	8f 93       	push	r24
 7f2:	9f 93       	push	r25
 7f4:	af 93       	push	r26
 7f6:	bf 93       	push	r27
 7f8:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <timer0_millis>
 7fc:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <timer0_millis+0x1>
 800:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <timer0_millis+0x2>
 804:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <timer0_millis+0x3>
 808:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <timer0_fract>
 80c:	23 e0       	ldi	r18, 0x03	; 3
 80e:	23 0f       	add	r18, r19
 810:	2d 37       	cpi	r18, 0x7D	; 125
 812:	20 f4       	brcc	.+8      	; 0x81c <__vector_16+0x3a>
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	a1 1d       	adc	r26, r1
 818:	b1 1d       	adc	r27, r1
 81a:	05 c0       	rjmp	.+10     	; 0x826 <__vector_16+0x44>
 81c:	26 e8       	ldi	r18, 0x86	; 134
 81e:	23 0f       	add	r18, r19
 820:	02 96       	adiw	r24, 0x02	; 2
 822:	a1 1d       	adc	r26, r1
 824:	b1 1d       	adc	r27, r1
 826:	20 93 23 03 	sts	0x0323, r18	; 0x800323 <timer0_fract>
 82a:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <timer0_millis>
 82e:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <timer0_millis+0x1>
 832:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <timer0_millis+0x2>
 836:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <timer0_millis+0x3>
 83a:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 83e:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 842:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 846:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 84a:	01 96       	adiw	r24, 0x01	; 1
 84c:	a1 1d       	adc	r26, r1
 84e:	b1 1d       	adc	r27, r1
 850:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <timer0_overflow_count>
 854:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <timer0_overflow_count+0x1>
 858:	a0 93 2a 03 	sts	0x032A, r26	; 0x80032a <timer0_overflow_count+0x2>
 85c:	b0 93 2b 03 	sts	0x032B, r27	; 0x80032b <timer0_overflow_count+0x3>
 860:	bf 91       	pop	r27
 862:	af 91       	pop	r26
 864:	9f 91       	pop	r25
 866:	8f 91       	pop	r24
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <micros>:
 876:	3f b7       	in	r19, 0x3f	; 63
 878:	f8 94       	cli
 87a:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 87e:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 882:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 886:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 88a:	26 b5       	in	r18, 0x26	; 38
 88c:	a8 9b       	sbis	0x15, 0	; 21
 88e:	05 c0       	rjmp	.+10     	; 0x89a <micros+0x24>
 890:	2f 3f       	cpi	r18, 0xFF	; 255
 892:	19 f0       	breq	.+6      	; 0x89a <micros+0x24>
 894:	01 96       	adiw	r24, 0x01	; 1
 896:	a1 1d       	adc	r26, r1
 898:	b1 1d       	adc	r27, r1
 89a:	3f bf       	out	0x3f, r19	; 63
 89c:	ba 2f       	mov	r27, r26
 89e:	a9 2f       	mov	r26, r25
 8a0:	98 2f       	mov	r25, r24
 8a2:	88 27       	eor	r24, r24
 8a4:	82 0f       	add	r24, r18
 8a6:	91 1d       	adc	r25, r1
 8a8:	a1 1d       	adc	r26, r1
 8aa:	b1 1d       	adc	r27, r1
 8ac:	bc 01       	movw	r22, r24
 8ae:	cd 01       	movw	r24, r26
 8b0:	42 e0       	ldi	r20, 0x02	; 2
 8b2:	66 0f       	add	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	4a 95       	dec	r20
 8bc:	d1 f7       	brne	.-12     	; 0x8b2 <micros+0x3c>
 8be:	08 95       	ret

000008c0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 8c0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 8c2:	84 b5       	in	r24, 0x24	; 36
 8c4:	82 60       	ori	r24, 0x02	; 2
 8c6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 8c8:	84 b5       	in	r24, 0x24	; 36
 8ca:	81 60       	ori	r24, 0x01	; 1
 8cc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 8ce:	85 b5       	in	r24, 0x25	; 37
 8d0:	82 60       	ori	r24, 0x02	; 2
 8d2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 8d4:	85 b5       	in	r24, 0x25	; 37
 8d6:	81 60       	ori	r24, 0x01	; 1
 8d8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8da:	ee e6       	ldi	r30, 0x6E	; 110
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	81 60       	ori	r24, 0x01	; 1
 8e2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8e4:	e1 e8       	ldi	r30, 0x81	; 129
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8ea:	80 81       	ld	r24, Z
 8ec:	82 60       	ori	r24, 0x02	; 2
 8ee:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8f0:	80 81       	ld	r24, Z
 8f2:	81 60       	ori	r24, 0x01	; 1
 8f4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8f6:	e0 e8       	ldi	r30, 0x80	; 128
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	81 60       	ori	r24, 0x01	; 1
 8fe:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 900:	e1 eb       	ldi	r30, 0xB1	; 177
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	84 60       	ori	r24, 0x04	; 4
 908:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 90a:	e0 eb       	ldi	r30, 0xB0	; 176
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	81 60       	ori	r24, 0x01	; 1
 912:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 914:	ea e7       	ldi	r30, 0x7A	; 122
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	84 60       	ori	r24, 0x04	; 4
 91c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 91e:	80 81       	ld	r24, Z
 920:	82 60       	ori	r24, 0x02	; 2
 922:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 924:	80 81       	ld	r24, Z
 926:	81 60       	ori	r24, 0x01	; 1
 928:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 92a:	80 81       	ld	r24, Z
 92c:	80 68       	ori	r24, 0x80	; 128
 92e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 930:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 934:	08 95       	ret

00000936 <__udivmodsi4>:
 936:	a1 e2       	ldi	r26, 0x21	; 33
 938:	1a 2e       	mov	r1, r26
 93a:	aa 1b       	sub	r26, r26
 93c:	bb 1b       	sub	r27, r27
 93e:	fd 01       	movw	r30, r26
 940:	0d c0       	rjmp	.+26     	; 0x95c <__udivmodsi4_ep>

00000942 <__udivmodsi4_loop>:
 942:	aa 1f       	adc	r26, r26
 944:	bb 1f       	adc	r27, r27
 946:	ee 1f       	adc	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	a2 17       	cp	r26, r18
 94c:	b3 07       	cpc	r27, r19
 94e:	e4 07       	cpc	r30, r20
 950:	f5 07       	cpc	r31, r21
 952:	20 f0       	brcs	.+8      	; 0x95c <__udivmodsi4_ep>
 954:	a2 1b       	sub	r26, r18
 956:	b3 0b       	sbc	r27, r19
 958:	e4 0b       	sbc	r30, r20
 95a:	f5 0b       	sbc	r31, r21

0000095c <__udivmodsi4_ep>:
 95c:	66 1f       	adc	r22, r22
 95e:	77 1f       	adc	r23, r23
 960:	88 1f       	adc	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	1a 94       	dec	r1
 966:	69 f7       	brne	.-38     	; 0x942 <__udivmodsi4_loop>
 968:	60 95       	com	r22
 96a:	70 95       	com	r23
 96c:	80 95       	com	r24
 96e:	90 95       	com	r25
 970:	9b 01       	movw	r18, r22
 972:	ac 01       	movw	r20, r24
 974:	bd 01       	movw	r22, r26
 976:	cf 01       	movw	r24, r30
 978:	08 95       	ret

0000097a <__tablejump2__>:
 97a:	ee 0f       	add	r30, r30
 97c:	ff 1f       	adc	r31, r31
 97e:	05 90       	lpm	r0, Z+
 980:	f4 91       	lpm	r31, Z
 982:	e0 2d       	mov	r30, r0
 984:	09 94       	ijmp

00000986 <_exit>:
 986:	f8 94       	cli

00000988 <__stop_program>:
 988:	ff cf       	rjmp	.-2      	; 0x988 <__stop_program>
