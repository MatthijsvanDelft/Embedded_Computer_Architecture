
Assignment_1.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  00000a80  00000b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800286  00800286  00000c9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d94  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000148f  00000000  00000000  00007cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001268  00000000  00000000  00009157  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b4  00000000  00000000  0000a3c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001df8  00000000  00000000  0000aa74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002546  00000000  00000000  0000c86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000edb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_18>
  4c:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	35 03       	mulsu	r19, r21

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 e8       	ldi	r30, 0x80	; 128
  7e:	fa e0       	ldi	r31, 0x0A	; 10
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 38       	cpi	r26, 0x86	; 134
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	23 e0       	ldi	r18, 0x03	; 3
  8e:	a6 e8       	ldi	r26, 0x86	; 134
  90:	b2 e0       	ldi	r27, 0x02	; 2
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ac 32       	cpi	r26, 0x2C	; 44
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 38 05 	call	0xa70	; 0xa70 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <main>
  b6:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	55 e2       	ldi	r21, 0x25	; 37
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN14HardwareSerial5beginEmh>
  d0:	08 95       	ret

000000d2 <loop>:
  d2:	2f 92       	push	r2
  d4:	3f 92       	push	r3
  d6:	4f 92       	push	r4
  d8:	5f 92       	push	r5
  da:	6f 92       	push	r6
  dc:	7f 92       	push	r7
  de:	8f 92       	push	r8
  e0:	9f 92       	push	r9
  e2:	af 92       	push	r10
  e4:	bf 92       	push	r11
  e6:	cf 92       	push	r12
  e8:	df 92       	push	r13
  ea:	ef 92       	push	r14
  ec:	ff 92       	push	r15
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	ca 5a       	subi	r28, 0xAA	; 170
  fc:	d2 40       	sbci	r29, 0x02	; 2
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
 108:	fe 01       	movw	r30, r28
 10a:	31 96       	adiw	r30, 0x01	; 1
 10c:	84 ea       	ldi	r24, 0xA4	; 164
 10e:	92 e0       	ldi	r25, 0x02	; 2
 110:	df 01       	movw	r26, r30
 112:	8c 01       	movw	r16, r24
 114:	1d 92       	st	X+, r1
 116:	01 50       	subi	r16, 0x01	; 1
 118:	10 40       	sbci	r17, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <loop+0x42>
 11c:	0e 94 b6 04 	call	0x96c	; 0x96c <micros>
 120:	cb 55       	subi	r28, 0x5B	; 91
 122:	dd 4f       	sbci	r29, 0xFD	; 253
 124:	68 83       	st	Y, r22
 126:	79 83       	std	Y+1, r23	; 0x01
 128:	8a 83       	std	Y+2, r24	; 0x02
 12a:	9b 83       	std	Y+3, r25	; 0x03
 12c:	c5 5a       	subi	r28, 0xA5	; 165
 12e:	d2 40       	sbci	r29, 0x02	; 2
 130:	0f 2e       	mov	r0, r31
 132:	f2 e5       	ldi	r31, 0x52	; 82
 134:	cf 2e       	mov	r12, r31
 136:	f2 e0       	ldi	r31, 0x02	; 2
 138:	df 2e       	mov	r13, r31
 13a:	f0 2d       	mov	r31, r0
 13c:	0f 2e       	mov	r0, r31
 13e:	f9 ea       	ldi	r31, 0xA9	; 169
 140:	af 2e       	mov	r10, r31
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	bf 2e       	mov	r11, r31
 146:	f0 2d       	mov	r31, r0
 148:	0f 2e       	mov	r0, r31
 14a:	fd e0       	ldi	r31, 0x0D	; 13
 14c:	7f 2e       	mov	r7, r31
 14e:	f0 2d       	mov	r31, r0
 150:	be 01       	movw	r22, r28
 152:	6f 55       	subi	r22, 0x5F	; 95
 154:	7d 4f       	sbci	r23, 0xFD	; 253
 156:	0f 2e       	mov	r0, r31
 158:	f8 ea       	ldi	r31, 0xA8	; 168
 15a:	ef 2e       	mov	r14, r31
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	ff 2e       	mov	r15, r31
 160:	f0 2d       	mov	r31, r0
 162:	21 e5       	ldi	r18, 0x51	; 81
 164:	32 e0       	ldi	r19, 0x02	; 2
 166:	c7 55       	subi	r28, 0x57	; 87
 168:	dd 4f       	sbci	r29, 0xFD	; 253
 16a:	39 83       	std	Y+1, r19	; 0x01
 16c:	28 83       	st	Y, r18
 16e:	c9 5a       	subi	r28, 0xA9	; 169
 170:	d2 40       	sbci	r29, 0x02	; 2
 172:	4e 01       	movw	r8, r28
 174:	33 e0       	ldi	r19, 0x03	; 3
 176:	83 1a       	sub	r8, r19
 178:	91 08       	sbc	r9, r1
 17a:	c7 55       	subi	r28, 0x57	; 87
 17c:	dd 4f       	sbci	r29, 0xFD	; 253
 17e:	a8 81       	ld	r26, Y
 180:	b9 81       	ldd	r27, Y+1	; 0x01
 182:	c9 5a       	subi	r28, 0xA9	; 169
 184:	d2 40       	sbci	r29, 0x02	; 2
 186:	2c 91       	ld	r18, X
 188:	f7 01       	movw	r30, r14
 18a:	80 81       	ld	r24, Z
 18c:	28 02       	muls	r18, r24
 18e:	90 01       	movw	r18, r0
 190:	11 24       	eor	r1, r1
 192:	fd 01       	movw	r30, r26
 194:	32 97       	sbiw	r30, 0x02	; 2
 196:	d7 01       	movw	r26, r14
 198:	5a 97       	sbiw	r26, 0x1a	; 26
 19a:	c7 55       	subi	r28, 0x57	; 87
 19c:	dd 4f       	sbci	r29, 0xFD	; 253
 19e:	48 81       	ld	r20, Y
 1a0:	59 81       	ldd	r21, Y+1	; 0x01
 1a2:	c9 5a       	subi	r28, 0xA9	; 169
 1a4:	d2 40       	sbci	r29, 0x02	; 2
 1a6:	4e 50       	subi	r20, 0x0E	; 14
 1a8:	51 09       	sbc	r21, r1
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	51 80       	ldd	r5, Z+1	; 0x01
 1b0:	1d 96       	adiw	r26, 0x0d	; 13
 1b2:	6c 90       	ld	r6, X
 1b4:	1d 97       	sbiw	r26, 0x0d	; 13
 1b6:	05 2d       	mov	r16, r5
 1b8:	16 2d       	mov	r17, r6
 1ba:	01 02       	muls	r16, r17
 1bc:	20 0d       	add	r18, r0
 1be:	31 1d       	adc	r19, r1
 1c0:	11 24       	eor	r1, r1
 1c2:	50 80       	ld	r5, Z
 1c4:	6c 90       	ld	r6, X
 1c6:	05 2d       	mov	r16, r5
 1c8:	16 2d       	mov	r17, r6
 1ca:	01 02       	muls	r16, r17
 1cc:	80 0d       	add	r24, r0
 1ce:	91 1d       	adc	r25, r1
 1d0:	11 24       	eor	r1, r1
 1d2:	32 97       	sbiw	r30, 0x02	; 2
 1d4:	5a 97       	sbiw	r26, 0x1a	; 26
 1d6:	4e 17       	cp	r20, r30
 1d8:	5f 07       	cpc	r21, r31
 1da:	49 f7       	brne	.-46     	; 0x1ae <loop+0xdc>
 1dc:	d6 01       	movw	r26, r12
 1de:	ee 91       	ld	r30, -X
 1e0:	6d 01       	movw	r12, r26
 1e2:	d5 01       	movw	r26, r10
 1e4:	4e 91       	ld	r20, -X
 1e6:	5d 01       	movw	r10, r26
 1e8:	04 2e       	mov	r0, r20
 1ea:	00 0c       	add	r0, r0
 1ec:	55 0b       	sbc	r21, r21
 1ee:	4e 0f       	add	r20, r30
 1f0:	51 1d       	adc	r21, r1
 1f2:	e7 fd       	sbrc	r30, 7
 1f4:	5a 95       	dec	r21
 1f6:	82 0f       	add	r24, r18
 1f8:	93 1f       	adc	r25, r19
 1fa:	84 0f       	add	r24, r20
 1fc:	95 1f       	adc	r25, r21
 1fe:	fb 01       	movw	r30, r22
 200:	20 81       	ld	r18, Z
 202:	31 81       	ldd	r19, Z+1	; 0x01
 204:	42 81       	ldd	r20, Z+2	; 0x02
 206:	53 81       	ldd	r21, Z+3	; 0x03
 208:	19 01       	movw	r2, r18
 20a:	2a 01       	movw	r4, r20
 20c:	28 0e       	add	r2, r24
 20e:	39 1e       	adc	r3, r25
 210:	41 1c       	adc	r4, r1
 212:	51 1c       	adc	r5, r1
 214:	20 82       	st	Z, r2
 216:	31 82       	std	Z+1, r3	; 0x01
 218:	42 82       	std	Z+2, r4	; 0x02
 21a:	53 82       	std	Z+3, r5	; 0x03
 21c:	7a 94       	dec	r7
 21e:	77 20       	and	r7, r7
 220:	21 f0       	breq	.+8      	; 0x22a <loop+0x158>
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	ef 1a       	sub	r14, r31
 226:	f1 08       	sbc	r15, r1
 228:	15 c0       	rjmp	.+42     	; 0x254 <loop+0x182>
 22a:	c7 55       	subi	r28, 0x57	; 87
 22c:	dd 4f       	sbci	r29, 0xFD	; 253
 22e:	08 81       	ld	r16, Y
 230:	19 81       	ldd	r17, Y+1	; 0x01
 232:	c9 5a       	subi	r28, 0xA9	; 169
 234:	d2 40       	sbci	r29, 0x02	; 2
 236:	0d 50       	subi	r16, 0x0D	; 13
 238:	11 09       	sbc	r17, r1
 23a:	c7 55       	subi	r28, 0x57	; 87
 23c:	dd 4f       	sbci	r29, 0xFD	; 253
 23e:	19 83       	std	Y+1, r17	; 0x01
 240:	08 83       	st	Y, r16
 242:	c9 5a       	subi	r28, 0xA9	; 169
 244:	d2 40       	sbci	r29, 0x02	; 2
 246:	1c e0       	ldi	r17, 0x0C	; 12
 248:	e1 0e       	add	r14, r17
 24a:	f1 1c       	adc	r15, r1
 24c:	0f 2e       	mov	r0, r31
 24e:	fd e0       	ldi	r31, 0x0D	; 13
 250:	7f 2e       	mov	r7, r31
 252:	f0 2d       	mov	r31, r0
 254:	64 50       	subi	r22, 0x04	; 4
 256:	71 09       	sbc	r23, r1
 258:	68 15       	cp	r22, r8
 25a:	79 05       	cpc	r23, r9
 25c:	09 f0       	breq	.+2      	; 0x260 <loop+0x18e>
 25e:	8d cf       	rjmp	.-230    	; 0x17a <loop+0xa8>
 260:	0e 94 b6 04 	call	0x96c	; 0x96c <micros>
 264:	6b 01       	movw	r12, r22
 266:	7c 01       	movw	r14, r24
 268:	cb 55       	subi	r28, 0x5B	; 91
 26a:	dd 4f       	sbci	r29, 0xFD	; 253
 26c:	28 80       	ld	r2, Y
 26e:	39 80       	ldd	r3, Y+1	; 0x01
 270:	4a 80       	ldd	r4, Y+2	; 0x02
 272:	5b 80       	ldd	r5, Y+3	; 0x03
 274:	c5 5a       	subi	r28, 0xA5	; 165
 276:	d2 40       	sbci	r29, 0x02	; 2
 278:	c2 18       	sub	r12, r2
 27a:	d3 08       	sbc	r13, r3
 27c:	e4 08       	sbc	r14, r4
 27e:	f5 08       	sbc	r15, r5
 280:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <__data_end>
 284:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <__data_end+0x1>
 288:	02 80       	ldd	r0, Z+2	; 0x02
 28a:	f3 81       	ldd	r31, Z+3	; 0x03
 28c:	e0 2d       	mov	r30, r0
 28e:	42 e1       	ldi	r20, 0x12	; 18
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	62 e5       	ldi	r22, 0x52	; 82
 294:	72 e0       	ldi	r23, 0x02	; 2
 296:	86 e8       	ldi	r24, 0x86	; 134
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	09 95       	icall
 29c:	2a e0       	ldi	r18, 0x0A	; 10
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b7 01       	movw	r22, r14
 2a2:	a6 01       	movw	r20, r12
 2a4:	86 e8       	ldi	r24, 0x86	; 134
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	0e 94 12 04 	call	0x824	; 0x824 <_ZN5Print7printlnEmi>
 2ac:	8e 01       	movw	r16, r28
 2ae:	0f 5f       	subi	r16, 0xFF	; 255
 2b0:	1f 4f       	sbci	r17, 0xFF	; 255
 2b2:	6e 01       	movw	r12, r28
 2b4:	2b e5       	ldi	r18, 0x5B	; 91
 2b6:	c2 1a       	sub	r12, r18
 2b8:	2d ef       	ldi	r18, 0xFD	; 253
 2ba:	d2 0a       	sbc	r13, r18
 2bc:	78 01       	movw	r14, r16
 2be:	34 e3       	ldi	r19, 0x34	; 52
 2c0:	e3 0e       	add	r14, r19
 2c2:	f1 1c       	adc	r15, r1
 2c4:	d8 01       	movw	r26, r16
 2c6:	4d 91       	ld	r20, X+
 2c8:	5d 91       	ld	r21, X+
 2ca:	6d 91       	ld	r22, X+
 2cc:	7d 91       	ld	r23, X+
 2ce:	8d 01       	movw	r16, r26
 2d0:	2a e0       	ldi	r18, 0x0A	; 10
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	86 e8       	ldi	r24, 0x86	; 134
 2d6:	92 e0       	ldi	r25, 0x02	; 2
 2d8:	0e 94 24 04 	call	0x848	; 0x848 <_ZN5Print5printEli>
 2dc:	69 e0       	ldi	r22, 0x09	; 9
 2de:	86 e8       	ldi	r24, 0x86	; 134
 2e0:	92 e0       	ldi	r25, 0x02	; 2
 2e2:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN5Print5printEc>
 2e6:	0e 15       	cp	r16, r14
 2e8:	1f 05       	cpc	r17, r15
 2ea:	61 f7       	brne	.-40     	; 0x2c4 <loop+0x1f2>
 2ec:	6a e0       	ldi	r22, 0x0A	; 10
 2ee:	86 e8       	ldi	r24, 0x86	; 134
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN5Print5printEc>
 2f6:	87 01       	movw	r16, r14
 2f8:	ec 14       	cp	r14, r12
 2fa:	fd 04       	cpc	r15, r13
 2fc:	f9 f6       	brne	.-66     	; 0x2bc <loop+0x1ea>
 2fe:	c6 55       	subi	r28, 0x56	; 86
 300:	dd 4f       	sbci	r29, 0xFD	; 253
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	ff 90       	pop	r15
 316:	ef 90       	pop	r14
 318:	df 90       	pop	r13
 31a:	cf 90       	pop	r12
 31c:	bf 90       	pop	r11
 31e:	af 90       	pop	r10
 320:	9f 90       	pop	r9
 322:	8f 90       	pop	r8
 324:	7f 90       	pop	r7
 326:	6f 90       	pop	r6
 328:	5f 90       	pop	r5
 32a:	4f 90       	pop	r4
 32c:	3f 90       	pop	r3
 32e:	2f 90       	pop	r2
 330:	08 95       	ret

00000332 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 332:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 334:	91 8d       	ldd	r25, Z+25	; 0x19
 336:	22 8d       	ldd	r18, Z+26	; 0x1a
 338:	89 2f       	mov	r24, r25
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	80 5c       	subi	r24, 0xC0	; 192
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	82 1b       	sub	r24, r18
 342:	91 09       	sbc	r25, r1
}
 344:	8f 73       	andi	r24, 0x3F	; 63
 346:	99 27       	eor	r25, r25
 348:	08 95       	ret

0000034a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 34a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 34c:	91 8d       	ldd	r25, Z+25	; 0x19
 34e:	82 8d       	ldd	r24, Z+26	; 0x1a
 350:	98 17       	cp	r25, r24
 352:	31 f0       	breq	.+12     	; 0x360 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 354:	82 8d       	ldd	r24, Z+26	; 0x1a
 356:	e8 0f       	add	r30, r24
 358:	f1 1d       	adc	r31, r1
 35a:	85 8d       	ldd	r24, Z+29	; 0x1d
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 364:	08 95       	ret

00000366 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 366:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 368:	91 8d       	ldd	r25, Z+25	; 0x19
 36a:	82 8d       	ldd	r24, Z+26	; 0x1a
 36c:	98 17       	cp	r25, r24
 36e:	61 f0       	breq	.+24     	; 0x388 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 370:	82 8d       	ldd	r24, Z+26	; 0x1a
 372:	df 01       	movw	r26, r30
 374:	a8 0f       	add	r26, r24
 376:	b1 1d       	adc	r27, r1
 378:	5d 96       	adiw	r26, 0x1d	; 29
 37a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 37c:	92 8d       	ldd	r25, Z+26	; 0x1a
 37e:	9f 5f       	subi	r25, 0xFF	; 255
 380:	9f 73       	andi	r25, 0x3F	; 63
 382:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 38c:	08 95       	ret

0000038e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 38e:	fc 01       	movw	r30, r24
 390:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 392:	44 8d       	ldd	r20, Z+28	; 0x1c
 394:	25 2f       	mov	r18, r21
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	84 2f       	mov	r24, r20
 39a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 39c:	82 1b       	sub	r24, r18
 39e:	93 0b       	sbc	r25, r19
 3a0:	54 17       	cp	r21, r20
 3a2:	10 f0       	brcs	.+4      	; 0x3a8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 3a4:	cf 96       	adiw	r24, 0x3f	; 63
 3a6:	08 95       	ret
  return tail - head - 1;
 3a8:	01 97       	sbiw	r24, 0x01	; 1
}
 3aa:	08 95       	ret

000003ac <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 3ac:	8b e2       	ldi	r24, 0x2B	; 43
 3ae:	93 e0       	ldi	r25, 0x03	; 3
 3b0:	89 2b       	or	r24, r25
 3b2:	49 f0       	breq	.+18     	; 0x3c6 <_Z14serialEventRunv+0x1a>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	89 2b       	or	r24, r25
 3ba:	29 f0       	breq	.+10     	; 0x3c6 <_Z14serialEventRunv+0x1a>
 3bc:	0e 94 2b 03 	call	0x656	; 0x656 <_Z17Serial0_availablev>
 3c0:	81 11       	cpse	r24, r1
 3c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 3c6:	08 95       	ret

000003c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3c8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3ca:	84 8d       	ldd	r24, Z+28	; 0x1c
 3cc:	df 01       	movw	r26, r30
 3ce:	a8 0f       	add	r26, r24
 3d0:	b1 1d       	adc	r27, r1
 3d2:	a3 5a       	subi	r26, 0xA3	; 163
 3d4:	bf 4f       	sbci	r27, 0xFF	; 255
 3d6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3d8:	84 8d       	ldd	r24, Z+28	; 0x1c
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	8f 73       	andi	r24, 0x3F	; 63
 3e0:	99 27       	eor	r25, r25
 3e2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 3e4:	a6 89       	ldd	r26, Z+22	; 0x16
 3e6:	b7 89       	ldd	r27, Z+23	; 0x17
 3e8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 3ea:	a0 89       	ldd	r26, Z+16	; 0x10
 3ec:	b1 89       	ldd	r27, Z+17	; 0x11
 3ee:	8c 91       	ld	r24, X
 3f0:	80 64       	ori	r24, 0x40	; 64
 3f2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 3f4:	93 8d       	ldd	r25, Z+27	; 0x1b
 3f6:	84 8d       	ldd	r24, Z+28	; 0x1c
 3f8:	98 13       	cpse	r25, r24
 3fa:	06 c0       	rjmp	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 3fc:	02 88       	ldd	r0, Z+18	; 0x12
 3fe:	f3 89       	ldd	r31, Z+19	; 0x13
 400:	e0 2d       	mov	r30, r0
 402:	80 81       	ld	r24, Z
 404:	8f 7d       	andi	r24, 0xDF	; 223
 406:	80 83       	st	Z, r24
 408:	08 95       	ret

0000040a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	ec 01       	movw	r28, r24
  _written = true;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 41c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 41e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 420:	98 13       	cpse	r25, r24
 422:	05 c0       	rjmp	.+10     	; 0x42e <_ZN14HardwareSerial5writeEh+0x24>
 424:	e8 89       	ldd	r30, Y+16	; 0x10
 426:	f9 89       	ldd	r31, Y+17	; 0x11
 428:	80 81       	ld	r24, Z
 42a:	85 fd       	sbrc	r24, 5
 42c:	24 c0       	rjmp	.+72     	; 0x476 <_ZN14HardwareSerial5writeEh+0x6c>
 42e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 430:	0b 8d       	ldd	r16, Y+27	; 0x1b
 432:	10 e0       	ldi	r17, 0x00	; 0
 434:	0f 5f       	subi	r16, 0xFF	; 255
 436:	1f 4f       	sbci	r17, 0xFF	; 255
 438:	0f 73       	andi	r16, 0x3F	; 63
 43a:	11 27       	eor	r17, r17
 43c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 43e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 440:	e8 12       	cpse	r14, r24
 442:	0c c0       	rjmp	.+24     	; 0x45c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	07 fc       	sbrc	r0, 7
 448:	fa cf       	rjmp	.-12     	; 0x43e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 44a:	e8 89       	ldd	r30, Y+16	; 0x10
 44c:	f9 89       	ldd	r31, Y+17	; 0x11
 44e:	80 81       	ld	r24, Z
 450:	85 ff       	sbrs	r24, 5
 452:	f5 cf       	rjmp	.-22     	; 0x43e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 454:	ce 01       	movw	r24, r28
 456:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 45a:	f1 cf       	rjmp	.-30     	; 0x43e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 45c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 45e:	fe 01       	movw	r30, r28
 460:	e8 0f       	add	r30, r24
 462:	f1 1d       	adc	r31, r1
 464:	e3 5a       	subi	r30, 0xA3	; 163
 466:	ff 4f       	sbci	r31, 0xFF	; 255
 468:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 46a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 46c:	ea 89       	ldd	r30, Y+18	; 0x12
 46e:	fb 89       	ldd	r31, Y+19	; 0x13
 470:	80 81       	ld	r24, Z
 472:	80 62       	ori	r24, 0x20	; 32
 474:	07 c0       	rjmp	.+14     	; 0x484 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 476:	ee 89       	ldd	r30, Y+22	; 0x16
 478:	ff 89       	ldd	r31, Y+23	; 0x17
 47a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 47c:	e8 89       	ldd	r30, Y+16	; 0x10
 47e:	f9 89       	ldd	r31, Y+17	; 0x11
 480:	80 81       	ld	r24, Z
 482:	80 64       	ori	r24, 0x40	; 64
 484:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	08 95       	ret

00000498 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 49e:	88 8d       	ldd	r24, Y+24	; 0x18
 4a0:	88 23       	and	r24, r24
 4a2:	c9 f0       	breq	.+50     	; 0x4d6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4a4:	ea 89       	ldd	r30, Y+18	; 0x12
 4a6:	fb 89       	ldd	r31, Y+19	; 0x13
 4a8:	80 81       	ld	r24, Z
 4aa:	85 fd       	sbrc	r24, 5
 4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <_ZN14HardwareSerial5flushEv+0x20>
 4ae:	a8 89       	ldd	r26, Y+16	; 0x10
 4b0:	b9 89       	ldd	r27, Y+17	; 0x11
 4b2:	8c 91       	ld	r24, X
 4b4:	86 fd       	sbrc	r24, 6
 4b6:	0f c0       	rjmp	.+30     	; 0x4d6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	07 fc       	sbrc	r0, 7
 4bc:	f5 cf       	rjmp	.-22     	; 0x4a8 <_ZN14HardwareSerial5flushEv+0x10>
 4be:	80 81       	ld	r24, Z
 4c0:	85 ff       	sbrs	r24, 5
 4c2:	f2 cf       	rjmp	.-28     	; 0x4a8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4c4:	a8 89       	ldd	r26, Y+16	; 0x10
 4c6:	b9 89       	ldd	r27, Y+17	; 0x11
 4c8:	8c 91       	ld	r24, X
 4ca:	85 ff       	sbrs	r24, 5
 4cc:	ed cf       	rjmp	.-38     	; 0x4a8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4ce:	ce 01       	movw	r24, r28
 4d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4d4:	e7 cf       	rjmp	.-50     	; 0x4a4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 4dc:	cf 92       	push	r12
 4de:	df 92       	push	r13
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ec 01       	movw	r28, r24
 4ec:	6a 01       	movw	r12, r20
 4ee:	7b 01       	movw	r14, r22
 4f0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 4f2:	e8 89       	ldd	r30, Y+16	; 0x10
 4f4:	f9 89       	ldd	r31, Y+17	; 0x11
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4fa:	41 15       	cp	r20, r1
 4fc:	51 4e       	sbci	r21, 0xE1	; 225
 4fe:	61 05       	cpc	r22, r1
 500:	71 05       	cpc	r23, r1
 502:	b1 f0       	breq	.+44     	; 0x530 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	79 e0       	ldi	r23, 0x09	; 9
 508:	8d e3       	ldi	r24, 0x3D	; 61
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	a7 01       	movw	r20, r14
 50e:	96 01       	movw	r18, r12
 510:	0e 94 16 05 	call	0xa2c	; 0xa2c <__udivmodsi4>
 514:	da 01       	movw	r26, r20
 516:	c9 01       	movw	r24, r18
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	a1 09       	sbc	r26, r1
 51c:	b1 09       	sbc	r27, r1
 51e:	b6 95       	lsr	r27
 520:	a7 95       	ror	r26
 522:	97 95       	ror	r25
 524:	87 95       	ror	r24
 526:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 528:	21 15       	cp	r18, r1
 52a:	80 e1       	ldi	r24, 0x10	; 16
 52c:	38 07       	cpc	r19, r24
 52e:	a8 f0       	brcs	.+42     	; 0x55a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 530:	e8 89       	ldd	r30, Y+16	; 0x10
 532:	f9 89       	ldd	r31, Y+17	; 0x11
 534:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 536:	60 e8       	ldi	r22, 0x80	; 128
 538:	74 e8       	ldi	r23, 0x84	; 132
 53a:	8e e1       	ldi	r24, 0x1E	; 30
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	a7 01       	movw	r20, r14
 540:	96 01       	movw	r18, r12
 542:	0e 94 16 05 	call	0xa2c	; 0xa2c <__udivmodsi4>
 546:	da 01       	movw	r26, r20
 548:	c9 01       	movw	r24, r18
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	a1 09       	sbc	r26, r1
 54e:	b1 09       	sbc	r27, r1
 550:	b6 95       	lsr	r27
 552:	a7 95       	ror	r26
 554:	97 95       	ror	r25
 556:	87 95       	ror	r24
 558:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 55a:	ec 85       	ldd	r30, Y+12	; 0x0c
 55c:	fd 85       	ldd	r31, Y+13	; 0x0d
 55e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 560:	ee 85       	ldd	r30, Y+14	; 0x0e
 562:	ff 85       	ldd	r31, Y+15	; 0x0f
 564:	20 83       	st	Z, r18

  _written = false;
 566:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 568:	ec 89       	ldd	r30, Y+20	; 0x14
 56a:	fd 89       	ldd	r31, Y+21	; 0x15
 56c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 56e:	ea 89       	ldd	r30, Y+18	; 0x12
 570:	fb 89       	ldd	r31, Y+19	; 0x13
 572:	80 81       	ld	r24, Z
 574:	80 61       	ori	r24, 0x10	; 16
 576:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 578:	ea 89       	ldd	r30, Y+18	; 0x12
 57a:	fb 89       	ldd	r31, Y+19	; 0x13
 57c:	80 81       	ld	r24, Z
 57e:	88 60       	ori	r24, 0x08	; 8
 580:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 582:	ea 89       	ldd	r30, Y+18	; 0x12
 584:	fb 89       	ldd	r31, Y+19	; 0x13
 586:	80 81       	ld	r24, Z
 588:	80 68       	ori	r24, 0x80	; 128
 58a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 58c:	ea 89       	ldd	r30, Y+18	; 0x12
 58e:	fb 89       	ldd	r31, Y+19	; 0x13
 590:	80 81       	ld	r24, Z
 592:	8f 7d       	andi	r24, 0xDF	; 223
 594:	80 83       	st	Z, r24
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	ff 90       	pop	r15
 59e:	ef 90       	pop	r14
 5a0:	df 90       	pop	r13
 5a2:	cf 90       	pop	r12
 5a4:	08 95       	ret

000005a6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	2f 93       	push	r18
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
 5b6:	ef 93       	push	r30
 5b8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5ba:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <__data_end+0x10>
 5be:	f0 91 97 02 	lds	r31, 0x0297	; 0x800297 <__data_end+0x11>
 5c2:	80 81       	ld	r24, Z
 5c4:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end+0x16>
 5c8:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <__data_end+0x17>
 5cc:	82 fd       	sbrc	r24, 2
 5ce:	12 c0       	rjmp	.+36     	; 0x5f4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5d0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5d2:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <__data_end+0x19>
 5d6:	8f 5f       	subi	r24, 0xFF	; 255
 5d8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5da:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__data_end+0x1a>
 5de:	82 17       	cp	r24, r18
 5e0:	51 f0       	breq	.+20     	; 0x5f6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 5e2:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__data_end+0x19>
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	ea 57       	subi	r30, 0x7A	; 122
 5ea:	fd 4f       	sbci	r31, 0xFD	; 253
 5ec:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5ee:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <__data_end+0x19>
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5f4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 5f6:	ff 91       	pop	r31
 5f8:	ef 91       	pop	r30
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	2f 91       	pop	r18
 600:	0f 90       	pop	r0
 602:	0f be       	out	0x3f, r0	; 63
 604:	0f 90       	pop	r0
 606:	1f 90       	pop	r1
 608:	18 95       	reti

0000060a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 60a:	1f 92       	push	r1
 60c:	0f 92       	push	r0
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	2f 93       	push	r18
 616:	3f 93       	push	r19
 618:	4f 93       	push	r20
 61a:	5f 93       	push	r21
 61c:	6f 93       	push	r22
 61e:	7f 93       	push	r23
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	af 93       	push	r26
 626:	bf 93       	push	r27
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 62c:	86 e8       	ldi	r24, 0x86	; 134
 62e:	92 e0       	ldi	r25, 0x02	; 2
 630:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	9f 91       	pop	r25
 63e:	8f 91       	pop	r24
 640:	7f 91       	pop	r23
 642:	6f 91       	pop	r22
 644:	5f 91       	pop	r21
 646:	4f 91       	pop	r20
 648:	3f 91       	pop	r19
 64a:	2f 91       	pop	r18
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 656:	86 e8       	ldi	r24, 0x86	; 134
 658:	92 e0       	ldi	r25, 0x02	; 2
 65a:	0e 94 99 01 	call	0x332	; 0x332 <_ZN14HardwareSerial9availableEv>
 65e:	21 e0       	ldi	r18, 0x01	; 1
 660:	89 2b       	or	r24, r25
 662:	09 f4       	brne	.+2      	; 0x666 <_Z17Serial0_availablev+0x10>
 664:	20 e0       	ldi	r18, 0x00	; 0
}
 666:	82 2f       	mov	r24, r18
 668:	08 95       	ret

0000066a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 66a:	e6 e8       	ldi	r30, 0x86	; 134
 66c:	f2 e0       	ldi	r31, 0x02	; 2
 66e:	13 82       	std	Z+3, r1	; 0x03
 670:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 672:	88 ee       	ldi	r24, 0xE8	; 232
 674:	93 e0       	ldi	r25, 0x03	; 3
 676:	a0 e0       	ldi	r26, 0x00	; 0
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	84 83       	std	Z+4, r24	; 0x04
 67c:	95 83       	std	Z+5, r25	; 0x05
 67e:	a6 83       	std	Z+6, r26	; 0x06
 680:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 682:	89 e6       	ldi	r24, 0x69	; 105
 684:	92 e0       	ldi	r25, 0x02	; 2
 686:	91 83       	std	Z+1, r25	; 0x01
 688:	80 83       	st	Z, r24
 68a:	85 ec       	ldi	r24, 0xC5	; 197
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	95 87       	std	Z+13, r25	; 0x0d
 690:	84 87       	std	Z+12, r24	; 0x0c
 692:	84 ec       	ldi	r24, 0xC4	; 196
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	97 87       	std	Z+15, r25	; 0x0f
 698:	86 87       	std	Z+14, r24	; 0x0e
 69a:	80 ec       	ldi	r24, 0xC0	; 192
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	91 8b       	std	Z+17, r25	; 0x11
 6a0:	80 8b       	std	Z+16, r24	; 0x10
 6a2:	81 ec       	ldi	r24, 0xC1	; 193
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	93 8b       	std	Z+19, r25	; 0x13
 6a8:	82 8b       	std	Z+18, r24	; 0x12
 6aa:	82 ec       	ldi	r24, 0xC2	; 194
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	95 8b       	std	Z+21, r25	; 0x15
 6b0:	84 8b       	std	Z+20, r24	; 0x14
 6b2:	86 ec       	ldi	r24, 0xC6	; 198
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	97 8b       	std	Z+23, r25	; 0x17
 6b8:	86 8b       	std	Z+22, r24	; 0x16
 6ba:	11 8e       	std	Z+25, r1	; 0x19
 6bc:	12 8e       	std	Z+26, r1	; 0x1a
 6be:	13 8e       	std	Z+27, r1	; 0x1b
 6c0:	14 8e       	std	Z+28, r1	; 0x1c
 6c2:	08 95       	ret

000006c4 <initVariant>:
 6c4:	08 95       	ret

000006c6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6c6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <init>

	initVariant();
 6ca:	0e 94 62 03 	call	0x6c4	; 0x6c4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6ce:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6d2:	c6 ed       	ldi	r28, 0xD6	; 214
 6d4:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 6d6:	0e 94 69 00 	call	0xd2	; 0xd2 <loop>
		if (serialEventRun) serialEventRun();
 6da:	20 97       	sbiw	r28, 0x00	; 0
 6dc:	e1 f3       	breq	.-8      	; 0x6d6 <main+0x10>
 6de:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14serialEventRunv>
 6e2:	f9 cf       	rjmp	.-14     	; 0x6d6 <main+0x10>

000006e4 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 6e4:	cf 92       	push	r12
 6e6:	df 92       	push	r13
 6e8:	ef 92       	push	r14
 6ea:	ff 92       	push	r15
 6ec:	0f 93       	push	r16
 6ee:	1f 93       	push	r17
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	6c 01       	movw	r12, r24
 6f6:	7a 01       	movw	r14, r20
 6f8:	8b 01       	movw	r16, r22
 6fa:	c0 e0       	ldi	r28, 0x00	; 0
 6fc:	d0 e0       	ldi	r29, 0x00	; 0
 6fe:	ce 15       	cp	r28, r14
 700:	df 05       	cpc	r29, r15
 702:	81 f0       	breq	.+32     	; 0x724 <_ZN5Print5writeEPKhj+0x40>
 704:	d8 01       	movw	r26, r16
 706:	6d 91       	ld	r22, X+
 708:	8d 01       	movw	r16, r26
 70a:	d6 01       	movw	r26, r12
 70c:	ed 91       	ld	r30, X+
 70e:	fc 91       	ld	r31, X
 710:	01 90       	ld	r0, Z+
 712:	f0 81       	ld	r31, Z
 714:	e0 2d       	mov	r30, r0
 716:	c6 01       	movw	r24, r12
 718:	09 95       	icall
 71a:	89 2b       	or	r24, r25
 71c:	11 f0       	breq	.+4      	; 0x722 <_ZN5Print5writeEPKhj+0x3e>
 71e:	21 96       	adiw	r28, 0x01	; 1
 720:	ee cf       	rjmp	.-36     	; 0x6fe <_ZN5Print5writeEPKhj+0x1a>
 722:	7e 01       	movw	r14, r28
 724:	c7 01       	movw	r24, r14
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	1f 91       	pop	r17
 72c:	0f 91       	pop	r16
 72e:	ff 90       	pop	r15
 730:	ef 90       	pop	r14
 732:	df 90       	pop	r13
 734:	cf 90       	pop	r12
 736:	08 95       	ret

00000738 <_ZN5Print5writeEPKc>:
 738:	61 15       	cp	r22, r1
 73a:	71 05       	cpc	r23, r1
 73c:	79 f0       	breq	.+30     	; 0x75c <_ZN5Print5writeEPKc+0x24>
 73e:	fb 01       	movw	r30, r22
 740:	01 90       	ld	r0, Z+
 742:	00 20       	and	r0, r0
 744:	e9 f7       	brne	.-6      	; 0x740 <_ZN5Print5writeEPKc+0x8>
 746:	31 97       	sbiw	r30, 0x01	; 1
 748:	af 01       	movw	r20, r30
 74a:	46 1b       	sub	r20, r22
 74c:	57 0b       	sbc	r21, r23
 74e:	dc 01       	movw	r26, r24
 750:	ed 91       	ld	r30, X+
 752:	fc 91       	ld	r31, X
 754:	02 80       	ldd	r0, Z+2	; 0x02
 756:	f3 81       	ldd	r31, Z+3	; 0x03
 758:	e0 2d       	mov	r30, r0
 75a:	09 94       	ijmp
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	08 95       	ret

00000762 <_ZN5Print5printEc>:
 762:	dc 01       	movw	r26, r24
 764:	ed 91       	ld	r30, X+
 766:	fc 91       	ld	r31, X
 768:	01 90       	ld	r0, Z+
 76a:	f0 81       	ld	r31, Z
 76c:	e0 2d       	mov	r30, r0
 76e:	09 94       	ijmp

00000770 <_ZN5Print7printlnEv>:
 770:	67 e7       	ldi	r22, 0x77	; 119
 772:	72 e0       	ldi	r23, 0x02	; 2
 774:	0c 94 9c 03 	jmp	0x738	; 0x738 <_ZN5Print5writeEPKc>

00000778 <_ZN5Print11printNumberEmh>:
 778:	8f 92       	push	r8
 77a:	9f 92       	push	r9
 77c:	af 92       	push	r10
 77e:	bf 92       	push	r11
 780:	ef 92       	push	r14
 782:	ff 92       	push	r15
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
 790:	a1 97       	sbiw	r28, 0x21	; 33
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	f8 94       	cli
 796:	de bf       	out	0x3e, r29	; 62
 798:	0f be       	out	0x3f, r0	; 63
 79a:	cd bf       	out	0x3d, r28	; 61
 79c:	7c 01       	movw	r14, r24
 79e:	fa 01       	movw	r30, r20
 7a0:	cb 01       	movw	r24, r22
 7a2:	19 a2       	std	Y+33, r1	; 0x21
 7a4:	22 30       	cpi	r18, 0x02	; 2
 7a6:	08 f4       	brcc	.+2      	; 0x7aa <_ZN5Print11printNumberEmh+0x32>
 7a8:	2a e0       	ldi	r18, 0x0A	; 10
 7aa:	8e 01       	movw	r16, r28
 7ac:	0f 5d       	subi	r16, 0xDF	; 223
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	82 2e       	mov	r8, r18
 7b2:	91 2c       	mov	r9, r1
 7b4:	a1 2c       	mov	r10, r1
 7b6:	b1 2c       	mov	r11, r1
 7b8:	bf 01       	movw	r22, r30
 7ba:	a5 01       	movw	r20, r10
 7bc:	94 01       	movw	r18, r8
 7be:	0e 94 16 05 	call	0xa2c	; 0xa2c <__udivmodsi4>
 7c2:	f9 01       	movw	r30, r18
 7c4:	ca 01       	movw	r24, r20
 7c6:	01 50       	subi	r16, 0x01	; 1
 7c8:	11 09       	sbc	r17, r1
 7ca:	6a 30       	cpi	r22, 0x0A	; 10
 7cc:	10 f4       	brcc	.+4      	; 0x7d2 <_ZN5Print11printNumberEmh+0x5a>
 7ce:	60 5d       	subi	r22, 0xD0	; 208
 7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <_ZN5Print11printNumberEmh+0x5c>
 7d2:	69 5c       	subi	r22, 0xC9	; 201
 7d4:	d8 01       	movw	r26, r16
 7d6:	6c 93       	st	X, r22
 7d8:	23 2b       	or	r18, r19
 7da:	24 2b       	or	r18, r20
 7dc:	25 2b       	or	r18, r21
 7de:	61 f7       	brne	.-40     	; 0x7b8 <_ZN5Print11printNumberEmh+0x40>
 7e0:	b8 01       	movw	r22, r16
 7e2:	c7 01       	movw	r24, r14
 7e4:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN5Print5writeEPKc>
 7e8:	a1 96       	adiw	r28, 0x21	; 33
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	f8 94       	cli
 7ee:	de bf       	out	0x3e, r29	; 62
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	cd bf       	out	0x3d, r28	; 61
 7f4:	df 91       	pop	r29
 7f6:	cf 91       	pop	r28
 7f8:	1f 91       	pop	r17
 7fa:	0f 91       	pop	r16
 7fc:	ff 90       	pop	r15
 7fe:	ef 90       	pop	r14
 800:	bf 90       	pop	r11
 802:	af 90       	pop	r10
 804:	9f 90       	pop	r9
 806:	8f 90       	pop	r8
 808:	08 95       	ret

0000080a <_ZN5Print5printEmi>:
 80a:	21 15       	cp	r18, r1
 80c:	31 05       	cpc	r19, r1
 80e:	41 f4       	brne	.+16     	; 0x820 <_ZN5Print5printEmi+0x16>
 810:	dc 01       	movw	r26, r24
 812:	ed 91       	ld	r30, X+
 814:	fc 91       	ld	r31, X
 816:	01 90       	ld	r0, Z+
 818:	f0 81       	ld	r31, Z
 81a:	e0 2d       	mov	r30, r0
 81c:	64 2f       	mov	r22, r20
 81e:	09 94       	ijmp
 820:	0c 94 bc 03 	jmp	0x778	; 0x778 <_ZN5Print11printNumberEmh>

00000824 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 824:	0f 93       	push	r16
 826:	1f 93       	push	r17
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
 82c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 82e:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN5Print5printEmi>
 832:	8c 01       	movw	r16, r24
  n += println();
 834:	ce 01       	movw	r24, r28
 836:	0e 94 b8 03 	call	0x770	; 0x770 <_ZN5Print7printlnEv>
  return n;
}
 83a:	80 0f       	add	r24, r16
 83c:	91 1f       	adc	r25, r17
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0f 91       	pop	r16
 846:	08 95       	ret

00000848 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 848:	cf 92       	push	r12
 84a:	df 92       	push	r13
 84c:	ef 92       	push	r14
 84e:	ff 92       	push	r15
 850:	0f 93       	push	r16
 852:	1f 93       	push	r17
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
  if (base == 0) {
 858:	21 15       	cp	r18, r1
 85a:	31 05       	cpc	r19, r1
 85c:	81 f4       	brne	.+32     	; 0x87e <_ZN5Print5printEli+0x36>
    return write(n);
 85e:	dc 01       	movw	r26, r24
 860:	ed 91       	ld	r30, X+
 862:	fc 91       	ld	r31, X
 864:	01 90       	ld	r0, Z+
 866:	f0 81       	ld	r31, Z
 868:	e0 2d       	mov	r30, r0
 86a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16
 874:	ff 90       	pop	r15
 876:	ef 90       	pop	r14
 878:	df 90       	pop	r13
 87a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 87c:	09 94       	ijmp
  } else if (base == 10) {
 87e:	2a 30       	cpi	r18, 0x0A	; 10
 880:	31 05       	cpc	r19, r1
 882:	01 f5       	brne	.+64     	; 0x8c4 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 884:	77 ff       	sbrs	r23, 7
 886:	1d c0       	rjmp	.+58     	; 0x8c2 <_ZN5Print5printEli+0x7a>
 888:	6a 01       	movw	r12, r20
 88a:	7b 01       	movw	r14, r22
 88c:	ec 01       	movw	r28, r24
      int t = print('-');
 88e:	6d e2       	ldi	r22, 0x2D	; 45
 890:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN5Print5printEc>
 894:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 896:	44 27       	eor	r20, r20
 898:	55 27       	eor	r21, r21
 89a:	ba 01       	movw	r22, r20
 89c:	4c 19       	sub	r20, r12
 89e:	5d 09       	sbc	r21, r13
 8a0:	6e 09       	sbc	r22, r14
 8a2:	7f 09       	sbc	r23, r15
 8a4:	2a e0       	ldi	r18, 0x0A	; 10
 8a6:	ce 01       	movw	r24, r28
 8a8:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN5Print11printNumberEmh>
 8ac:	80 0f       	add	r24, r16
 8ae:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	1f 91       	pop	r17
 8b6:	0f 91       	pop	r16
 8b8:	ff 90       	pop	r15
 8ba:	ef 90       	pop	r14
 8bc:	df 90       	pop	r13
 8be:	cf 90       	pop	r12
 8c0:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 8c2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8d4:	0c 94 bc 03 	jmp	0x778	; 0x778 <_ZN5Print11printNumberEmh>

000008d8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 8d8:	1f 92       	push	r1
 8da:	0f 92       	push	r0
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	0f 92       	push	r0
 8e0:	11 24       	eor	r1, r1
 8e2:	2f 93       	push	r18
 8e4:	3f 93       	push	r19
 8e6:	8f 93       	push	r24
 8e8:	9f 93       	push	r25
 8ea:	af 93       	push	r26
 8ec:	bf 93       	push	r27
 8ee:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <timer0_millis>
 8f2:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <timer0_millis+0x1>
 8f6:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <timer0_millis+0x2>
 8fa:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <timer0_millis+0x3>
 8fe:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <timer0_fract>
 902:	23 e0       	ldi	r18, 0x03	; 3
 904:	23 0f       	add	r18, r19
 906:	2d 37       	cpi	r18, 0x7D	; 125
 908:	20 f4       	brcc	.+8      	; 0x912 <__stack+0x13>
 90a:	01 96       	adiw	r24, 0x01	; 1
 90c:	a1 1d       	adc	r26, r1
 90e:	b1 1d       	adc	r27, r1
 910:	05 c0       	rjmp	.+10     	; 0x91c <__stack+0x1d>
 912:	26 e8       	ldi	r18, 0x86	; 134
 914:	23 0f       	add	r18, r19
 916:	02 96       	adiw	r24, 0x02	; 2
 918:	a1 1d       	adc	r26, r1
 91a:	b1 1d       	adc	r27, r1
 91c:	20 93 23 03 	sts	0x0323, r18	; 0x800323 <timer0_fract>
 920:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <timer0_millis>
 924:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <timer0_millis+0x1>
 928:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <timer0_millis+0x2>
 92c:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <timer0_millis+0x3>
 930:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 934:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 938:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 93c:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 940:	01 96       	adiw	r24, 0x01	; 1
 942:	a1 1d       	adc	r26, r1
 944:	b1 1d       	adc	r27, r1
 946:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <timer0_overflow_count>
 94a:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <timer0_overflow_count+0x1>
 94e:	a0 93 2a 03 	sts	0x032A, r26	; 0x80032a <timer0_overflow_count+0x2>
 952:	b0 93 2b 03 	sts	0x032B, r27	; 0x80032b <timer0_overflow_count+0x3>
 956:	bf 91       	pop	r27
 958:	af 91       	pop	r26
 95a:	9f 91       	pop	r25
 95c:	8f 91       	pop	r24
 95e:	3f 91       	pop	r19
 960:	2f 91       	pop	r18
 962:	0f 90       	pop	r0
 964:	0f be       	out	0x3f, r0	; 63
 966:	0f 90       	pop	r0
 968:	1f 90       	pop	r1
 96a:	18 95       	reti

0000096c <micros>:
 96c:	3f b7       	in	r19, 0x3f	; 63
 96e:	f8 94       	cli
 970:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 974:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 978:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 97c:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 980:	26 b5       	in	r18, 0x26	; 38
 982:	a8 9b       	sbis	0x15, 0	; 21
 984:	05 c0       	rjmp	.+10     	; 0x990 <micros+0x24>
 986:	2f 3f       	cpi	r18, 0xFF	; 255
 988:	19 f0       	breq	.+6      	; 0x990 <micros+0x24>
 98a:	01 96       	adiw	r24, 0x01	; 1
 98c:	a1 1d       	adc	r26, r1
 98e:	b1 1d       	adc	r27, r1
 990:	3f bf       	out	0x3f, r19	; 63
 992:	ba 2f       	mov	r27, r26
 994:	a9 2f       	mov	r26, r25
 996:	98 2f       	mov	r25, r24
 998:	88 27       	eor	r24, r24
 99a:	82 0f       	add	r24, r18
 99c:	91 1d       	adc	r25, r1
 99e:	a1 1d       	adc	r26, r1
 9a0:	b1 1d       	adc	r27, r1
 9a2:	bc 01       	movw	r22, r24
 9a4:	cd 01       	movw	r24, r26
 9a6:	42 e0       	ldi	r20, 0x02	; 2
 9a8:	66 0f       	add	r22, r22
 9aa:	77 1f       	adc	r23, r23
 9ac:	88 1f       	adc	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	4a 95       	dec	r20
 9b2:	d1 f7       	brne	.-12     	; 0x9a8 <micros+0x3c>
 9b4:	08 95       	ret

000009b6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 9b6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 9b8:	84 b5       	in	r24, 0x24	; 36
 9ba:	82 60       	ori	r24, 0x02	; 2
 9bc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 9be:	84 b5       	in	r24, 0x24	; 36
 9c0:	81 60       	ori	r24, 0x01	; 1
 9c2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 9c4:	85 b5       	in	r24, 0x25	; 37
 9c6:	82 60       	ori	r24, 0x02	; 2
 9c8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 9ca:	85 b5       	in	r24, 0x25	; 37
 9cc:	81 60       	ori	r24, 0x01	; 1
 9ce:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 9d0:	ee e6       	ldi	r30, 0x6E	; 110
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	80 81       	ld	r24, Z
 9d6:	81 60       	ori	r24, 0x01	; 1
 9d8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 9da:	e1 e8       	ldi	r30, 0x81	; 129
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9e0:	80 81       	ld	r24, Z
 9e2:	82 60       	ori	r24, 0x02	; 2
 9e4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 9e6:	80 81       	ld	r24, Z
 9e8:	81 60       	ori	r24, 0x01	; 1
 9ea:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9ec:	e0 e8       	ldi	r30, 0x80	; 128
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	80 81       	ld	r24, Z
 9f2:	81 60       	ori	r24, 0x01	; 1
 9f4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9f6:	e1 eb       	ldi	r30, 0xB1	; 177
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	80 81       	ld	r24, Z
 9fc:	84 60       	ori	r24, 0x04	; 4
 9fe:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 a00:	e0 eb       	ldi	r30, 0xB0	; 176
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	80 81       	ld	r24, Z
 a06:	81 60       	ori	r24, 0x01	; 1
 a08:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 a0a:	ea e7       	ldi	r30, 0x7A	; 122
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	80 81       	ld	r24, Z
 a10:	84 60       	ori	r24, 0x04	; 4
 a12:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 a14:	80 81       	ld	r24, Z
 a16:	82 60       	ori	r24, 0x02	; 2
 a18:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a1a:	80 81       	ld	r24, Z
 a1c:	81 60       	ori	r24, 0x01	; 1
 a1e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 a20:	80 81       	ld	r24, Z
 a22:	80 68       	ori	r24, 0x80	; 128
 a24:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 a26:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a2a:	08 95       	ret

00000a2c <__udivmodsi4>:
 a2c:	a1 e2       	ldi	r26, 0x21	; 33
 a2e:	1a 2e       	mov	r1, r26
 a30:	aa 1b       	sub	r26, r26
 a32:	bb 1b       	sub	r27, r27
 a34:	fd 01       	movw	r30, r26
 a36:	0d c0       	rjmp	.+26     	; 0xa52 <__udivmodsi4_ep>

00000a38 <__udivmodsi4_loop>:
 a38:	aa 1f       	adc	r26, r26
 a3a:	bb 1f       	adc	r27, r27
 a3c:	ee 1f       	adc	r30, r30
 a3e:	ff 1f       	adc	r31, r31
 a40:	a2 17       	cp	r26, r18
 a42:	b3 07       	cpc	r27, r19
 a44:	e4 07       	cpc	r30, r20
 a46:	f5 07       	cpc	r31, r21
 a48:	20 f0       	brcs	.+8      	; 0xa52 <__udivmodsi4_ep>
 a4a:	a2 1b       	sub	r26, r18
 a4c:	b3 0b       	sbc	r27, r19
 a4e:	e4 0b       	sbc	r30, r20
 a50:	f5 0b       	sbc	r31, r21

00000a52 <__udivmodsi4_ep>:
 a52:	66 1f       	adc	r22, r22
 a54:	77 1f       	adc	r23, r23
 a56:	88 1f       	adc	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	1a 94       	dec	r1
 a5c:	69 f7       	brne	.-38     	; 0xa38 <__udivmodsi4_loop>
 a5e:	60 95       	com	r22
 a60:	70 95       	com	r23
 a62:	80 95       	com	r24
 a64:	90 95       	com	r25
 a66:	9b 01       	movw	r18, r22
 a68:	ac 01       	movw	r20, r24
 a6a:	bd 01       	movw	r22, r26
 a6c:	cf 01       	movw	r24, r30
 a6e:	08 95       	ret

00000a70 <__tablejump2__>:
 a70:	ee 0f       	add	r30, r30
 a72:	ff 1f       	adc	r31, r31
 a74:	05 90       	lpm	r0, Z+
 a76:	f4 91       	lpm	r31, Z
 a78:	e0 2d       	mov	r30, r0
 a7a:	09 94       	ijmp

00000a7c <_exit>:
 a7c:	f8 94       	cli

00000a7e <__stop_program>:
 a7e:	ff cf       	rjmp	.-2      	; 0xa7e <__stop_program>
