
Assignment_1.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  00000a20  00000ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800286  00800286  00000c3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d94  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000148f  00000000  00000000  00007c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001268  00000000  00000000  000090f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b4  00000000  00000000  0000a360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001df8  00000000  00000000  0000aa14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002546  00000000  00000000  0000c80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000ed52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_18>
  4c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	05 03       	mulsu	r16, r21

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 e2       	ldi	r30, 0x20	; 32
  7e:	fa e0       	ldi	r31, 0x0A	; 10
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 38       	cpi	r26, 0x86	; 134
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	23 e0       	ldi	r18, 0x03	; 3
  8e:	a6 e8       	ldi	r26, 0x86	; 134
  90:	b2 e0       	ldi	r27, 0x02	; 2
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ac 32       	cpi	r26, 0x2C	; 44
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 08 05 	call	0xa10	; 0xa10 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 33 03 	call	0x666	; 0x666 <main>
  b6:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	55 e2       	ldi	r21, 0x25	; 37
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	0c 94 3e 02 	jmp	0x47c	; 0x47c <_ZN14HardwareSerial5beginEmh>

000000d0 <loop>:
  d0:	2f 92       	push	r2
  d2:	3f 92       	push	r3
  d4:	4f 92       	push	r4
  d6:	6f 92       	push	r6
  d8:	7f 92       	push	r7
  da:	8f 92       	push	r8
  dc:	9f 92       	push	r9
  de:	af 92       	push	r10
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	cc 5a       	subi	r28, 0xAC	; 172
  f8:	d2 40       	sbci	r29, 0x02	; 2
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	9e 01       	movw	r18, r28
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	cb 55       	subi	r28, 0x5B	; 91
 10c:	dd 4f       	sbci	r29, 0xFD	; 253
 10e:	39 83       	std	Y+1, r19	; 0x01
 110:	28 83       	st	Y, r18
 112:	c5 5a       	subi	r28, 0xA5	; 165
 114:	d2 40       	sbci	r29, 0x02	; 2
 116:	84 ea       	ldi	r24, 0xA4	; 164
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	f9 01       	movw	r30, r18
 11c:	9c 01       	movw	r18, r24
 11e:	11 92       	st	Z+, r1
 120:	21 50       	subi	r18, 0x01	; 1
 122:	30 40       	sbci	r19, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <loop+0x4e>
 126:	0e 94 86 04 	call	0x90c	; 0x90c <micros>
 12a:	c7 55       	subi	r28, 0x57	; 87
 12c:	dd 4f       	sbci	r29, 0xFD	; 253
 12e:	68 83       	st	Y, r22
 130:	79 83       	std	Y+1, r23	; 0x01
 132:	8a 83       	std	Y+2, r24	; 0x02
 134:	9b 83       	std	Y+3, r25	; 0x03
 136:	c9 5a       	subi	r28, 0xA9	; 169
 138:	d2 40       	sbci	r29, 0x02	; 2
 13a:	92 e5       	ldi	r25, 0x52	; 82
 13c:	e9 2e       	mov	r14, r25
 13e:	92 e0       	ldi	r25, 0x02	; 2
 140:	f9 2e       	mov	r15, r25
 142:	29 ea       	ldi	r18, 0xA9	; 169
 144:	c2 2e       	mov	r12, r18
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	d2 2e       	mov	r13, r18
 14a:	3e 01       	movw	r6, r28
 14c:	3b e5       	ldi	r19, 0x5B	; 91
 14e:	63 1a       	sub	r6, r19
 150:	3d ef       	ldi	r19, 0xFD	; 253
 152:	73 0a       	sbc	r7, r19
 154:	39 ea       	ldi	r19, 0xA9	; 169
 156:	83 2e       	mov	r8, r19
 158:	31 e0       	ldi	r19, 0x01	; 1
 15a:	93 2e       	mov	r9, r19
 15c:	53 01       	movw	r10, r6
 15e:	4d e0       	ldi	r20, 0x0D	; 13
 160:	44 2e       	mov	r4, r20
 162:	08 ea       	ldi	r16, 0xA8	; 168
 164:	11 e0       	ldi	r17, 0x01	; 1
 166:	61 e5       	ldi	r22, 0x51	; 81
 168:	72 e0       	ldi	r23, 0x02	; 2
 16a:	fb 01       	movw	r30, r22
 16c:	20 81       	ld	r18, Z
 16e:	f8 01       	movw	r30, r16
 170:	80 81       	ld	r24, Z
 172:	28 02       	muls	r18, r24
 174:	90 01       	movw	r18, r0
 176:	11 24       	eor	r1, r1
 178:	fb 01       	movw	r30, r22
 17a:	32 97       	sbiw	r30, 0x02	; 2
 17c:	d8 01       	movw	r26, r16
 17e:	5a 97       	sbiw	r26, 0x1a	; 26
 180:	ab 01       	movw	r20, r22
 182:	4e 50       	subi	r20, 0x0E	; 14
 184:	51 09       	sbc	r21, r1
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	1b 01       	movw	r2, r22
 18c:	c9 55       	subi	r28, 0x59	; 89
 18e:	dd 4f       	sbci	r29, 0xFD	; 253
 190:	19 83       	std	Y+1, r17	; 0x01
 192:	08 83       	st	Y, r16
 194:	c7 5a       	subi	r28, 0xA7	; 167
 196:	d2 40       	sbci	r29, 0x02	; 2
 198:	11 81       	ldd	r17, Z+1	; 0x01
 19a:	1d 96       	adiw	r26, 0x0d	; 13
 19c:	7c 91       	ld	r23, X
 19e:	1d 97       	sbiw	r26, 0x0d	; 13
 1a0:	17 02       	muls	r17, r23
 1a2:	20 0d       	add	r18, r0
 1a4:	31 1d       	adc	r19, r1
 1a6:	11 24       	eor	r1, r1
 1a8:	10 81       	ld	r17, Z
 1aa:	7c 91       	ld	r23, X
 1ac:	17 02       	muls	r17, r23
 1ae:	80 0d       	add	r24, r0
 1b0:	91 1d       	adc	r25, r1
 1b2:	11 24       	eor	r1, r1
 1b4:	32 97       	sbiw	r30, 0x02	; 2
 1b6:	5a 97       	sbiw	r26, 0x1a	; 26
 1b8:	4e 17       	cp	r20, r30
 1ba:	5f 07       	cpc	r21, r31
 1bc:	69 f7       	brne	.-38     	; 0x198 <loop+0xc8>
 1be:	b1 01       	movw	r22, r2
 1c0:	c9 55       	subi	r28, 0x59	; 89
 1c2:	dd 4f       	sbci	r29, 0xFD	; 253
 1c4:	08 81       	ld	r16, Y
 1c6:	19 81       	ldd	r17, Y+1	; 0x01
 1c8:	c7 5a       	subi	r28, 0xA7	; 167
 1ca:	d2 40       	sbci	r29, 0x02	; 2
 1cc:	f7 01       	movw	r30, r14
 1ce:	52 91       	ld	r21, -Z
 1d0:	7f 01       	movw	r14, r30
 1d2:	f6 01       	movw	r30, r12
 1d4:	42 91       	ld	r20, -Z
 1d6:	6f 01       	movw	r12, r30
 1d8:	45 0f       	add	r20, r21
 1da:	24 0f       	add	r18, r20
 1dc:	31 1d       	adc	r19, r1
 1de:	a0 e0       	ldi	r26, 0x00	; 0
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	82 0f       	add	r24, r18
 1e4:	93 1f       	adc	r25, r19
 1e6:	a1 1d       	adc	r26, r1
 1e8:	b1 1d       	adc	r27, r1
 1ea:	f5 01       	movw	r30, r10
 1ec:	b2 93       	st	-Z, r27
 1ee:	a2 93       	st	-Z, r26
 1f0:	92 93       	st	-Z, r25
 1f2:	82 93       	st	-Z, r24
 1f4:	5f 01       	movw	r10, r30
 1f6:	4a 94       	dec	r4
 1f8:	44 20       	and	r4, r4
 1fa:	09 f4       	brne	.+2      	; 0x1fe <loop+0x12e>
 1fc:	63 c0       	rjmp	.+198    	; 0x2c4 <loop+0x1f4>
 1fe:	01 50       	subi	r16, 0x01	; 1
 200:	11 09       	sbc	r17, r1
 202:	8e 14       	cp	r8, r14
 204:	9f 04       	cpc	r9, r15
 206:	09 f0       	breq	.+2      	; 0x20a <loop+0x13a>
 208:	b0 cf       	rjmp	.-160    	; 0x16a <loop+0x9a>
 20a:	0e 94 86 04 	call	0x90c	; 0x90c <micros>
 20e:	6b 01       	movw	r12, r22
 210:	7c 01       	movw	r14, r24
 212:	c7 55       	subi	r28, 0x57	; 87
 214:	dd 4f       	sbci	r29, 0xFD	; 253
 216:	28 81       	ld	r18, Y
 218:	39 81       	ldd	r19, Y+1	; 0x01
 21a:	4a 81       	ldd	r20, Y+2	; 0x02
 21c:	5b 81       	ldd	r21, Y+3	; 0x03
 21e:	c9 5a       	subi	r28, 0xA9	; 169
 220:	d2 40       	sbci	r29, 0x02	; 2
 222:	c2 1a       	sub	r12, r18
 224:	d3 0a       	sbc	r13, r19
 226:	e4 0a       	sbc	r14, r20
 228:	f5 0a       	sbc	r15, r21
 22a:	42 e1       	ldi	r20, 0x12	; 18
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	62 e5       	ldi	r22, 0x52	; 82
 230:	72 e0       	ldi	r23, 0x02	; 2
 232:	86 e8       	ldi	r24, 0x86	; 134
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	0e 94 42 03 	call	0x684	; 0x684 <_ZN5Print5writeEPKhj>
 23a:	2a e0       	ldi	r18, 0x0A	; 10
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	b7 01       	movw	r22, r14
 240:	a6 01       	movw	r20, r12
 242:	86 e8       	ldi	r24, 0x86	; 134
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN5Print7printlnEmi>
 24a:	8e 01       	movw	r16, r28
 24c:	0f 5f       	subi	r16, 0xFF	; 255
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
 250:	78 01       	movw	r14, r16
 252:	34 e3       	ldi	r19, 0x34	; 52
 254:	e3 0e       	add	r14, r19
 256:	f1 1c       	adc	r15, r1
 258:	f8 01       	movw	r30, r16
 25a:	41 91       	ld	r20, Z+
 25c:	51 91       	ld	r21, Z+
 25e:	61 91       	ld	r22, Z+
 260:	71 91       	ld	r23, Z+
 262:	8f 01       	movw	r16, r30
 264:	2a e0       	ldi	r18, 0x0A	; 10
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	86 e8       	ldi	r24, 0x86	; 134
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <_ZN5Print5printEli>
 270:	69 e0       	ldi	r22, 0x09	; 9
 272:	86 e8       	ldi	r24, 0x86	; 134
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	0e 94 81 03 	call	0x702	; 0x702 <_ZN5Print5printEc>
 27a:	e0 16       	cp	r14, r16
 27c:	f1 06       	cpc	r15, r17
 27e:	61 f7       	brne	.-40     	; 0x258 <loop+0x188>
 280:	6a e0       	ldi	r22, 0x0A	; 10
 282:	86 e8       	ldi	r24, 0x86	; 134
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	0e 94 81 03 	call	0x702	; 0x702 <_ZN5Print5printEc>
 28a:	87 01       	movw	r16, r14
 28c:	e6 14       	cp	r14, r6
 28e:	f7 04       	cpc	r15, r7
 290:	f9 f6       	brne	.-66     	; 0x250 <loop+0x180>
 292:	c4 55       	subi	r28, 0x54	; 84
 294:	dd 4f       	sbci	r29, 0xFD	; 253
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	df 90       	pop	r13
 2ae:	cf 90       	pop	r12
 2b0:	bf 90       	pop	r11
 2b2:	af 90       	pop	r10
 2b4:	9f 90       	pop	r9
 2b6:	8f 90       	pop	r8
 2b8:	7f 90       	pop	r7
 2ba:	6f 90       	pop	r6
 2bc:	4f 90       	pop	r4
 2be:	3f 90       	pop	r3
 2c0:	2f 90       	pop	r2
 2c2:	08 95       	ret
 2c4:	6d 50       	subi	r22, 0x0D	; 13
 2c6:	71 09       	sbc	r23, r1
 2c8:	04 5f       	subi	r16, 0xF4	; 244
 2ca:	1f 4f       	sbci	r17, 0xFF	; 255
 2cc:	8d e0       	ldi	r24, 0x0D	; 13
 2ce:	48 2e       	mov	r4, r24
 2d0:	98 cf       	rjmp	.-208    	; 0x202 <loop+0x132>

000002d2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2d2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2d4:	91 8d       	ldd	r25, Z+25	; 0x19
 2d6:	22 8d       	ldd	r18, Z+26	; 0x1a
 2d8:	89 2f       	mov	r24, r25
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	80 5c       	subi	r24, 0xC0	; 192
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	82 1b       	sub	r24, r18
 2e2:	91 09       	sbc	r25, r1
}
 2e4:	8f 73       	andi	r24, 0x3F	; 63
 2e6:	99 27       	eor	r25, r25
 2e8:	08 95       	ret

000002ea <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2ea:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2ec:	91 8d       	ldd	r25, Z+25	; 0x19
 2ee:	82 8d       	ldd	r24, Z+26	; 0x1a
 2f0:	98 17       	cp	r25, r24
 2f2:	31 f0       	breq	.+12     	; 0x300 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2f4:	82 8d       	ldd	r24, Z+26	; 0x1a
 2f6:	e8 0f       	add	r30, r24
 2f8:	f1 1d       	adc	r31, r1
 2fa:	85 8d       	ldd	r24, Z+29	; 0x1d
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 304:	08 95       	ret

00000306 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 306:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 308:	91 8d       	ldd	r25, Z+25	; 0x19
 30a:	82 8d       	ldd	r24, Z+26	; 0x1a
 30c:	98 17       	cp	r25, r24
 30e:	61 f0       	breq	.+24     	; 0x328 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 310:	82 8d       	ldd	r24, Z+26	; 0x1a
 312:	df 01       	movw	r26, r30
 314:	a8 0f       	add	r26, r24
 316:	b1 1d       	adc	r27, r1
 318:	5d 96       	adiw	r26, 0x1d	; 29
 31a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 31c:	92 8d       	ldd	r25, Z+26	; 0x1a
 31e:	9f 5f       	subi	r25, 0xFF	; 255
 320:	9f 73       	andi	r25, 0x3F	; 63
 322:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 32c:	08 95       	ret

0000032e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 32e:	fc 01       	movw	r30, r24
 330:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 332:	44 8d       	ldd	r20, Z+28	; 0x1c
 334:	25 2f       	mov	r18, r21
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	84 2f       	mov	r24, r20
 33a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 33c:	82 1b       	sub	r24, r18
 33e:	93 0b       	sbc	r25, r19
 340:	54 17       	cp	r21, r20
 342:	10 f0       	brcs	.+4      	; 0x348 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 344:	cf 96       	adiw	r24, 0x3f	; 63
 346:	08 95       	ret
  return tail - head - 1;
 348:	01 97       	sbiw	r24, 0x01	; 1
}
 34a:	08 95       	ret

0000034c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 34c:	8b ef       	ldi	r24, 0xFB	; 251
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	89 2b       	or	r24, r25
 352:	49 f0       	breq	.+18     	; 0x366 <_Z14serialEventRunv+0x1a>
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	89 2b       	or	r24, r25
 35a:	29 f0       	breq	.+10     	; 0x366 <_Z14serialEventRunv+0x1a>
 35c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z17Serial0_availablev>
 360:	81 11       	cpse	r24, r1
 362:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 366:	08 95       	ret

00000368 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 368:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 36a:	84 8d       	ldd	r24, Z+28	; 0x1c
 36c:	df 01       	movw	r26, r30
 36e:	a8 0f       	add	r26, r24
 370:	b1 1d       	adc	r27, r1
 372:	a3 5a       	subi	r26, 0xA3	; 163
 374:	bf 4f       	sbci	r27, 0xFF	; 255
 376:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 378:	84 8d       	ldd	r24, Z+28	; 0x1c
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	8f 73       	andi	r24, 0x3F	; 63
 380:	99 27       	eor	r25, r25
 382:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 384:	a6 89       	ldd	r26, Z+22	; 0x16
 386:	b7 89       	ldd	r27, Z+23	; 0x17
 388:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 38a:	a0 89       	ldd	r26, Z+16	; 0x10
 38c:	b1 89       	ldd	r27, Z+17	; 0x11
 38e:	8c 91       	ld	r24, X
 390:	80 64       	ori	r24, 0x40	; 64
 392:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 394:	93 8d       	ldd	r25, Z+27	; 0x1b
 396:	84 8d       	ldd	r24, Z+28	; 0x1c
 398:	98 13       	cpse	r25, r24
 39a:	06 c0       	rjmp	.+12     	; 0x3a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 39c:	02 88       	ldd	r0, Z+18	; 0x12
 39e:	f3 89       	ldd	r31, Z+19	; 0x13
 3a0:	e0 2d       	mov	r30, r0
 3a2:	80 81       	ld	r24, Z
 3a4:	8f 7d       	andi	r24, 0xDF	; 223
 3a6:	80 83       	st	Z, r24
 3a8:	08 95       	ret

000003aa <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
  _written = true;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 3bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3be:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3c0:	98 13       	cpse	r25, r24
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <_ZN14HardwareSerial5writeEh+0x24>
 3c4:	e8 89       	ldd	r30, Y+16	; 0x10
 3c6:	f9 89       	ldd	r31, Y+17	; 0x11
 3c8:	80 81       	ld	r24, Z
 3ca:	85 fd       	sbrc	r24, 5
 3cc:	24 c0       	rjmp	.+72     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ce:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 3d0:	0b 8d       	ldd	r16, Y+27	; 0x1b
 3d2:	10 e0       	ldi	r17, 0x00	; 0
 3d4:	0f 5f       	subi	r16, 0xFF	; 255
 3d6:	1f 4f       	sbci	r17, 0xFF	; 255
 3d8:	0f 73       	andi	r16, 0x3F	; 63
 3da:	11 27       	eor	r17, r17
 3dc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 3de:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3e0:	e8 12       	cpse	r14, r24
 3e2:	0c c0       	rjmp	.+24     	; 0x3fc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	07 fc       	sbrc	r0, 7
 3e8:	fa cf       	rjmp	.-12     	; 0x3de <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3ea:	e8 89       	ldd	r30, Y+16	; 0x10
 3ec:	f9 89       	ldd	r31, Y+17	; 0x11
 3ee:	80 81       	ld	r24, Z
 3f0:	85 ff       	sbrs	r24, 5
 3f2:	f5 cf       	rjmp	.-22     	; 0x3de <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3f4:	ce 01       	movw	r24, r28
 3f6:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3fa:	f1 cf       	rjmp	.-30     	; 0x3de <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3fe:	fe 01       	movw	r30, r28
 400:	e8 0f       	add	r30, r24
 402:	f1 1d       	adc	r31, r1
 404:	e3 5a       	subi	r30, 0xA3	; 163
 406:	ff 4f       	sbci	r31, 0xFF	; 255
 408:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 40a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 40c:	ea 89       	ldd	r30, Y+18	; 0x12
 40e:	fb 89       	ldd	r31, Y+19	; 0x13
 410:	80 81       	ld	r24, Z
 412:	80 62       	ori	r24, 0x20	; 32
 414:	07 c0       	rjmp	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 416:	ee 89       	ldd	r30, Y+22	; 0x16
 418:	ff 89       	ldd	r31, Y+23	; 0x17
 41a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 41c:	e8 89       	ldd	r30, Y+16	; 0x10
 41e:	f9 89       	ldd	r31, Y+17	; 0x11
 420:	80 81       	ld	r24, Z
 422:	80 64       	ori	r24, 0x40	; 64
 424:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	08 95       	ret

00000438 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 43e:	88 8d       	ldd	r24, Y+24	; 0x18
 440:	88 23       	and	r24, r24
 442:	c9 f0       	breq	.+50     	; 0x476 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 444:	ea 89       	ldd	r30, Y+18	; 0x12
 446:	fb 89       	ldd	r31, Y+19	; 0x13
 448:	80 81       	ld	r24, Z
 44a:	85 fd       	sbrc	r24, 5
 44c:	05 c0       	rjmp	.+10     	; 0x458 <_ZN14HardwareSerial5flushEv+0x20>
 44e:	a8 89       	ldd	r26, Y+16	; 0x10
 450:	b9 89       	ldd	r27, Y+17	; 0x11
 452:	8c 91       	ld	r24, X
 454:	86 fd       	sbrc	r24, 6
 456:	0f c0       	rjmp	.+30     	; 0x476 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	07 fc       	sbrc	r0, 7
 45c:	f5 cf       	rjmp	.-22     	; 0x448 <_ZN14HardwareSerial5flushEv+0x10>
 45e:	80 81       	ld	r24, Z
 460:	85 ff       	sbrs	r24, 5
 462:	f2 cf       	rjmp	.-28     	; 0x448 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 464:	a8 89       	ldd	r26, Y+16	; 0x10
 466:	b9 89       	ldd	r27, Y+17	; 0x11
 468:	8c 91       	ld	r24, X
 46a:	85 ff       	sbrs	r24, 5
 46c:	ed cf       	rjmp	.-38     	; 0x448 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 46e:	ce 01       	movw	r24, r28
 470:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 474:	e7 cf       	rjmp	.-50     	; 0x444 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 47c:	cf 92       	push	r12
 47e:	df 92       	push	r13
 480:	ef 92       	push	r14
 482:	ff 92       	push	r15
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	ec 01       	movw	r28, r24
 48c:	6a 01       	movw	r12, r20
 48e:	7b 01       	movw	r14, r22
 490:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 492:	e8 89       	ldd	r30, Y+16	; 0x10
 494:	f9 89       	ldd	r31, Y+17	; 0x11
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 49a:	41 15       	cp	r20, r1
 49c:	51 4e       	sbci	r21, 0xE1	; 225
 49e:	61 05       	cpc	r22, r1
 4a0:	71 05       	cpc	r23, r1
 4a2:	b1 f0       	breq	.+44     	; 0x4d0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	79 e0       	ldi	r23, 0x09	; 9
 4a8:	8d e3       	ldi	r24, 0x3D	; 61
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	a7 01       	movw	r20, r14
 4ae:	96 01       	movw	r18, r12
 4b0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__udivmodsi4>
 4b4:	da 01       	movw	r26, r20
 4b6:	c9 01       	movw	r24, r18
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	a1 09       	sbc	r26, r1
 4bc:	b1 09       	sbc	r27, r1
 4be:	b6 95       	lsr	r27
 4c0:	a7 95       	ror	r26
 4c2:	97 95       	ror	r25
 4c4:	87 95       	ror	r24
 4c6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4c8:	21 15       	cp	r18, r1
 4ca:	80 e1       	ldi	r24, 0x10	; 16
 4cc:	38 07       	cpc	r19, r24
 4ce:	a8 f0       	brcs	.+42     	; 0x4fa <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 4d0:	e8 89       	ldd	r30, Y+16	; 0x10
 4d2:	f9 89       	ldd	r31, Y+17	; 0x11
 4d4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 4d6:	60 e8       	ldi	r22, 0x80	; 128
 4d8:	74 e8       	ldi	r23, 0x84	; 132
 4da:	8e e1       	ldi	r24, 0x1E	; 30
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	a7 01       	movw	r20, r14
 4e0:	96 01       	movw	r18, r12
 4e2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__udivmodsi4>
 4e6:	da 01       	movw	r26, r20
 4e8:	c9 01       	movw	r24, r18
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	a1 09       	sbc	r26, r1
 4ee:	b1 09       	sbc	r27, r1
 4f0:	b6 95       	lsr	r27
 4f2:	a7 95       	ror	r26
 4f4:	97 95       	ror	r25
 4f6:	87 95       	ror	r24
 4f8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 4fa:	ec 85       	ldd	r30, Y+12	; 0x0c
 4fc:	fd 85       	ldd	r31, Y+13	; 0x0d
 4fe:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 500:	ee 85       	ldd	r30, Y+14	; 0x0e
 502:	ff 85       	ldd	r31, Y+15	; 0x0f
 504:	20 83       	st	Z, r18

  _written = false;
 506:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 508:	ec 89       	ldd	r30, Y+20	; 0x14
 50a:	fd 89       	ldd	r31, Y+21	; 0x15
 50c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 50e:	ea 89       	ldd	r30, Y+18	; 0x12
 510:	fb 89       	ldd	r31, Y+19	; 0x13
 512:	80 81       	ld	r24, Z
 514:	80 61       	ori	r24, 0x10	; 16
 516:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 518:	ea 89       	ldd	r30, Y+18	; 0x12
 51a:	fb 89       	ldd	r31, Y+19	; 0x13
 51c:	80 81       	ld	r24, Z
 51e:	88 60       	ori	r24, 0x08	; 8
 520:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 522:	ea 89       	ldd	r30, Y+18	; 0x12
 524:	fb 89       	ldd	r31, Y+19	; 0x13
 526:	80 81       	ld	r24, Z
 528:	80 68       	ori	r24, 0x80	; 128
 52a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 52c:	ea 89       	ldd	r30, Y+18	; 0x12
 52e:	fb 89       	ldd	r31, Y+19	; 0x13
 530:	80 81       	ld	r24, Z
 532:	8f 7d       	andi	r24, 0xDF	; 223
 534:	80 83       	st	Z, r24
}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	08 95       	ret

00000546 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
 550:	2f 93       	push	r18
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 55a:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <__data_end+0x10>
 55e:	f0 91 97 02 	lds	r31, 0x0297	; 0x800297 <__data_end+0x11>
 562:	80 81       	ld	r24, Z
 564:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end+0x16>
 568:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <__data_end+0x17>
 56c:	82 fd       	sbrc	r24, 2
 56e:	12 c0       	rjmp	.+36     	; 0x594 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 570:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 572:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <__data_end+0x19>
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 57a:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__data_end+0x1a>
 57e:	82 17       	cp	r24, r18
 580:	51 f0       	breq	.+20     	; 0x596 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 582:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__data_end+0x19>
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	ea 57       	subi	r30, 0x7A	; 122
 58a:	fd 4f       	sbci	r31, 0xFD	; 253
 58c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 58e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <__data_end+0x19>
 592:	01 c0       	rjmp	.+2      	; 0x596 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 594:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	9f 91       	pop	r25
 59c:	8f 91       	pop	r24
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	2f 93       	push	r18
 5b6:	3f 93       	push	r19
 5b8:	4f 93       	push	r20
 5ba:	5f 93       	push	r21
 5bc:	6f 93       	push	r22
 5be:	7f 93       	push	r23
 5c0:	8f 93       	push	r24
 5c2:	9f 93       	push	r25
 5c4:	af 93       	push	r26
 5c6:	bf 93       	push	r27
 5c8:	ef 93       	push	r30
 5ca:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 5cc:	86 e8       	ldi	r24, 0x86	; 134
 5ce:	92 e0       	ldi	r25, 0x02	; 2
 5d0:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 5f6:	86 e8       	ldi	r24, 0x86	; 134
 5f8:	92 e0       	ldi	r25, 0x02	; 2
 5fa:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN14HardwareSerial9availableEv>
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	89 2b       	or	r24, r25
 602:	09 f4       	brne	.+2      	; 0x606 <_Z17Serial0_availablev+0x10>
 604:	20 e0       	ldi	r18, 0x00	; 0
}
 606:	82 2f       	mov	r24, r18
 608:	08 95       	ret

0000060a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 60a:	e6 e8       	ldi	r30, 0x86	; 134
 60c:	f2 e0       	ldi	r31, 0x02	; 2
 60e:	13 82       	std	Z+3, r1	; 0x03
 610:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 612:	88 ee       	ldi	r24, 0xE8	; 232
 614:	93 e0       	ldi	r25, 0x03	; 3
 616:	a0 e0       	ldi	r26, 0x00	; 0
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	84 83       	std	Z+4, r24	; 0x04
 61c:	95 83       	std	Z+5, r25	; 0x05
 61e:	a6 83       	std	Z+6, r26	; 0x06
 620:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 622:	89 e6       	ldi	r24, 0x69	; 105
 624:	92 e0       	ldi	r25, 0x02	; 2
 626:	91 83       	std	Z+1, r25	; 0x01
 628:	80 83       	st	Z, r24
 62a:	85 ec       	ldi	r24, 0xC5	; 197
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	95 87       	std	Z+13, r25	; 0x0d
 630:	84 87       	std	Z+12, r24	; 0x0c
 632:	84 ec       	ldi	r24, 0xC4	; 196
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	97 87       	std	Z+15, r25	; 0x0f
 638:	86 87       	std	Z+14, r24	; 0x0e
 63a:	80 ec       	ldi	r24, 0xC0	; 192
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	91 8b       	std	Z+17, r25	; 0x11
 640:	80 8b       	std	Z+16, r24	; 0x10
 642:	81 ec       	ldi	r24, 0xC1	; 193
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	93 8b       	std	Z+19, r25	; 0x13
 648:	82 8b       	std	Z+18, r24	; 0x12
 64a:	82 ec       	ldi	r24, 0xC2	; 194
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	95 8b       	std	Z+21, r25	; 0x15
 650:	84 8b       	std	Z+20, r24	; 0x14
 652:	86 ec       	ldi	r24, 0xC6	; 198
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	97 8b       	std	Z+23, r25	; 0x17
 658:	86 8b       	std	Z+22, r24	; 0x16
 65a:	11 8e       	std	Z+25, r1	; 0x19
 65c:	12 8e       	std	Z+26, r1	; 0x1a
 65e:	13 8e       	std	Z+27, r1	; 0x1b
 660:	14 8e       	std	Z+28, r1	; 0x1c
 662:	08 95       	ret

00000664 <initVariant>:
 664:	08 95       	ret

00000666 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 666:	0e 94 ab 04 	call	0x956	; 0x956 <init>

	initVariant();
 66a:	0e 94 32 03 	call	0x664	; 0x664 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 66e:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 672:	c6 ea       	ldi	r28, 0xA6	; 166
 674:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 676:	0e 94 68 00 	call	0xd0	; 0xd0 <loop>
		if (serialEventRun) serialEventRun();
 67a:	20 97       	sbiw	r28, 0x00	; 0
 67c:	e1 f3       	breq	.-8      	; 0x676 <main+0x10>
 67e:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z14serialEventRunv>
 682:	f9 cf       	rjmp	.-14     	; 0x676 <main+0x10>

00000684 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 684:	cf 92       	push	r12
 686:	df 92       	push	r13
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	6c 01       	movw	r12, r24
 696:	7a 01       	movw	r14, r20
 698:	8b 01       	movw	r16, r22
 69a:	c0 e0       	ldi	r28, 0x00	; 0
 69c:	d0 e0       	ldi	r29, 0x00	; 0
 69e:	ce 15       	cp	r28, r14
 6a0:	df 05       	cpc	r29, r15
 6a2:	81 f0       	breq	.+32     	; 0x6c4 <_ZN5Print5writeEPKhj+0x40>
 6a4:	d8 01       	movw	r26, r16
 6a6:	6d 91       	ld	r22, X+
 6a8:	8d 01       	movw	r16, r26
 6aa:	d6 01       	movw	r26, r12
 6ac:	ed 91       	ld	r30, X+
 6ae:	fc 91       	ld	r31, X
 6b0:	01 90       	ld	r0, Z+
 6b2:	f0 81       	ld	r31, Z
 6b4:	e0 2d       	mov	r30, r0
 6b6:	c6 01       	movw	r24, r12
 6b8:	09 95       	icall
 6ba:	89 2b       	or	r24, r25
 6bc:	11 f0       	breq	.+4      	; 0x6c2 <_ZN5Print5writeEPKhj+0x3e>
 6be:	21 96       	adiw	r28, 0x01	; 1
 6c0:	ee cf       	rjmp	.-36     	; 0x69e <_ZN5Print5writeEPKhj+0x1a>
 6c2:	7e 01       	movw	r14, r28
 6c4:	c7 01       	movw	r24, r14
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	df 90       	pop	r13
 6d4:	cf 90       	pop	r12
 6d6:	08 95       	ret

000006d8 <_ZN5Print5writeEPKc>:
 6d8:	61 15       	cp	r22, r1
 6da:	71 05       	cpc	r23, r1
 6dc:	79 f0       	breq	.+30     	; 0x6fc <_ZN5Print5writeEPKc+0x24>
 6de:	fb 01       	movw	r30, r22
 6e0:	01 90       	ld	r0, Z+
 6e2:	00 20       	and	r0, r0
 6e4:	e9 f7       	brne	.-6      	; 0x6e0 <_ZN5Print5writeEPKc+0x8>
 6e6:	31 97       	sbiw	r30, 0x01	; 1
 6e8:	af 01       	movw	r20, r30
 6ea:	46 1b       	sub	r20, r22
 6ec:	57 0b       	sbc	r21, r23
 6ee:	dc 01       	movw	r26, r24
 6f0:	ed 91       	ld	r30, X+
 6f2:	fc 91       	ld	r31, X
 6f4:	02 80       	ldd	r0, Z+2	; 0x02
 6f6:	f3 81       	ldd	r31, Z+3	; 0x03
 6f8:	e0 2d       	mov	r30, r0
 6fa:	09 94       	ijmp
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	08 95       	ret

00000702 <_ZN5Print5printEc>:
 702:	dc 01       	movw	r26, r24
 704:	ed 91       	ld	r30, X+
 706:	fc 91       	ld	r31, X
 708:	01 90       	ld	r0, Z+
 70a:	f0 81       	ld	r31, Z
 70c:	e0 2d       	mov	r30, r0
 70e:	09 94       	ijmp

00000710 <_ZN5Print7printlnEv>:
 710:	67 e7       	ldi	r22, 0x77	; 119
 712:	72 e0       	ldi	r23, 0x02	; 2
 714:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <_ZN5Print5writeEPKc>

00000718 <_ZN5Print11printNumberEmh>:
 718:	8f 92       	push	r8
 71a:	9f 92       	push	r9
 71c:	af 92       	push	r10
 71e:	bf 92       	push	r11
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
 730:	a1 97       	sbiw	r28, 0x21	; 33
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	de bf       	out	0x3e, r29	; 62
 738:	0f be       	out	0x3f, r0	; 63
 73a:	cd bf       	out	0x3d, r28	; 61
 73c:	7c 01       	movw	r14, r24
 73e:	fa 01       	movw	r30, r20
 740:	cb 01       	movw	r24, r22
 742:	19 a2       	std	Y+33, r1	; 0x21
 744:	22 30       	cpi	r18, 0x02	; 2
 746:	08 f4       	brcc	.+2      	; 0x74a <_ZN5Print11printNumberEmh+0x32>
 748:	2a e0       	ldi	r18, 0x0A	; 10
 74a:	8e 01       	movw	r16, r28
 74c:	0f 5d       	subi	r16, 0xDF	; 223
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	82 2e       	mov	r8, r18
 752:	91 2c       	mov	r9, r1
 754:	a1 2c       	mov	r10, r1
 756:	b1 2c       	mov	r11, r1
 758:	bf 01       	movw	r22, r30
 75a:	a5 01       	movw	r20, r10
 75c:	94 01       	movw	r18, r8
 75e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__udivmodsi4>
 762:	f9 01       	movw	r30, r18
 764:	ca 01       	movw	r24, r20
 766:	01 50       	subi	r16, 0x01	; 1
 768:	11 09       	sbc	r17, r1
 76a:	6a 30       	cpi	r22, 0x0A	; 10
 76c:	10 f4       	brcc	.+4      	; 0x772 <_ZN5Print11printNumberEmh+0x5a>
 76e:	60 5d       	subi	r22, 0xD0	; 208
 770:	01 c0       	rjmp	.+2      	; 0x774 <_ZN5Print11printNumberEmh+0x5c>
 772:	69 5c       	subi	r22, 0xC9	; 201
 774:	d8 01       	movw	r26, r16
 776:	6c 93       	st	X, r22
 778:	23 2b       	or	r18, r19
 77a:	24 2b       	or	r18, r20
 77c:	25 2b       	or	r18, r21
 77e:	61 f7       	brne	.-40     	; 0x758 <_ZN5Print11printNumberEmh+0x40>
 780:	b8 01       	movw	r22, r16
 782:	c7 01       	movw	r24, r14
 784:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN5Print5writeEPKc>
 788:	a1 96       	adiw	r28, 0x21	; 33
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	ff 90       	pop	r15
 79e:	ef 90       	pop	r14
 7a0:	bf 90       	pop	r11
 7a2:	af 90       	pop	r10
 7a4:	9f 90       	pop	r9
 7a6:	8f 90       	pop	r8
 7a8:	08 95       	ret

000007aa <_ZN5Print5printEmi>:
 7aa:	21 15       	cp	r18, r1
 7ac:	31 05       	cpc	r19, r1
 7ae:	41 f4       	brne	.+16     	; 0x7c0 <_ZN5Print5printEmi+0x16>
 7b0:	dc 01       	movw	r26, r24
 7b2:	ed 91       	ld	r30, X+
 7b4:	fc 91       	ld	r31, X
 7b6:	01 90       	ld	r0, Z+
 7b8:	f0 81       	ld	r31, Z
 7ba:	e0 2d       	mov	r30, r0
 7bc:	64 2f       	mov	r22, r20
 7be:	09 94       	ijmp
 7c0:	0c 94 8c 03 	jmp	0x718	; 0x718 <_ZN5Print11printNumberEmh>

000007c4 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 7ce:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_ZN5Print5printEmi>
 7d2:	8c 01       	movw	r16, r24
  n += println();
 7d4:	ce 01       	movw	r24, r28
 7d6:	0e 94 88 03 	call	0x710	; 0x710 <_ZN5Print7printlnEv>
  return n;
}
 7da:	80 0f       	add	r24, r16
 7dc:	91 1f       	adc	r25, r17
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	08 95       	ret

000007e8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 7e8:	cf 92       	push	r12
 7ea:	df 92       	push	r13
 7ec:	ef 92       	push	r14
 7ee:	ff 92       	push	r15
 7f0:	0f 93       	push	r16
 7f2:	1f 93       	push	r17
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
  if (base == 0) {
 7f8:	21 15       	cp	r18, r1
 7fa:	31 05       	cpc	r19, r1
 7fc:	81 f4       	brne	.+32     	; 0x81e <_ZN5Print5printEli+0x36>
    return write(n);
 7fe:	dc 01       	movw	r26, r24
 800:	ed 91       	ld	r30, X+
 802:	fc 91       	ld	r31, X
 804:	01 90       	ld	r0, Z+
 806:	f0 81       	ld	r31, Z
 808:	e0 2d       	mov	r30, r0
 80a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	ff 90       	pop	r15
 816:	ef 90       	pop	r14
 818:	df 90       	pop	r13
 81a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 81c:	09 94       	ijmp
  } else if (base == 10) {
 81e:	2a 30       	cpi	r18, 0x0A	; 10
 820:	31 05       	cpc	r19, r1
 822:	01 f5       	brne	.+64     	; 0x864 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 824:	77 ff       	sbrs	r23, 7
 826:	1d c0       	rjmp	.+58     	; 0x862 <_ZN5Print5printEli+0x7a>
 828:	6a 01       	movw	r12, r20
 82a:	7b 01       	movw	r14, r22
 82c:	ec 01       	movw	r28, r24
      int t = print('-');
 82e:	6d e2       	ldi	r22, 0x2D	; 45
 830:	0e 94 81 03 	call	0x702	; 0x702 <_ZN5Print5printEc>
 834:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 836:	44 27       	eor	r20, r20
 838:	55 27       	eor	r21, r21
 83a:	ba 01       	movw	r22, r20
 83c:	4c 19       	sub	r20, r12
 83e:	5d 09       	sbc	r21, r13
 840:	6e 09       	sbc	r22, r14
 842:	7f 09       	sbc	r23, r15
 844:	2a e0       	ldi	r18, 0x0A	; 10
 846:	ce 01       	movw	r24, r28
 848:	0e 94 8c 03 	call	0x718	; 0x718 <_ZN5Print11printNumberEmh>
 84c:	80 0f       	add	r24, r16
 84e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	ff 90       	pop	r15
 85a:	ef 90       	pop	r14
 85c:	df 90       	pop	r13
 85e:	cf 90       	pop	r12
 860:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 862:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 864:	df 91       	pop	r29
 866:	cf 91       	pop	r28
 868:	1f 91       	pop	r17
 86a:	0f 91       	pop	r16
 86c:	ff 90       	pop	r15
 86e:	ef 90       	pop	r14
 870:	df 90       	pop	r13
 872:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 874:	0c 94 8c 03 	jmp	0x718	; 0x718 <_ZN5Print11printNumberEmh>

00000878 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 878:	1f 92       	push	r1
 87a:	0f 92       	push	r0
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	0f 92       	push	r0
 880:	11 24       	eor	r1, r1
 882:	2f 93       	push	r18
 884:	3f 93       	push	r19
 886:	8f 93       	push	r24
 888:	9f 93       	push	r25
 88a:	af 93       	push	r26
 88c:	bf 93       	push	r27
 88e:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <timer0_millis>
 892:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <timer0_millis+0x1>
 896:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <timer0_millis+0x2>
 89a:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <timer0_millis+0x3>
 89e:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <timer0_fract>
 8a2:	23 e0       	ldi	r18, 0x03	; 3
 8a4:	23 0f       	add	r18, r19
 8a6:	2d 37       	cpi	r18, 0x7D	; 125
 8a8:	20 f4       	brcc	.+8      	; 0x8b2 <__vector_16+0x3a>
 8aa:	01 96       	adiw	r24, 0x01	; 1
 8ac:	a1 1d       	adc	r26, r1
 8ae:	b1 1d       	adc	r27, r1
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <__vector_16+0x44>
 8b2:	26 e8       	ldi	r18, 0x86	; 134
 8b4:	23 0f       	add	r18, r19
 8b6:	02 96       	adiw	r24, 0x02	; 2
 8b8:	a1 1d       	adc	r26, r1
 8ba:	b1 1d       	adc	r27, r1
 8bc:	20 93 23 03 	sts	0x0323, r18	; 0x800323 <timer0_fract>
 8c0:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <timer0_millis>
 8c4:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <timer0_millis+0x1>
 8c8:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <timer0_millis+0x2>
 8cc:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <timer0_millis+0x3>
 8d0:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 8d4:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 8d8:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 8dc:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	a1 1d       	adc	r26, r1
 8e4:	b1 1d       	adc	r27, r1
 8e6:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <timer0_overflow_count>
 8ea:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <timer0_overflow_count+0x1>
 8ee:	a0 93 2a 03 	sts	0x032A, r26	; 0x80032a <timer0_overflow_count+0x2>
 8f2:	b0 93 2b 03 	sts	0x032B, r27	; 0x80032b <timer0_overflow_count+0x3>
 8f6:	bf 91       	pop	r27
 8f8:	af 91       	pop	r26
 8fa:	9f 91       	pop	r25
 8fc:	8f 91       	pop	r24
 8fe:	3f 91       	pop	r19
 900:	2f 91       	pop	r18
 902:	0f 90       	pop	r0
 904:	0f be       	out	0x3f, r0	; 63
 906:	0f 90       	pop	r0
 908:	1f 90       	pop	r1
 90a:	18 95       	reti

0000090c <micros>:
 90c:	3f b7       	in	r19, 0x3f	; 63
 90e:	f8 94       	cli
 910:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <timer0_overflow_count>
 914:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <timer0_overflow_count+0x1>
 918:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <timer0_overflow_count+0x2>
 91c:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <timer0_overflow_count+0x3>
 920:	26 b5       	in	r18, 0x26	; 38
 922:	a8 9b       	sbis	0x15, 0	; 21
 924:	05 c0       	rjmp	.+10     	; 0x930 <micros+0x24>
 926:	2f 3f       	cpi	r18, 0xFF	; 255
 928:	19 f0       	breq	.+6      	; 0x930 <micros+0x24>
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	a1 1d       	adc	r26, r1
 92e:	b1 1d       	adc	r27, r1
 930:	3f bf       	out	0x3f, r19	; 63
 932:	ba 2f       	mov	r27, r26
 934:	a9 2f       	mov	r26, r25
 936:	98 2f       	mov	r25, r24
 938:	88 27       	eor	r24, r24
 93a:	82 0f       	add	r24, r18
 93c:	91 1d       	adc	r25, r1
 93e:	a1 1d       	adc	r26, r1
 940:	b1 1d       	adc	r27, r1
 942:	bc 01       	movw	r22, r24
 944:	cd 01       	movw	r24, r26
 946:	42 e0       	ldi	r20, 0x02	; 2
 948:	66 0f       	add	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	4a 95       	dec	r20
 952:	d1 f7       	brne	.-12     	; 0x948 <micros+0x3c>
 954:	08 95       	ret

00000956 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 956:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 958:	84 b5       	in	r24, 0x24	; 36
 95a:	82 60       	ori	r24, 0x02	; 2
 95c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 95e:	84 b5       	in	r24, 0x24	; 36
 960:	81 60       	ori	r24, 0x01	; 1
 962:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 964:	85 b5       	in	r24, 0x25	; 37
 966:	82 60       	ori	r24, 0x02	; 2
 968:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 96a:	85 b5       	in	r24, 0x25	; 37
 96c:	81 60       	ori	r24, 0x01	; 1
 96e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 970:	ee e6       	ldi	r30, 0x6E	; 110
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	81 60       	ori	r24, 0x01	; 1
 978:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 97a:	e1 e8       	ldi	r30, 0x81	; 129
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 980:	80 81       	ld	r24, Z
 982:	82 60       	ori	r24, 0x02	; 2
 984:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 986:	80 81       	ld	r24, Z
 988:	81 60       	ori	r24, 0x01	; 1
 98a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 98c:	e0 e8       	ldi	r30, 0x80	; 128
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	80 81       	ld	r24, Z
 992:	81 60       	ori	r24, 0x01	; 1
 994:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 996:	e1 eb       	ldi	r30, 0xB1	; 177
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	80 81       	ld	r24, Z
 99c:	84 60       	ori	r24, 0x04	; 4
 99e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 9a0:	e0 eb       	ldi	r30, 0xB0	; 176
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	80 81       	ld	r24, Z
 9a6:	81 60       	ori	r24, 0x01	; 1
 9a8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 9aa:	ea e7       	ldi	r30, 0x7A	; 122
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	84 60       	ori	r24, 0x04	; 4
 9b2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 9b4:	80 81       	ld	r24, Z
 9b6:	82 60       	ori	r24, 0x02	; 2
 9b8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 9ba:	80 81       	ld	r24, Z
 9bc:	81 60       	ori	r24, 0x01	; 1
 9be:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9c0:	80 81       	ld	r24, Z
 9c2:	80 68       	ori	r24, 0x80	; 128
 9c4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9c6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 9ca:	08 95       	ret

000009cc <__udivmodsi4>:
 9cc:	a1 e2       	ldi	r26, 0x21	; 33
 9ce:	1a 2e       	mov	r1, r26
 9d0:	aa 1b       	sub	r26, r26
 9d2:	bb 1b       	sub	r27, r27
 9d4:	fd 01       	movw	r30, r26
 9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <__udivmodsi4_ep>

000009d8 <__udivmodsi4_loop>:
 9d8:	aa 1f       	adc	r26, r26
 9da:	bb 1f       	adc	r27, r27
 9dc:	ee 1f       	adc	r30, r30
 9de:	ff 1f       	adc	r31, r31
 9e0:	a2 17       	cp	r26, r18
 9e2:	b3 07       	cpc	r27, r19
 9e4:	e4 07       	cpc	r30, r20
 9e6:	f5 07       	cpc	r31, r21
 9e8:	20 f0       	brcs	.+8      	; 0x9f2 <__udivmodsi4_ep>
 9ea:	a2 1b       	sub	r26, r18
 9ec:	b3 0b       	sbc	r27, r19
 9ee:	e4 0b       	sbc	r30, r20
 9f0:	f5 0b       	sbc	r31, r21

000009f2 <__udivmodsi4_ep>:
 9f2:	66 1f       	adc	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	1a 94       	dec	r1
 9fc:	69 f7       	brne	.-38     	; 0x9d8 <__udivmodsi4_loop>
 9fe:	60 95       	com	r22
 a00:	70 95       	com	r23
 a02:	80 95       	com	r24
 a04:	90 95       	com	r25
 a06:	9b 01       	movw	r18, r22
 a08:	ac 01       	movw	r20, r24
 a0a:	bd 01       	movw	r22, r26
 a0c:	cf 01       	movw	r24, r30
 a0e:	08 95       	ret

00000a10 <__tablejump2__>:
 a10:	ee 0f       	add	r30, r30
 a12:	ff 1f       	adc	r31, r31
 a14:	05 90       	lpm	r0, Z+
 a16:	f4 91       	lpm	r31, Z
 a18:	e0 2d       	mov	r30, r0
 a1a:	09 94       	ijmp

00000a1c <_exit>:
 a1c:	f8 94       	cli

00000a1e <__stop_program>:
 a1e:	ff cf       	rjmp	.-2      	; 0xa1e <__stop_program>
