
Assignment_1.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000007e2  00000876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800134  00800134  000008aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000073a8  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016b4  00000000  00000000  00007f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014c2  00000000  00000000  000095e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  0000aaa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f1a  00000000  00000000  0000b1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025ff  00000000  00000000  0000d0be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000f6bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_18>
  4c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	35 02       	muls	r19, r21

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e2 ee       	ldi	r30, 0xE2	; 226
  7e:	f7 e0       	ldi	r31, 0x07	; 7
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a4 33       	cpi	r26, 0x34	; 52
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a4 e3       	ldi	r26, 0x34	; 52
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 3d       	cpi	r26, 0xDA	; 218
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <main>
  b6:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <operation_loop>:

operation_loop:
	 ;call stack contains matX, matY, matR

	 ;load variables
	ldi VAR_E, NR_MATRIX_ELEMENTS_MINUS_ONE
  be:	28 ea       	ldi	r18, 0xA8	; 168

000000c0 <outer_while>:

	;while(e >= 0)
	outer_while:
		;int mBuffer = 0;
		clr VAR_BUFFER_LO
  c0:	66 27       	eor	r22, r22
		clr VAR_BUFFER_HI
  c2:	77 27       	eor	r23, r23
		ldi VAR_K, NR_MATRIX_COLS_MINUS_ONE
  c4:	3c e0       	ldi	r19, 0x0C	; 12

000000c6 <inner_while>:

		inner_while:

		;check inner
		dec VAR_K
  c6:	3a 95       	dec	r19
		brne inner_while
  c8:	f1 f7       	brne	.-4      	; 0xc6 <inner_while>
		;end inner

	;check outer
	dec VAR_E
  ca:	2a 95       	dec	r18
	brne outer_while
  cc:	c9 f7       	brne	.-14     	; 0xc0 <outer_while>
	;end outer

  ce:	08 95       	ret

000000d0 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  d0:	26 e0       	ldi	r18, 0x06	; 6
  d2:	40 e8       	ldi	r20, 0x80	; 128
  d4:	55 e2       	ldi	r21, 0x25	; 37
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	84 e3       	ldi	r24, 0x34	; 52
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_ZN14HardwareSerial5beginEmh>

000000e2 <loop>:
  // put your setup code here, to run once:
  // initialize serial:
  Serial.begin(9600);
}

void loop() {
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15



	///////////
	/*Start timer*/
	unsigned long startTime = micros();
  ea:	0e 94 67 03 	call	0x6ce	; 0x6ce <micros>
  ee:	6b 01       	movw	r12, r22
  f0:	7c 01       	movw	r14, r24

	  
	operation_loop();
  f2:	0e 94 5f 00 	call	0xbe	; 0xbe <operation_loop>

    } while(e--);
	*/
  ////////////////////////////////////
  //
  unsigned long currentTime = micros();
  f6:	0e 94 67 03 	call	0x6ce	; 0x6ce <micros>
  unsigned long elapsedTime = currentTime - startTime;
  fa:	9b 01       	movw	r18, r22
  fc:	ac 01       	movw	r20, r24
  fe:	2c 19       	sub	r18, r12
 100:	3d 09       	sbc	r19, r13
 102:	4e 09       	sbc	r20, r14
 104:	5f 09       	sbc	r21, r15
 106:	69 01       	movw	r12, r18
 108:	7a 01       	movw	r14, r20
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 10a:	42 e1       	ldi	r20, 0x12	; 18
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	71 e0       	ldi	r23, 0x01	; 1
 112:	84 e3       	ldi	r24, 0x34	; 52
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_ZN5Print5writeEPKhj>

  //
  Serial.write("Elapsed time(us): ");
  Serial.println(elapsedTime);
 11a:	2a e0       	ldi	r18, 0x0A	; 10
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	b7 01       	movw	r22, r14
 120:	a6 01       	movw	r20, r12
 122:	84 e3       	ldi	r24, 0x34	; 52
 124:	91 e0       	ldi	r25, 0x01	; 1
}
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
  unsigned long currentTime = micros();
  unsigned long elapsedTime = currentTime - startTime;

  //
  Serial.write("Elapsed time(us): ");
  Serial.println(elapsedTime);
 12e:	0c 94 0b 03 	jmp	0x616	; 0x616 <_ZN5Print7printlnEmi>

00000132 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 132:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 134:	91 8d       	ldd	r25, Z+25	; 0x19
 136:	22 8d       	ldd	r18, Z+26	; 0x1a
 138:	89 2f       	mov	r24, r25
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	80 5c       	subi	r24, 0xC0	; 192
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	82 1b       	sub	r24, r18
 142:	91 09       	sbc	r25, r1
}
 144:	8f 73       	andi	r24, 0x3F	; 63
 146:	99 27       	eor	r25, r25
 148:	08 95       	ret

0000014a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 14a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 14c:	91 8d       	ldd	r25, Z+25	; 0x19
 14e:	82 8d       	ldd	r24, Z+26	; 0x1a
 150:	98 17       	cp	r25, r24
 152:	31 f0       	breq	.+12     	; 0x160 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 154:	82 8d       	ldd	r24, Z+26	; 0x1a
 156:	e8 0f       	add	r30, r24
 158:	f1 1d       	adc	r31, r1
 15a:	85 8d       	ldd	r24, Z+29	; 0x1d
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 164:	08 95       	ret

00000166 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 166:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 168:	91 8d       	ldd	r25, Z+25	; 0x19
 16a:	82 8d       	ldd	r24, Z+26	; 0x1a
 16c:	98 17       	cp	r25, r24
 16e:	61 f0       	breq	.+24     	; 0x188 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 170:	82 8d       	ldd	r24, Z+26	; 0x1a
 172:	df 01       	movw	r26, r30
 174:	a8 0f       	add	r26, r24
 176:	b1 1d       	adc	r27, r1
 178:	5d 96       	adiw	r26, 0x1d	; 29
 17a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 17c:	92 8d       	ldd	r25, Z+26	; 0x1a
 17e:	9f 5f       	subi	r25, 0xFF	; 255
 180:	9f 73       	andi	r25, 0x3F	; 63
 182:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 18c:	08 95       	ret

0000018e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 18e:	fc 01       	movw	r30, r24
 190:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 192:	44 8d       	ldd	r20, Z+28	; 0x1c
 194:	25 2f       	mov	r18, r21
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	84 2f       	mov	r24, r20
 19a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 19c:	82 1b       	sub	r24, r18
 19e:	93 0b       	sbc	r25, r19
 1a0:	54 17       	cp	r21, r20
 1a2:	10 f0       	brcs	.+4      	; 0x1a8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 1a4:	cf 96       	adiw	r24, 0x3f	; 63
 1a6:	08 95       	ret
  return tail - head - 1;
 1a8:	01 97       	sbiw	r24, 0x01	; 1
}
 1aa:	08 95       	ret

000001ac <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 1ac:	8b e2       	ldi	r24, 0x2B	; 43
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	89 2b       	or	r24, r25
 1b2:	49 f0       	breq	.+18     	; 0x1c6 <_Z14serialEventRunv+0x1a>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	89 2b       	or	r24, r25
 1ba:	29 f0       	breq	.+10     	; 0x1c6 <_Z14serialEventRunv+0x1a>
 1bc:	0e 94 2b 02 	call	0x456	; 0x456 <_Z17Serial0_availablev>
 1c0:	81 11       	cpse	r24, r1
 1c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 1c6:	08 95       	ret

000001c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 1c8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 1ca:	84 8d       	ldd	r24, Z+28	; 0x1c
 1cc:	df 01       	movw	r26, r30
 1ce:	a8 0f       	add	r26, r24
 1d0:	b1 1d       	adc	r27, r1
 1d2:	a3 5a       	subi	r26, 0xA3	; 163
 1d4:	bf 4f       	sbci	r27, 0xFF	; 255
 1d6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 1d8:	84 8d       	ldd	r24, Z+28	; 0x1c
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	8f 73       	andi	r24, 0x3F	; 63
 1e0:	99 27       	eor	r25, r25
 1e2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 1e4:	a6 89       	ldd	r26, Z+22	; 0x16
 1e6:	b7 89       	ldd	r27, Z+23	; 0x17
 1e8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 1ea:	a0 89       	ldd	r26, Z+16	; 0x10
 1ec:	b1 89       	ldd	r27, Z+17	; 0x11
 1ee:	8c 91       	ld	r24, X
 1f0:	80 64       	ori	r24, 0x40	; 64
 1f2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 1f4:	93 8d       	ldd	r25, Z+27	; 0x1b
 1f6:	84 8d       	ldd	r24, Z+28	; 0x1c
 1f8:	98 13       	cpse	r25, r24
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 1fc:	02 88       	ldd	r0, Z+18	; 0x12
 1fe:	f3 89       	ldd	r31, Z+19	; 0x13
 200:	e0 2d       	mov	r30, r0
 202:	80 81       	ld	r24, Z
 204:	8f 7d       	andi	r24, 0xDF	; 223
 206:	80 83       	st	Z, r24
 208:	08 95       	ret

0000020a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
  _written = true;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 21c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 21e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 220:	98 13       	cpse	r25, r24
 222:	05 c0       	rjmp	.+10     	; 0x22e <_ZN14HardwareSerial5writeEh+0x24>
 224:	e8 89       	ldd	r30, Y+16	; 0x10
 226:	f9 89       	ldd	r31, Y+17	; 0x11
 228:	80 81       	ld	r24, Z
 22a:	85 fd       	sbrc	r24, 5
 22c:	24 c0       	rjmp	.+72     	; 0x276 <_ZN14HardwareSerial5writeEh+0x6c>
 22e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 230:	0b 8d       	ldd	r16, Y+27	; 0x1b
 232:	10 e0       	ldi	r17, 0x00	; 0
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	1f 4f       	sbci	r17, 0xFF	; 255
 238:	0f 73       	andi	r16, 0x3F	; 63
 23a:	11 27       	eor	r17, r17
 23c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 23e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 240:	e8 12       	cpse	r14, r24
 242:	0c c0       	rjmp	.+24     	; 0x25c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	07 fc       	sbrc	r0, 7
 248:	fa cf       	rjmp	.-12     	; 0x23e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 24a:	e8 89       	ldd	r30, Y+16	; 0x10
 24c:	f9 89       	ldd	r31, Y+17	; 0x11
 24e:	80 81       	ld	r24, Z
 250:	85 ff       	sbrs	r24, 5
 252:	f5 cf       	rjmp	.-22     	; 0x23e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 254:	ce 01       	movw	r24, r28
 256:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 25a:	f1 cf       	rjmp	.-30     	; 0x23e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 25c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 25e:	fe 01       	movw	r30, r28
 260:	e8 0f       	add	r30, r24
 262:	f1 1d       	adc	r31, r1
 264:	e3 5a       	subi	r30, 0xA3	; 163
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 26a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 26c:	ea 89       	ldd	r30, Y+18	; 0x12
 26e:	fb 89       	ldd	r31, Y+19	; 0x13
 270:	80 81       	ld	r24, Z
 272:	80 62       	ori	r24, 0x20	; 32
 274:	07 c0       	rjmp	.+14     	; 0x284 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 276:	ee 89       	ldd	r30, Y+22	; 0x16
 278:	ff 89       	ldd	r31, Y+23	; 0x17
 27a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 27c:	e8 89       	ldd	r30, Y+16	; 0x10
 27e:	f9 89       	ldd	r31, Y+17	; 0x11
 280:	80 81       	ld	r24, Z
 282:	80 64       	ori	r24, 0x40	; 64
 284:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	08 95       	ret

00000298 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 29e:	88 8d       	ldd	r24, Y+24	; 0x18
 2a0:	88 23       	and	r24, r24
 2a2:	c9 f0       	breq	.+50     	; 0x2d6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 2a4:	ea 89       	ldd	r30, Y+18	; 0x12
 2a6:	fb 89       	ldd	r31, Y+19	; 0x13
 2a8:	80 81       	ld	r24, Z
 2aa:	85 fd       	sbrc	r24, 5
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <_ZN14HardwareSerial5flushEv+0x20>
 2ae:	a8 89       	ldd	r26, Y+16	; 0x10
 2b0:	b9 89       	ldd	r27, Y+17	; 0x11
 2b2:	8c 91       	ld	r24, X
 2b4:	86 fd       	sbrc	r24, 6
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	07 fc       	sbrc	r0, 7
 2bc:	f5 cf       	rjmp	.-22     	; 0x2a8 <_ZN14HardwareSerial5flushEv+0x10>
 2be:	80 81       	ld	r24, Z
 2c0:	85 ff       	sbrs	r24, 5
 2c2:	f2 cf       	rjmp	.-28     	; 0x2a8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 2c4:	a8 89       	ldd	r26, Y+16	; 0x10
 2c6:	b9 89       	ldd	r27, Y+17	; 0x11
 2c8:	8c 91       	ld	r24, X
 2ca:	85 ff       	sbrs	r24, 5
 2cc:	ed cf       	rjmp	.-38     	; 0x2a8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 2ce:	ce 01       	movw	r24, r28
 2d0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2d4:	e7 cf       	rjmp	.-50     	; 0x2a4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	ec 01       	movw	r28, r24
 2ec:	6a 01       	movw	r12, r20
 2ee:	7b 01       	movw	r14, r22
 2f0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 2f2:	e8 89       	ldd	r30, Y+16	; 0x10
 2f4:	f9 89       	ldd	r31, Y+17	; 0x11
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2fa:	41 15       	cp	r20, r1
 2fc:	51 4e       	sbci	r21, 0xE1	; 225
 2fe:	61 05       	cpc	r22, r1
 300:	71 05       	cpc	r23, r1
 302:	b1 f0       	breq	.+44     	; 0x330 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	79 e0       	ldi	r23, 0x09	; 9
 308:	8d e3       	ldi	r24, 0x3D	; 61
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	a7 01       	movw	r20, r14
 30e:	96 01       	movw	r18, r12
 310:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodsi4>
 314:	da 01       	movw	r26, r20
 316:	c9 01       	movw	r24, r18
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	a1 09       	sbc	r26, r1
 31c:	b1 09       	sbc	r27, r1
 31e:	b6 95       	lsr	r27
 320:	a7 95       	ror	r26
 322:	97 95       	ror	r25
 324:	87 95       	ror	r24
 326:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 328:	21 15       	cp	r18, r1
 32a:	80 e1       	ldi	r24, 0x10	; 16
 32c:	38 07       	cpc	r19, r24
 32e:	a8 f0       	brcs	.+42     	; 0x35a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 330:	e8 89       	ldd	r30, Y+16	; 0x10
 332:	f9 89       	ldd	r31, Y+17	; 0x11
 334:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 336:	60 e8       	ldi	r22, 0x80	; 128
 338:	74 e8       	ldi	r23, 0x84	; 132
 33a:	8e e1       	ldi	r24, 0x1E	; 30
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	a7 01       	movw	r20, r14
 340:	96 01       	movw	r18, r12
 342:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodsi4>
 346:	da 01       	movw	r26, r20
 348:	c9 01       	movw	r24, r18
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	a1 09       	sbc	r26, r1
 34e:	b1 09       	sbc	r27, r1
 350:	b6 95       	lsr	r27
 352:	a7 95       	ror	r26
 354:	97 95       	ror	r25
 356:	87 95       	ror	r24
 358:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 35a:	ec 85       	ldd	r30, Y+12	; 0x0c
 35c:	fd 85       	ldd	r31, Y+13	; 0x0d
 35e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 360:	ee 85       	ldd	r30, Y+14	; 0x0e
 362:	ff 85       	ldd	r31, Y+15	; 0x0f
 364:	20 83       	st	Z, r18

  _written = false;
 366:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 368:	ec 89       	ldd	r30, Y+20	; 0x14
 36a:	fd 89       	ldd	r31, Y+21	; 0x15
 36c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 36e:	ea 89       	ldd	r30, Y+18	; 0x12
 370:	fb 89       	ldd	r31, Y+19	; 0x13
 372:	80 81       	ld	r24, Z
 374:	80 61       	ori	r24, 0x10	; 16
 376:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 378:	ea 89       	ldd	r30, Y+18	; 0x12
 37a:	fb 89       	ldd	r31, Y+19	; 0x13
 37c:	80 81       	ld	r24, Z
 37e:	88 60       	ori	r24, 0x08	; 8
 380:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 382:	ea 89       	ldd	r30, Y+18	; 0x12
 384:	fb 89       	ldd	r31, Y+19	; 0x13
 386:	80 81       	ld	r24, Z
 388:	80 68       	ori	r24, 0x80	; 128
 38a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 38c:	ea 89       	ldd	r30, Y+18	; 0x12
 38e:	fb 89       	ldd	r31, Y+19	; 0x13
 390:	80 81       	ld	r24, Z
 392:	8f 7d       	andi	r24, 0xDF	; 223
 394:	80 83       	st	Z, r24
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	08 95       	ret

000003a6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	2f 93       	push	r18
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 3ba:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end+0x10>
 3be:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__data_end+0x11>
 3c2:	80 81       	ld	r24, Z
 3c4:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <__data_end+0x16>
 3c8:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <__data_end+0x17>
 3cc:	82 fd       	sbrc	r24, 2
 3ce:	12 c0       	rjmp	.+36     	; 0x3f4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 3d0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 3d2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__data_end+0x19>
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 3da:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <__data_end+0x1a>
 3de:	82 17       	cp	r24, r18
 3e0:	51 f0       	breq	.+20     	; 0x3f6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 3e2:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <__data_end+0x19>
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ec 5c       	subi	r30, 0xCC	; 204
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 3ee:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__data_end+0x19>
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 3f4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 42c:	84 e3       	ldi	r24, 0x34	; 52
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 434:	ff 91       	pop	r31
 436:	ef 91       	pop	r30
 438:	bf 91       	pop	r27
 43a:	af 91       	pop	r26
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	7f 91       	pop	r23
 442:	6f 91       	pop	r22
 444:	5f 91       	pop	r21
 446:	4f 91       	pop	r20
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 456:	84 e3       	ldi	r24, 0x34	; 52
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 99 00 	call	0x132	; 0x132 <_ZN14HardwareSerial9availableEv>
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	89 2b       	or	r24, r25
 462:	09 f4       	brne	.+2      	; 0x466 <_Z17Serial0_availablev+0x10>
 464:	20 e0       	ldi	r18, 0x00	; 0
}
 466:	82 2f       	mov	r24, r18
 468:	08 95       	ret

0000046a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 46a:	e4 e3       	ldi	r30, 0x34	; 52
 46c:	f1 e0       	ldi	r31, 0x01	; 1
 46e:	13 82       	std	Z+3, r1	; 0x03
 470:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 472:	88 ee       	ldi	r24, 0xE8	; 232
 474:	93 e0       	ldi	r25, 0x03	; 3
 476:	a0 e0       	ldi	r26, 0x00	; 0
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	84 83       	std	Z+4, r24	; 0x04
 47c:	95 83       	std	Z+5, r25	; 0x05
 47e:	a6 83       	std	Z+6, r26	; 0x06
 480:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 482:	87 e1       	ldi	r24, 0x17	; 23
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	91 83       	std	Z+1, r25	; 0x01
 488:	80 83       	st	Z, r24
 48a:	85 ec       	ldi	r24, 0xC5	; 197
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	95 87       	std	Z+13, r25	; 0x0d
 490:	84 87       	std	Z+12, r24	; 0x0c
 492:	84 ec       	ldi	r24, 0xC4	; 196
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	97 87       	std	Z+15, r25	; 0x0f
 498:	86 87       	std	Z+14, r24	; 0x0e
 49a:	80 ec       	ldi	r24, 0xC0	; 192
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	91 8b       	std	Z+17, r25	; 0x11
 4a0:	80 8b       	std	Z+16, r24	; 0x10
 4a2:	81 ec       	ldi	r24, 0xC1	; 193
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	93 8b       	std	Z+19, r25	; 0x13
 4a8:	82 8b       	std	Z+18, r24	; 0x12
 4aa:	82 ec       	ldi	r24, 0xC2	; 194
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	95 8b       	std	Z+21, r25	; 0x15
 4b0:	84 8b       	std	Z+20, r24	; 0x14
 4b2:	86 ec       	ldi	r24, 0xC6	; 198
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	97 8b       	std	Z+23, r25	; 0x17
 4b8:	86 8b       	std	Z+22, r24	; 0x16
 4ba:	11 8e       	std	Z+25, r1	; 0x19
 4bc:	12 8e       	std	Z+26, r1	; 0x1a
 4be:	13 8e       	std	Z+27, r1	; 0x1b
 4c0:	14 8e       	std	Z+28, r1	; 0x1c
 4c2:	08 95       	ret

000004c4 <initVariant>:
 4c4:	08 95       	ret

000004c6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 4c6:	0e 94 8c 03 	call	0x718	; 0x718 <init>

	initVariant();
 4ca:	0e 94 62 02 	call	0x4c4	; 0x4c4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 4ce:	0e 94 68 00 	call	0xd0	; 0xd0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 4d2:	c6 ed       	ldi	r28, 0xD6	; 214
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 4d6:	0e 94 71 00 	call	0xe2	; 0xe2 <loop>
		if (serialEventRun) serialEventRun();
 4da:	20 97       	sbiw	r28, 0x00	; 0
 4dc:	e1 f3       	breq	.-8      	; 0x4d6 <main+0x10>
 4de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z14serialEventRunv>
 4e2:	f9 cf       	rjmp	.-14     	; 0x4d6 <main+0x10>

000004e4 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 4e4:	cf 92       	push	r12
 4e6:	df 92       	push	r13
 4e8:	ef 92       	push	r14
 4ea:	ff 92       	push	r15
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	6c 01       	movw	r12, r24
 4f6:	7a 01       	movw	r14, r20
 4f8:	8b 01       	movw	r16, r22
 4fa:	c0 e0       	ldi	r28, 0x00	; 0
 4fc:	d0 e0       	ldi	r29, 0x00	; 0
 4fe:	ce 15       	cp	r28, r14
 500:	df 05       	cpc	r29, r15
 502:	81 f0       	breq	.+32     	; 0x524 <_ZN5Print5writeEPKhj+0x40>
 504:	d8 01       	movw	r26, r16
 506:	6d 91       	ld	r22, X+
 508:	8d 01       	movw	r16, r26
 50a:	d6 01       	movw	r26, r12
 50c:	ed 91       	ld	r30, X+
 50e:	fc 91       	ld	r31, X
 510:	01 90       	ld	r0, Z+
 512:	f0 81       	ld	r31, Z
 514:	e0 2d       	mov	r30, r0
 516:	c6 01       	movw	r24, r12
 518:	09 95       	icall
 51a:	89 2b       	or	r24, r25
 51c:	11 f0       	breq	.+4      	; 0x522 <_ZN5Print5writeEPKhj+0x3e>
 51e:	21 96       	adiw	r28, 0x01	; 1
 520:	ee cf       	rjmp	.-36     	; 0x4fe <_ZN5Print5writeEPKhj+0x1a>
 522:	7e 01       	movw	r14, r28
 524:	c7 01       	movw	r24, r14
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	ff 90       	pop	r15
 530:	ef 90       	pop	r14
 532:	df 90       	pop	r13
 534:	cf 90       	pop	r12
 536:	08 95       	ret

00000538 <_ZN5Print5writeEPKc>:
 538:	61 15       	cp	r22, r1
 53a:	71 05       	cpc	r23, r1
 53c:	79 f0       	breq	.+30     	; 0x55c <_ZN5Print5writeEPKc+0x24>
 53e:	fb 01       	movw	r30, r22
 540:	01 90       	ld	r0, Z+
 542:	00 20       	and	r0, r0
 544:	e9 f7       	brne	.-6      	; 0x540 <_ZN5Print5writeEPKc+0x8>
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	af 01       	movw	r20, r30
 54a:	46 1b       	sub	r20, r22
 54c:	57 0b       	sbc	r21, r23
 54e:	dc 01       	movw	r26, r24
 550:	ed 91       	ld	r30, X+
 552:	fc 91       	ld	r31, X
 554:	02 80       	ldd	r0, Z+2	; 0x02
 556:	f3 81       	ldd	r31, Z+3	; 0x03
 558:	e0 2d       	mov	r30, r0
 55a:	09 94       	ijmp
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	08 95       	ret

00000562 <_ZN5Print7printlnEv>:
 562:	65 e2       	ldi	r22, 0x25	; 37
 564:	71 e0       	ldi	r23, 0x01	; 1
 566:	0c 94 9c 02 	jmp	0x538	; 0x538 <_ZN5Print5writeEPKc>

0000056a <_ZN5Print11printNumberEmh>:
 56a:	8f 92       	push	r8
 56c:	9f 92       	push	r9
 56e:	af 92       	push	r10
 570:	bf 92       	push	r11
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	a1 97       	sbiw	r28, 0x21	; 33
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	de bf       	out	0x3e, r29	; 62
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	cd bf       	out	0x3d, r28	; 61
 58e:	7c 01       	movw	r14, r24
 590:	fa 01       	movw	r30, r20
 592:	cb 01       	movw	r24, r22
 594:	19 a2       	std	Y+33, r1	; 0x21
 596:	22 30       	cpi	r18, 0x02	; 2
 598:	08 f4       	brcc	.+2      	; 0x59c <_ZN5Print11printNumberEmh+0x32>
 59a:	2a e0       	ldi	r18, 0x0A	; 10
 59c:	8e 01       	movw	r16, r28
 59e:	0f 5d       	subi	r16, 0xDF	; 223
 5a0:	1f 4f       	sbci	r17, 0xFF	; 255
 5a2:	82 2e       	mov	r8, r18
 5a4:	91 2c       	mov	r9, r1
 5a6:	a1 2c       	mov	r10, r1
 5a8:	b1 2c       	mov	r11, r1
 5aa:	bf 01       	movw	r22, r30
 5ac:	a5 01       	movw	r20, r10
 5ae:	94 01       	movw	r18, r8
 5b0:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodsi4>
 5b4:	f9 01       	movw	r30, r18
 5b6:	ca 01       	movw	r24, r20
 5b8:	01 50       	subi	r16, 0x01	; 1
 5ba:	11 09       	sbc	r17, r1
 5bc:	6a 30       	cpi	r22, 0x0A	; 10
 5be:	10 f4       	brcc	.+4      	; 0x5c4 <_ZN5Print11printNumberEmh+0x5a>
 5c0:	60 5d       	subi	r22, 0xD0	; 208
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <_ZN5Print11printNumberEmh+0x5c>
 5c4:	69 5c       	subi	r22, 0xC9	; 201
 5c6:	d8 01       	movw	r26, r16
 5c8:	6c 93       	st	X, r22
 5ca:	23 2b       	or	r18, r19
 5cc:	24 2b       	or	r18, r20
 5ce:	25 2b       	or	r18, r21
 5d0:	61 f7       	brne	.-40     	; 0x5aa <_ZN5Print11printNumberEmh+0x40>
 5d2:	b8 01       	movw	r22, r16
 5d4:	c7 01       	movw	r24, r14
 5d6:	0e 94 9c 02 	call	0x538	; 0x538 <_ZN5Print5writeEPKc>
 5da:	a1 96       	adiw	r28, 0x21	; 33
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	ff 90       	pop	r15
 5f0:	ef 90       	pop	r14
 5f2:	bf 90       	pop	r11
 5f4:	af 90       	pop	r10
 5f6:	9f 90       	pop	r9
 5f8:	8f 90       	pop	r8
 5fa:	08 95       	ret

000005fc <_ZN5Print5printEmi>:
 5fc:	21 15       	cp	r18, r1
 5fe:	31 05       	cpc	r19, r1
 600:	41 f4       	brne	.+16     	; 0x612 <_ZN5Print5printEmi+0x16>
 602:	dc 01       	movw	r26, r24
 604:	ed 91       	ld	r30, X+
 606:	fc 91       	ld	r31, X
 608:	01 90       	ld	r0, Z+
 60a:	f0 81       	ld	r31, Z
 60c:	e0 2d       	mov	r30, r0
 60e:	64 2f       	mov	r22, r20
 610:	09 94       	ijmp
 612:	0c 94 b5 02 	jmp	0x56a	; 0x56a <_ZN5Print11printNumberEmh>

00000616 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 620:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_ZN5Print5printEmi>
 624:	8c 01       	movw	r16, r24
  n += println();
 626:	ce 01       	movw	r24, r28
 628:	0e 94 b1 02 	call	0x562	; 0x562 <_ZN5Print7printlnEv>
  return n;
}
 62c:	80 0f       	add	r24, r16
 62e:	91 1f       	adc	r25, r17
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	0f 91       	pop	r16
 638:	08 95       	ret

0000063a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 63a:	1f 92       	push	r1
 63c:	0f 92       	push	r0
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	0f 92       	push	r0
 642:	11 24       	eor	r1, r1
 644:	2f 93       	push	r18
 646:	3f 93       	push	r19
 648:	8f 93       	push	r24
 64a:	9f 93       	push	r25
 64c:	af 93       	push	r26
 64e:	bf 93       	push	r27
 650:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <timer0_millis>
 654:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <timer0_millis+0x1>
 658:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <timer0_millis+0x2>
 65c:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <timer0_millis+0x3>
 660:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <timer0_fract>
 664:	23 e0       	ldi	r18, 0x03	; 3
 666:	23 0f       	add	r18, r19
 668:	2d 37       	cpi	r18, 0x7D	; 125
 66a:	20 f4       	brcc	.+8      	; 0x674 <__vector_16+0x3a>
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	a1 1d       	adc	r26, r1
 670:	b1 1d       	adc	r27, r1
 672:	05 c0       	rjmp	.+10     	; 0x67e <__vector_16+0x44>
 674:	26 e8       	ldi	r18, 0x86	; 134
 676:	23 0f       	add	r18, r19
 678:	02 96       	adiw	r24, 0x02	; 2
 67a:	a1 1d       	adc	r26, r1
 67c:	b1 1d       	adc	r27, r1
 67e:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <timer0_fract>
 682:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <timer0_millis>
 686:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <timer0_millis+0x1>
 68a:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <timer0_millis+0x2>
 68e:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <timer0_millis+0x3>
 692:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <timer0_overflow_count>
 696:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <timer0_overflow_count+0x1>
 69a:	a0 91 d8 01 	lds	r26, 0x01D8	; 0x8001d8 <timer0_overflow_count+0x2>
 69e:	b0 91 d9 01 	lds	r27, 0x01D9	; 0x8001d9 <timer0_overflow_count+0x3>
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	a1 1d       	adc	r26, r1
 6a6:	b1 1d       	adc	r27, r1
 6a8:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <timer0_overflow_count>
 6ac:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <timer0_overflow_count+0x1>
 6b0:	a0 93 d8 01 	sts	0x01D8, r26	; 0x8001d8 <timer0_overflow_count+0x2>
 6b4:	b0 93 d9 01 	sts	0x01D9, r27	; 0x8001d9 <timer0_overflow_count+0x3>
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	3f 91       	pop	r19
 6c2:	2f 91       	pop	r18
 6c4:	0f 90       	pop	r0
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	0f 90       	pop	r0
 6ca:	1f 90       	pop	r1
 6cc:	18 95       	reti

000006ce <micros>:
 6ce:	3f b7       	in	r19, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <timer0_overflow_count>
 6d6:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <timer0_overflow_count+0x1>
 6da:	a0 91 d8 01 	lds	r26, 0x01D8	; 0x8001d8 <timer0_overflow_count+0x2>
 6de:	b0 91 d9 01 	lds	r27, 0x01D9	; 0x8001d9 <timer0_overflow_count+0x3>
 6e2:	26 b5       	in	r18, 0x26	; 38
 6e4:	a8 9b       	sbis	0x15, 0	; 21
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <micros+0x24>
 6e8:	2f 3f       	cpi	r18, 0xFF	; 255
 6ea:	19 f0       	breq	.+6      	; 0x6f2 <micros+0x24>
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	a1 1d       	adc	r26, r1
 6f0:	b1 1d       	adc	r27, r1
 6f2:	3f bf       	out	0x3f, r19	; 63
 6f4:	ba 2f       	mov	r27, r26
 6f6:	a9 2f       	mov	r26, r25
 6f8:	98 2f       	mov	r25, r24
 6fa:	88 27       	eor	r24, r24
 6fc:	82 0f       	add	r24, r18
 6fe:	91 1d       	adc	r25, r1
 700:	a1 1d       	adc	r26, r1
 702:	b1 1d       	adc	r27, r1
 704:	bc 01       	movw	r22, r24
 706:	cd 01       	movw	r24, r26
 708:	42 e0       	ldi	r20, 0x02	; 2
 70a:	66 0f       	add	r22, r22
 70c:	77 1f       	adc	r23, r23
 70e:	88 1f       	adc	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	4a 95       	dec	r20
 714:	d1 f7       	brne	.-12     	; 0x70a <micros+0x3c>
 716:	08 95       	ret

00000718 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 718:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 71a:	84 b5       	in	r24, 0x24	; 36
 71c:	82 60       	ori	r24, 0x02	; 2
 71e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 720:	84 b5       	in	r24, 0x24	; 36
 722:	81 60       	ori	r24, 0x01	; 1
 724:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 726:	85 b5       	in	r24, 0x25	; 37
 728:	82 60       	ori	r24, 0x02	; 2
 72a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 72c:	85 b5       	in	r24, 0x25	; 37
 72e:	81 60       	ori	r24, 0x01	; 1
 730:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 732:	ee e6       	ldi	r30, 0x6E	; 110
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	81 60       	ori	r24, 0x01	; 1
 73a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 73c:	e1 e8       	ldi	r30, 0x81	; 129
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 742:	80 81       	ld	r24, Z
 744:	82 60       	ori	r24, 0x02	; 2
 746:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 748:	80 81       	ld	r24, Z
 74a:	81 60       	ori	r24, 0x01	; 1
 74c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 74e:	e0 e8       	ldi	r30, 0x80	; 128
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	81 60       	ori	r24, 0x01	; 1
 756:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 758:	e1 eb       	ldi	r30, 0xB1	; 177
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	84 60       	ori	r24, 0x04	; 4
 760:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 762:	e0 eb       	ldi	r30, 0xB0	; 176
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	81 60       	ori	r24, 0x01	; 1
 76a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 76c:	ea e7       	ldi	r30, 0x7A	; 122
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	84 60       	ori	r24, 0x04	; 4
 774:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 776:	80 81       	ld	r24, Z
 778:	82 60       	ori	r24, 0x02	; 2
 77a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 77c:	80 81       	ld	r24, Z
 77e:	81 60       	ori	r24, 0x01	; 1
 780:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 782:	80 81       	ld	r24, Z
 784:	80 68       	ori	r24, 0x80	; 128
 786:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 788:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 78c:	08 95       	ret

0000078e <__udivmodsi4>:
 78e:	a1 e2       	ldi	r26, 0x21	; 33
 790:	1a 2e       	mov	r1, r26
 792:	aa 1b       	sub	r26, r26
 794:	bb 1b       	sub	r27, r27
 796:	fd 01       	movw	r30, r26
 798:	0d c0       	rjmp	.+26     	; 0x7b4 <__udivmodsi4_ep>

0000079a <__udivmodsi4_loop>:
 79a:	aa 1f       	adc	r26, r26
 79c:	bb 1f       	adc	r27, r27
 79e:	ee 1f       	adc	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	a2 17       	cp	r26, r18
 7a4:	b3 07       	cpc	r27, r19
 7a6:	e4 07       	cpc	r30, r20
 7a8:	f5 07       	cpc	r31, r21
 7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__udivmodsi4_ep>
 7ac:	a2 1b       	sub	r26, r18
 7ae:	b3 0b       	sbc	r27, r19
 7b0:	e4 0b       	sbc	r30, r20
 7b2:	f5 0b       	sbc	r31, r21

000007b4 <__udivmodsi4_ep>:
 7b4:	66 1f       	adc	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	1a 94       	dec	r1
 7be:	69 f7       	brne	.-38     	; 0x79a <__udivmodsi4_loop>
 7c0:	60 95       	com	r22
 7c2:	70 95       	com	r23
 7c4:	80 95       	com	r24
 7c6:	90 95       	com	r25
 7c8:	9b 01       	movw	r18, r22
 7ca:	ac 01       	movw	r20, r24
 7cc:	bd 01       	movw	r22, r26
 7ce:	cf 01       	movw	r24, r30
 7d0:	08 95       	ret

000007d2 <__tablejump2__>:
 7d2:	ee 0f       	add	r30, r30
 7d4:	ff 1f       	adc	r31, r31
 7d6:	05 90       	lpm	r0, Z+
 7d8:	f4 91       	lpm	r31, Z
 7da:	e0 2d       	mov	r30, r0
 7dc:	09 94       	ijmp

000007de <_exit>:
 7de:	f8 94       	cli

000007e0 <__stop_program>:
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <__stop_program>
